{"name": "mbpp_100_next_smallest_palindrome", "language": "clj", "prompt": "(defn next_smallest_palindrome\n  \"\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\"\n  [num]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_smallest_palindrome)\n\n(deftest test-humaneval\n\n  (is (= (candidate 99) 101))\n  (is (= (candidate 1221) 1331))\n  (is (= (candidate 120) 121))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_101_kth_element", "language": "clj", "prompt": "(defn kth_element\n  \"\tWrite a function to find the kth element in the given array using 1-based indexing.\"\n  [arr k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate kth_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 3 5 7 19] 2) 3))\n  (is (= (candidate [17 24 8 23] 3) 8))\n  (is (= (candidate [16 21 25 36 4] 4) 36))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_102_snake_to_camel", "language": "clj", "prompt": "(defn snake_to_camel\n  \"\tWrite a function to convert a snake case string to camel case string.\"\n  [word]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate snake_to_camel)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python_program\") \"PythonProgram\"))\n  (is (= (candidate \"python_language\") \"PythonLanguage\"))\n  (is (= (candidate \"programming_language\") \"ProgrammingLanguage\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_103_eulerian_num", "language": "clj", "prompt": "(defn eulerian_num\n  \"\tWrite a function to find the Eulerian number a(n, m).\"\n  [n m]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate eulerian_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 1) 4))\n  (is (= (candidate 4 1) 11))\n  (is (= (candidate 5 3) 26))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_104_sort_sublists", "language": "clj", "prompt": "(defn sort_sublists\n  \"\tWrite a function to sort each sublist of strings in a given list of lists.\"\n  [input_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_sublists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"green\" \"orange\"] [\"black\" \"white\"] [\"white\" \"black\" \"orange\"]]) [[\"green\" \"orange\"] [\"black\" \"white\"] [\"black\" \"orange\" \"white\"]]))\n  (is (= (candidate [[\" red \" \"green\"] [\"blue \" \" black\"] [\" orange\" \"brown\"]]) [[\" red \" \"green\"] [\" black\" \"blue \"] [\" orange\" \"brown\"]]))\n  (is (= (candidate [[\"zilver\" \"gold\"] [\"magnesium\" \"aluminium\"] [\"steel\" \"bronze\"]]) [[\"gold\" \"zilver\"] [\"aluminium\" \"magnesium\"] [\"bronze\" \"steel\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_105_count", "language": "clj", "prompt": "(defn count\n  \"\tWrite a python function to count true booleans in the given list.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [true false true]) 2))\n  (is (= (candidate [false false]) 0))\n  (is (= (candidate [true true true]) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_106_add_lists", "language": "clj", "prompt": "(defn add_lists\n  \"\tWrite a function to append the given list to the given tuples.\"\n  [test_list test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 7] [9 10]) [9 10 5 6 7]))\n  (is (= (candidate [6 7 8] [10 11]) [10 11 6 7 8]))\n  (is (= (candidate [7 8 9] [11 12]) [11 12 7 8 9]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_108_merge_sorted_list", "language": "clj", "prompt": "(defn merge_sorted_list\n  \"\tWrite a function to merge three lists into a single sorted list.\"\n  [num1 num2 num3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate merge_sorted_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [25 24 15 4 5 29 110] [19 20 11 56 25 233 154] [24 26 54 48]) [4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233]))\n  (is (= (candidate [1 3 5 6 8 9] [2 5 7 11] [1 4 7 8 12]) [1 1 2 3 4 5 5 6 7 7 8 8 9 11 12]))\n  (is (= (candidate [18 14 10 9 8 7 9 3 2 4 1] [25 35 22 85 14 65 75 25 58] [12 74 9 50 61 41]) [1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_109_odd_Equivalent", "language": "clj", "prompt": "(defn odd_Equivalent\n  \"\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\"\n  [s n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_Equivalent)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"011001\" 6) 3))\n  (is (= (candidate \"11011\" 5) 4))\n  (is (= (candidate \"1010\" 4) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_113_check_integer", "language": "clj", "prompt": "(defn check_integer\n  \"\tWrite a function to check if a string represents an integer or not.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_integer)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") false))\n  (is (= (candidate \"1\") true))\n  (is (= (candidate \"12345\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_116_tuple_to_int", "language": "clj", "prompt": "(defn tuple_to_int\n  \"\tWrite a function to convert a given tuple of positive integers into a single integer.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_to_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 123))\n  (is (= (candidate [4 5 6]) 456))\n  (is (= (candidate [5 6 7]) 567))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_117_list_to_float", "language": "clj", "prompt": "(defn list_to_float\n  \"\tWrite a function to convert all possible convertible elements in a list of lists to floats.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate list_to_float)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"3\" \"4\"] [\"1\" \"26.45\"] [\"7.32\" \"8\"] [\"4\" \"8\"]]) [[3.0 4.0] [1.0 26.45] [7.32 8.0] [4.0 8.0]]))\n  (is (= (candidate [[\"4\" \"4\"] [\"2\" \"27\"] [\"4.12\" \"9\"] [\"7\" \"11\"]]) [[4.0 4.0] [2.0 27.0] [4.12 9.0] [7.0 11.0]]))\n  (is (= (candidate [[\"6\" \"78\"] [\"5\" \"26.45\"] [\"1.33\" \"4\"] [\"82\" \"13\"]]) [[6.0 78.0] [5.0 26.45] [1.33 4.0] [82.0 13.0]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_118_string_to_list", "language": "clj", "prompt": "(defn string_to_list\n  \"\tWrite a function to convert a string to a list of strings split on the space character.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_to_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python programming\") [\"python\" \"programming\"]))\n  (is (= (candidate \"lists tuples strings\") [\"lists\" \"tuples\" \"strings\"]))\n  (is (= (candidate \"write a program\") [\"write\" \"a\" \"program\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_119_search", "language": "clj", "prompt": "(defn search\n  \"\tWrite a python function to find the element that appears only once in a sorted array.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate search)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 2 3]) 3))\n  (is (= (candidate [1 1 3 3 4 4 5 5 7 7 8]) 8))\n  (is (= (candidate [1 2 2 3 3 4 4]) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_11_remove_Occ", "language": "clj", "prompt": "(defn remove_Occ\n  \"\tWrite a python function to remove first and last occurrence of a given character from the string.\"\n  [s ch]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_Occ)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"hello\" \"l\") \"heo\"))\n  (is (= (candidate \"abcda\" \"a\") \"bcd\"))\n  (is (= (candidate \"PHP\" \"P\") \"H\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_120_max_product_tuple", "language": "clj", "prompt": "(defn max_product_tuple\n  \"\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_product_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[2 7] [2 6] [1 8] [4 9]]) 36))\n  (is (= (candidate [[10 20] [15 2] [5 10]]) 200))\n  (is (= (candidate [[11 44] [10 15] [20 5] [12 9]]) 484))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "clj", "prompt": "(defn amicable_numbers_sum\n  \"\tWrite a function to sum all amicable numbers from 1 to a specified number.\"\n  [limit]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate amicable_numbers_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 999) 504))\n  (is (= (candidate 9999) 31626))\n  (is (= (candidate 99) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_125_find_length", "language": "clj", "prompt": "(defn find_length\n  \"\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"11000010001\") 6))\n  (is (= (candidate \"10111\") 1))\n  (is (= (candidate \"11011101100101\") 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_126_sum", "language": "clj", "prompt": "(defn sum\n  \"\tWrite a python function to find the sum of common divisors of two given numbers.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 15) 6))\n  (is (= (candidate 100 150) 93))\n  (is (= (candidate 4 6) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_127_multiply_int", "language": "clj", "prompt": "(defn multiply_int\n  \"\tWrite a function to multiply two integers.\"\n  [x y]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiply_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20) 200))\n  (is (= (candidate 5 10) 50))\n  (is (= (candidate 4 8) 32))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_128_long_words", "language": "clj", "prompt": "(defn long_words\n  \"\tWrite a function to find words that are longer than n characters from a given list of words.\"\n  [n str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate long_words)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 \"python is a programming language\") [\"python\" \"programming\" \"language\"]))\n  (is (= (candidate 2 \"writing a program\") [\"writing\" \"program\"]))\n  (is (= (candidate 5 \"sorting list\") [\"sorting\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_129_magic_square_test", "language": "clj", "prompt": "(defn magic_square_test\n  \"\tWrite a function to calculate whether the matrix is a magic square.\"\n  [my_matrix]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate magic_square_test)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[7 12 1 14] [2 13 8 11] [16 3 10 5] [9 6 15 4]]) true))\n  (is (= (candidate [[2 7 6] [9 5 1] [4 3 8]]) true))\n  (is (= (candidate [[2 7 6] [9 5 1] [4 3 7]]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_12_sort_matrix", "language": "clj", "prompt": "(defn sort_matrix\n  \"\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\"\n  [M]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_matrix)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [2 4 5] [1 1 1]]) [[1 1 1] [1 2 3] [2 4 5]]))\n  (is (= (candidate [[1 2 3] [-2 4 -5] [1 -1 1]]) [[-2 4 -5] [1 -1 1] [1 2 3]]))\n  (is (= (candidate [[5 8 9] [6 4 3] [2 1 4]]) [[2 1 4] [6 4 3] [5 8 9]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_130_max_occurrences", "language": "clj", "prompt": "(defn max_occurrences\n  \"\tWrite a function to find the item with maximum frequency in a given list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_occurrences)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2]) 2))\n  (is (= (candidate [2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18]) 8))\n  (is (= (candidate [10 20 20 30 40 90 80 50 30 20 50 10]) 20))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_131_reverse_vowels", "language": "clj", "prompt": "(defn reverse_vowels\n  \"\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_vowels)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python\") \"Python\"))\n  (is (= (candidate \"USA\") \"ASU\"))\n  (is (= (candidate \"ab\") \"ab\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_132_tup_string", "language": "clj", "prompt": "(defn tup_string\n  \"\tWrite a function to convert a list to a string.\"\n  [tup1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tup_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"e\" \"x\" \"e\" \"r\" \"c\" \"i\" \"s\" \"e\" \"s\"]) \"exercises\"))\n  (is (= (candidate [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\"]) \"python\"))\n  (is (= (candidate [\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"]) \"program\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_133_sum_negativenum", "language": "clj", "prompt": "(defn sum_negativenum\n  \"\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_negativenum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 4 -6 -9 11 -12 14 -5 17]) -32))\n  (is (= (candidate [10 15 -14 13 -18 12 -20]) -52))\n  (is (= (candidate [19 -65 57 39 152 -639 121 44 90 -190]) -894))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_135_hexagonal_num", "language": "clj", "prompt": "(defn hexagonal_num\n  \"\tWrite a function to find the nth hexagonal number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate hexagonal_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 190))\n  (is (= (candidate 5) 45))\n  (is (= (candidate 7) 91))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "clj", "prompt": "(defn is_Sum_Of_Powers_Of_Two\n  \"\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Sum_Of_Powers_Of_Two)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) true))\n  (is (= (candidate 7) false))\n  (is (= (candidate 14) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_141_pancake_sort", "language": "clj", "prompt": "(defn pancake_sort\n  \"\tWrite a function to sort a list of elements.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pancake_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [15 79 25 38 69]) [15 25 38 69 79]))\n  (is (= (candidate [98 12 54 36 85]) [12 36 54 85 98]))\n  (is (= (candidate [41 42 32 12 23]) [12 23 32 41 42]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_142_count_samepair", "language": "clj", "prompt": "(defn count_samepair\n  \"\tWrite a function to count number items that are identical in the same position of three given lists.\"\n  [list1 list2 list3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_samepair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8] [2 2 3 1 2 6 7 9] [2 1 3 1 2 6 7 9]) 3))\n  (is (= (candidate [1 2 3 4 5 6 7 8] [2 2 3 1 2 6 7 8] [2 1 3 1 2 6 7 8]) 4))\n  (is (= (candidate [1 2 3 4 2 6 7 8] [2 2 3 1 2 6 7 8] [2 1 3 1 2 6 7 8]) 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_143_find_lists", "language": "clj", "prompt": "(defn find_lists\n  \"\tWrite a function to find number of lists present in the given list.\"\n  [Input]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3 4] [5 6 7 8]]) 2))\n  (is (= (candidate [[1 2] [3 4] [5 6]]) 3))\n  (is (= (candidate [9 8 7 6 5 4 3 2 1]) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_145_max_Abs_Diff", "language": "clj", "prompt": "(defn max_Abs_Diff\n  \"\tWrite a python function to find the maximum difference between any two elements in a given array.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_Abs_Diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 5 3]) 4))\n  (is (= (candidate [9 3 2 5 1]) 8))\n  (is (= (candidate [3 2 1]) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_14_find_Volume", "language": "clj", "prompt": "(defn find_Volume\n  \"\tWrite a python function to find the volume of a triangular prism.\"\n  [l b h]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Volume)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 8 6) 240))\n  (is (= (candidate 3 2 2) 6))\n  (is (= (candidate 1 2 1) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_160_find_solution", "language": "clj", "prompt": "(defn find_solution\n  \"\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\"\n  [a b n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_solution)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 3 7) [2 1]))\n  (is (= (candidate 4 2 7) nil))\n  (is (= (candidate 1 13 17) [4 1]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_161_remove_elements", "language": "clj", "prompt": "(defn remove_elements\n  \"\tWrite a function to remove all elements from a given list present in another list.\"\n  [list1 list2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] [2 4 6 8]) [1 3 5 7 9 10]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] [1 3 5 7]) [2 4 6 8 9 10]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] [5 7]) [1 2 3 4 6 8 9 10]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_162_sum_series", "language": "clj", "prompt": "(defn sum_series\n  \"\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_series)\n\n(deftest test-humaneval\n\n  (is (= (candidate 6) 12))\n  (is (= (candidate 10) 30))\n  (is (= (candidate 9) 25))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_164_are_equivalent", "language": "clj", "prompt": "(defn are_equivalent\n  \"\tWrite a function to determine if the sum of the divisors of two integers are the same.\"\n  [num1 num2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate are_equivalent)\n\n(deftest test-humaneval\n\n  (is (= (candidate 36 57) false))\n  (is (= (candidate 2 4) false))\n  (is (= (candidate 23 47) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_165_count_char_position", "language": "clj", "prompt": "(defn count_char_position\n  \"\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_char_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"xbcefg\") 2))\n  (is (= (candidate \"ABcED\") 3))\n  (is (= (candidate \"AbgdeF\") 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_166_find_even_pair", "language": "clj", "prompt": "(defn find_even_pair\n  \"\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\"\n  [A]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_even_pair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 4 7 2 1]) 4))\n  (is (= (candidate [7 2 8 1 0 5 11]) 9))\n  (is (= (candidate [1 2 3]) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_167_next_power_of_2", "language": "clj", "prompt": "(defn next_power_of_2\n  \"\tWrite a python function to find the smallest power of 2 greater than or equal to n.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_power_of_2)\n\n(deftest test-humaneval\n\n  (is (= (candidate 0) 1))\n  (is (= (candidate 5) 8))\n  (is (= (candidate 17) 32))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_168_frequency", "language": "clj", "prompt": "(defn frequency\n  \"\tWrite a function to count the number of occurrences of a number in a given list.\"\n  [a x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate frequency)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] 4) 0))\n  (is (= (candidate [1 2 2 3 3 3 4] 3) 3))\n  (is (= (candidate [0 1 2 3 1 2] 1) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "clj", "prompt": "(defn text_lowercase_underscore\n  \"\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_lowercase_underscore)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aab_cbbbc\") true))\n  (is (= (candidate \"aab_Abbbc\") false))\n  (is (= (candidate \"Aaab_abbbc\") false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_170_sum_range_list", "language": "clj", "prompt": "(defn sum_range_list\n  \"\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\"\n  [list1 m n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_range_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 5 6 8 3 4 9 10 11 8 12] 8 10) 29))\n  (is (= (candidate [2 1 5 6 8 3 4 9 10 11 8 12] 5 7) 16))\n  (is (= (candidate [2 1 5 6 8 3 4 9 10 11 8 12] 7 10) 38))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_171_perimeter_pentagon", "language": "clj", "prompt": "(defn perimeter_pentagon\n  \"\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\"\n  [a]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate perimeter_pentagon)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 25))\n  (is (= (candidate 10) 50))\n  (is (= (candidate 15) 75))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_172_count_occurance", "language": "clj", "prompt": "(defn count_occurance\n  \"\tWrite a function to count the number of occurence of the string 'std' in a given string.\"\n  [s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_occurance)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"letstdlenstdporstd\") 3))\n  (is (= (candidate \"truststdsolensporsd\") 1))\n  (is (= (candidate \"makestdsostdworthit\") 2))\n  (is (= (candidate \"stds\") 1))\n  (is (= (candidate \"\") 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_17_square_perimeter", "language": "clj", "prompt": "(defn square_perimeter\n  \"\tWrite a function that returns the perimeter of a square given its side length as input.\"\n  [a]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_perimeter)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 40))\n  (is (= (candidate 5) 20))\n  (is (= (candidate 4) 16))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_18_remove_dirty_chars", "language": "clj", "prompt": "(defn remove_dirty_chars\n  \"\tWrite a function to remove characters from the first string which are present in the second string.\"\n  [string second_string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_dirty_chars)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"probasscurve\" \"pros\") \"bacuve\"))\n  (is (= (candidate \"digitalindia\" \"talent\") \"digiidi\"))\n  (is (= (candidate \"exoticmiles\" \"toxic\") \"emles\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_19_test_duplicate", "language": "clj", "prompt": "(defn test_duplicate\n  \"\tWrite a function to find whether a given array of integers contains any duplicate element.\"\n  [arraynums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate test_duplicate)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) false))\n  (is (= (candidate [1 2 3 4 4]) true))\n  (is (= (candidate [1 1 2 2 3 3 4 4 5]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_20_is_woodall", "language": "clj", "prompt": "(defn is_woodall\n  \"\tWrite a function to check if the given number is woodball or not.\"\n  [x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_woodall)\n\n(deftest test-humaneval\n\n  (is (= (candidate 383) true))\n  (is (= (candidate 254) false))\n  (is (= (candidate 200) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_222_check_type", "language": "clj", "prompt": "(defn check_type\n  \"\tWrite a function to check if all the elements in tuple have same data type or not.\"\n  [test_tuple]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_type)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 7 3 5 6]) true))\n  (is (= (candidate [1 2 \"4\"]) false))\n  (is (= (candidate [3 2 1 4 5]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_223_is_majority", "language": "clj", "prompt": "(defn is_majority\n  \"\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\"\n  [arr n x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_majority)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 3 3 3 10] 7 3) true))\n  (is (= (candidate [1 1 2 4 4 4 6 6] 8 4) false))\n  (is (= (candidate [1 1 1 2 2] 5 1) true))\n  (is (= (candidate [1 1 2 2] 5 1) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_224_count_Set_Bits", "language": "clj", "prompt": "(defn count_Set_Bits\n  \"\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Set_Bits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 1))\n  (is (= (candidate 4) 1))\n  (is (= (candidate 6) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_226_odd_values_string", "language": "clj", "prompt": "(defn odd_values_string\n  \"\tWrite a python function to remove the characters which have odd index values of a given string.\"\n  [str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_values_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcdef\") \"ace\"))\n  (is (= (candidate \"python\") \"pto\"))\n  (is (= (candidate \"data\") \"dt\"))\n  (is (= (candidate \"lambs\") \"lms\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_227_min_of_three", "language": "clj", "prompt": "(defn min_of_three\n  \"\tWrite a function to find minimum of three numbers.\"\n  [a b c]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_of_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20 0) 0))\n  (is (= (candidate 19 15 18) 15))\n  (is (= (candidate -10 -20 -30) -30))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "clj", "prompt": "(defn all_Bits_Set_In_The_Given_Range\n  \"\tWrite a python function to check whether all the bits are unset in the given range or not.\"\n  [n l r]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_Bits_Set_In_The_Given_Range)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4 1 2) true))\n  (is (= (candidate 17 2 4) true))\n  (is (= (candidate 39 4 6) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_229_re_arrange_array", "language": "clj", "prompt": "(defn re_arrange_array\n  \"\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\n  [arr n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate re_arrange_array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-1 2 -3 4 5 6 -7 8 9] 9) [-1 -3 -7 4 5 6 2 8 9]))\n  (is (= (candidate [12 -14 -26 13 15] 5) [-14 -26 12 13 15]))\n  (is (= (candidate [10 24 36 -42 -39 -78 85] 7) [-42 -39 -78 10 24 36 85]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_230_replace_blank", "language": "clj", "prompt": "(defn replace_blank\n  \"\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\"\n  [str1 char]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_blank)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"hello people\" \"@\") \"hello@people\"))\n  (is (= (candidate \"python program language\" \"$\") \"python$program$language\"))\n  (is (= (candidate \"blank space\" \"-\") \"blank-space\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_234_volume_cube", "language": "clj", "prompt": "(defn volume_cube\n  \"\tWrite a function to find the volume of a cube given its side length.\"\n  [l]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate volume_cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 27))\n  (is (= (candidate 2) 8))\n  (is (= (candidate 5) 125))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_237_check_occurences", "language": "clj", "prompt": "(defn check_occurences\n  \"\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_occurences)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[3 1] [1 3] [2 5] [5 2] [6 3]]) {[1 3] 2 [2 5] 2 [3 6] 1}))\n  (is (= (candidate [[4 2] [2 4] [3 6] [6 3] [7 4]]) {[2 4] 2 [3 6] 2 [4 7] 1}))\n  (is (= (candidate [[13 2] [11 23] [12 25] [25 12] [16 23]]) {[2 13] 1 [11 23] 1 [12 25] 2 [16 23] 1}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_238_number_of_substrings", "language": "clj", "prompt": "(defn number_of_substrings\n  \"\tWrite a python function to count the number of non-empty substrings of a given string.\"\n  [str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate number_of_substrings)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abc\") 6))\n  (is (= (candidate \"abcd\") 10))\n  (is (= (candidate \"abcde\") 15))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "clj", "prompt": "(defn get_total_number_of_sequences\n  \"\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\"\n  [m n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_total_number_of_sequences)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 4) 4))\n  (is (= (candidate 5 2) 6))\n  (is (= (candidate 16 3) 84))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_240_replace_list", "language": "clj", "prompt": "(defn replace_list\n  \"\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\"\n  [list1 list2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 9 10] [2 4 6 8]) [1 3 5 7 9 2 4 6 8]))\n  (is (= (candidate [1 2 3 4 5] [5 6 7 8]) [1 2 3 4 5 6 7 8]))\n  (is (= (candidate [\"red\" \"blue\" \"green\"] [\"yellow\"]) [\"red\" \"blue\" \"yellow\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_242_count_charac", "language": "clj", "prompt": "(defn count_charac\n  \"\tWrite a function to count the total number of characters in a string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_charac)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python programming\") 18))\n  (is (= (candidate \"language\") 8))\n  (is (= (candidate \"words\") 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_244_next_Perfect_Square", "language": "clj", "prompt": "(defn next_Perfect_Square\n  \"\tWrite a python function to find the next perfect square greater than a given number.\"\n  [N]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate next_Perfect_Square)\n\n(deftest test-humaneval\n\n  (is (= (candidate 35) 36))\n  (is (= (candidate 6) 9))\n  (is (= (candidate 9) 16))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_245_max_sum", "language": "clj", "prompt": "(defn max_sum\n  \"\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 15 51 45 33 100 12 18 9]) 194))\n  (is (= (candidate [80 60 30 40 20 10]) 210))\n  (is (= (candidate [2 3 14 16 21 23 29 30]) 138))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_247_lps", "language": "clj", "prompt": "(defn lps\n  \"\tWrite a function to find the length of the longest palindromic subsequence in the given string.\"\n  [str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lps)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"TENS FOR TENS\") 5))\n  (is (= (candidate \"CARDIO FOR CARDS\") 7))\n  (is (= (candidate \"PART OF THE JOURNEY IS PART\") 9))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_249_intersection_array", "language": "clj", "prompt": "(defn intersection_array\n  \"\tWrite a function to find the intersection of two arrays.\"\n  [array_nums1 array_nums2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate intersection_array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 5 7 8 9 10] [1 2 4 8 9]) [1 2 8 9]))\n  (is (= (candidate [1 2 3 5 7 8 9 10] [3 5 7 9]) [3 5 7 9]))\n  (is (= (candidate [1 2 3 5 7 8 9 10] [10 20 30 40]) [10]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_250_count_X", "language": "clj", "prompt": "(defn count_X\n  \"\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\"\n  [tup x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_X)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 8 5 2 10 15 10 8 5 8 8 2] 4) 0))\n  (is (= (candidate [10 8 5 2 10 15 10 8 5 8 8 2] 10) 3))\n  (is (= (candidate [10 8 5 2 10 15 10 8 5 8 8 2] 8) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_251_insert_element", "language": "clj", "prompt": "(defn insert_element\n  \"\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\"\n  [list element]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate insert_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Red\" \"Green\" \"Black\"] \"c\") [\"c\" \"Red\" \"c\" \"Green\" \"c\" \"Black\"]))\n  (is (= (candidate [\"python\" \"java\"] \"program\") [\"program\" \"python\" \"program\" \"java\"]))\n  (is (= (candidate [\"happy\" \"sad\"] \"laugh\") [\"laugh\" \"happy\" \"laugh\" \"sad\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_252_convert", "language": "clj", "prompt": "(defn convert\n  \"\tWrite a python function to convert complex numbers to polar coordinates.\"\n  [numbers]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate convert)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) [1.0 0.0]))\n  (is (= (candidate 4) [4.0 0.0]))\n  (is (= (candidate 5) [5.0 0.0]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_253_count_integer", "language": "clj", "prompt": "(defn count_integer\n  \"\tWrite a python function that returns the number of integer elements in a given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_integer)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 \"abc\" 1.2]) 2))\n  (is (= (candidate [1 2 3]) 3))\n  (is (= (candidate [1 1.2 4 5.1]) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_255_combinations_colors", "language": "clj", "prompt": "(defn combinations_colors\n  \"\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\"\n  [l n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate combinations_colors)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\"] 1) [[\"Red\"] [\"Green\"] [\"Blue\"]]))\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\"] 2) [[\"Red\" \"Red\"] [\"Red\" \"Green\"] [\"Red\" \"Blue\"] [\"Green\" \"Green\"] [\"Green\" \"Blue\"] [\"Blue\" \"Blue\"]]))\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\"] 3) [[\"Red\" \"Red\" \"Red\"] [\"Red\" \"Red\" \"Green\"] [\"Red\" \"Red\" \"Blue\"] [\"Red\" \"Green\" \"Green\"] [\"Red\" \"Green\" \"Blue\"] [\"Red\" \"Blue\" \"Blue\"] [\"Green\" \"Green\" \"Green\"] [\"Green\" \"Green\" \"Blue\"] [\"Green\" \"Blue\" \"Blue\"] [\"Blue\" \"Blue\" \"Blue\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_256_count_Primes_nums", "language": "clj", "prompt": "(defn count_Primes_nums\n  \"\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Primes_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 2))\n  (is (= (candidate 10) 4))\n  (is (= (candidate 100) 25))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_257_swap_numbers", "language": "clj", "prompt": "(defn swap_numbers\n  \"\tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate swap_numbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20) [20 10]))\n  (is (= (candidate 15 17) [17 15]))\n  (is (= (candidate 100 200) [200 100]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_259_maximize_elements", "language": "clj", "prompt": "(defn maximize_elements\n  \"\tWrite a function to maximize the given two lists.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maximize_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [4 5] [2 9] [1 10]] [[6 7] [3 9] [1 1] [7 3]]) [[6 7] [4 9] [2 9] [7 10]]))\n  (is (= (candidate [[2 4] [5 6] [3 10] [2 11]] [[7 8] [4 10] [2 2] [8 4]]) [[7 8] [5 10] [3 10] [8 11]]))\n  (is (= (candidate [[3 5] [6 7] [4 11] [3 12]] [[8 9] [5 11] [3 3] [9 5]]) [[8 9] [6 11] [4 11] [9 12]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_260_newman_prime", "language": "clj", "prompt": "(defn newman_prime\n  \"\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate newman_prime)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 7))\n  (is (= (candidate 4) 17))\n  (is (= (candidate 5) 41))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_261_division_elements", "language": "clj", "prompt": "(defn division_elements\n  \"\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate division_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 6 9] [5 2 3 3]) [2 2 2 3]))\n  (is (= (candidate [12 6 8 16] [6 3 4 4]) [2 2 2 4]))\n  (is (= (candidate [20 14 36 18] [5 7 6 9]) [4 2 6 2]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_262_split_two_parts", "language": "clj", "prompt": "(defn split_two_parts\n  \"\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\"\n  [list1 L]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split_two_parts)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 3 4 4 5 1] 3) [[1 1 2] [3 4 4 5 1]]))\n  (is (= (candidate [\"a\" \"b\" \"c\" \"d\"] 2) [[\"a\" \"b\"] [\"c\" \"d\"]]))\n  (is (= (candidate [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\"] 4) [[\"p\" \"y\" \"t\" \"h\"] [\"o\" \"n\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_264_dog_age", "language": "clj", "prompt": "(defn dog_age\n  \"\tWrite a function to calculate a dog's age in dog's years.\"\n  [h_age]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate dog_age)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12) 61))\n  (is (= (candidate 15) 73))\n  (is (= (candidate 24) 109))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_265_list_split", "language": "clj", "prompt": "(defn list_split\n  \"\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\"\n  [S step]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate list_split)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\"] 3) [[\"a\" \"d\" \"g\" \"j\" \"m\"] [\"b\" \"e\" \"h\" \"k\" \"n\"] [\"c\" \"f\" \"i\" \"l\"]]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10 11 12 13 14] 3) [[1 4 7 10 13] [2 5 8 11 14] [3 6 9 12]]))\n  (is (= (candidate [\"python\" \"java\" \"C\" \"C++\" \"DBMS\" \"SQL\"] 2) [[\"python\" \"C\" \"DBMS\"] [\"java\" \"C++\" \"SQL\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_266_lateralsurface_cube", "language": "clj", "prompt": "(defn lateralsurface_cube\n  \"\tWrite a function to find the lateral surface area of a cube given its side length.\"\n  [l]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lateralsurface_cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 100))\n  (is (= (candidate 9) 324))\n  (is (= (candidate 10) 400))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_267_square_Sum", "language": "clj", "prompt": "(defn square_Sum\n  \"\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 10))\n  (is (= (candidate 3) 35))\n  (is (= (candidate 4) 84))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_268_find_star_num", "language": "clj", "prompt": "(defn find_star_num\n  \"\tWrite a function to find the n'th star number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_star_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 37))\n  (is (= (candidate 4) 73))\n  (is (= (candidate 5) 121))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_269_ascii_value", "language": "clj", "prompt": "(defn ascii_value\n  \"\tWrite a function to find the ascii value of a character.\"\n  [k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate ascii_value)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"A\") 65))\n  (is (= (candidate \"R\") 82))\n  (is (= (candidate \"S\") 83))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "clj", "prompt": "(defn sum_even_and_even_index\n  \"\tWrite a python function to find the sum of even numbers at even positions of a list.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_even_and_even_index)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 12 1 18 8]) 30))\n  (is (= (candidate [3 20 17 9 2 10 18 13 6 18]) 26))\n  (is (= (candidate [5 6 12 1]) 12))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_271_even_Power_Sum", "language": "clj", "prompt": "(defn even_Power_Sum\n  \"\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_Power_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 1056))\n  (is (= (candidate 3) 8832))\n  (is (= (candidate 1) 32))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_272_rear_extract", "language": "clj", "prompt": "(defn rear_extract\n  \"\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rear_extract)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 \"Rash\" 21] [2 \"Varsha\" 20] [3 \"Kil\" 19]]) [21 20 19]))\n  (is (= (candidate [[1 \"Sai\" 36] [2 \"Ayesha\" 25] [3 \"Salman\" 45]]) [36 25 45]))\n  (is (= (candidate [[1 \"Sudeep\" 14] [2 \"Vandana\" 36] [3 \"Dawood\" 56]]) [14 36 56]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_273_substract_elements", "language": "clj", "prompt": "(defn substract_elements\n  \"\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate substract_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5] [2 5 18]) [8 -1 -13]))\n  (is (= (candidate [11 2 3] [24 45 16]) [-13 -43 -13]))\n  (is (= (candidate [7 18 9] [10 11 12]) [-3 7 -3]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "clj", "prompt": "(defn even_binomial_Coeff_Sum\n  \"\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_binomial_Coeff_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4) 8))\n  (is (= (candidate 6) 32))\n  (is (= (candidate 2) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_277_dict_filter", "language": "clj", "prompt": "(defn dict_filter\n  \"\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\"\n  [dict n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate dict_filter)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Kierra Gentry\" 165 \"Pierre Cox\" 190} 170) {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Pierre Cox\" 190}))\n  (is (= (candidate {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Kierra Gentry\" 165 \"Pierre Cox\" 190} 180) {\"Alden Cantrell\" 180 \"Pierre Cox\" 190}))\n  (is (= (candidate {\"Cierra Vega\" 175 \"Alden Cantrell\" 180 \"Kierra Gentry\" 165 \"Pierre Cox\" 190} 190) {\"Pierre Cox\" 190}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_278_count_first_elements", "language": "clj", "prompt": "(defn count_first_elements\n  \"\tWrite a function to find the number of elements that occurs before the list element in the given tuple.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_first_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 [4 6] 10]) 3))\n  (is (= (candidate [2 9 [5 7] 11]) 2))\n  (is (= (candidate [11 15 5 8 [2 3] 8]) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_279_is_num_decagonal", "language": "clj", "prompt": "(defn is_num_decagonal\n  \"\tWrite a function to find the nth decagonal number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_num_decagonal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 27))\n  (is (= (candidate 7) 175))\n  (is (= (candidate 10) 370))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_280_sequential_search", "language": "clj", "prompt": "(defn sequential_search\n  \"\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\"\n  [dlist item]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sequential_search)\n\n(deftest test-humaneval\n\n  (is (= (candidate [11 23 58 31 56 77 43 12 65 19] 31) [true 3]))\n  (is (= (candidate [12 32 45 62 35 47 44 61] 61) [true 7]))\n  (is (= (candidate [9 10 17 19 22 39 48 56] 48) [true 6]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_281_all_unique", "language": "clj", "prompt": "(defn all_unique\n  \"\tWrite a python function to check if the elements of a given list are unique or not.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_unique)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) true))\n  (is (= (candidate [1 2 1 2]) false))\n  (is (= (candidate [1 2 3 4 5]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_282_sub_list", "language": "clj", "prompt": "(defn sub_list\n  \"\tWrite a function to subtract two lists element-wise.\"\n  [nums1 nums2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sub_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] [4 5 6]) [-3 -3 -3]))\n  (is (= (candidate [1 2] [3 4]) [-2 -2]))\n  (is (= (candidate [90 120] [50 70]) [40 50]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_283_validate", "language": "clj", "prompt": "(defn validate\n  \"\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate validate)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1234) true))\n  (is (= (candidate 51241) false))\n  (is (= (candidate 321) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_284_check_element", "language": "clj", "prompt": "(defn check_element\n  \"\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\"\n  [list element]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"green\" \"orange\" \"black\" \"white\"] \"blue\") false))\n  (is (= (candidate [1 2 3 4] 7) false))\n  (is (= (candidate [\"green\" \"green\" \"green\" \"green\"] \"green\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_285_text_match_two_three", "language": "clj", "prompt": "(defn text_match_two_three\n  \"\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_two_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abbbba\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "clj", "prompt": "(defn max_sub_array_sum_repeated\n  \"\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\"\n  [a n k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sub_array_sum_repeated)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 -30 -1] 4 3) 30))\n  (is (= (candidate [-1 10 20] 3 2) 59))\n  (is (= (candidate [-1 -2 -3] 3 3) -1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_287_square_Sum", "language": "clj", "prompt": "(defn square_Sum\n  \"\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 20))\n  (is (= (candidate 3) 56))\n  (is (= (candidate 4) 120))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_290_max_length", "language": "clj", "prompt": "(defn max_length\n  \"\tWrite a function to find the list of maximum length in a list of lists.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[0] [1 3] [5 7] [9 11] [13 15 17]]) [3 [13 15 17]]))\n  (is (= (candidate [[1] [5 7] [10 12 14 15]]) [4 [10 12 14 15]]))\n  (is (= (candidate [[5] [15 20 25]]) [3 [15 20 25]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_291_count_no_of_ways", "language": "clj", "prompt": "(defn count_no_of_ways\n  \"\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\"\n  [n k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_no_of_ways)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 4) 16))\n  (is (= (candidate 3 2) 6))\n  (is (= (candidate 4 4) 228))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_292_find", "language": "clj", "prompt": "(defn find\n  \"\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\"\n  [n m]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 3) 3))\n  (is (= (candidate 4 2) 2))\n  (is (= (candidate 20 5) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_293_otherside_rightangle", "language": "clj", "prompt": "(defn otherside_rightangle\n  \"\tWrite a function to find the third side of a right angled triangle.\"\n  [w h]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate otherside_rightangle)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7 8) 10.63014581273465))\n  (is (= (candidate 3 4) 5))\n  (is (= (candidate 7 15) 16.55294535724685))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_294_max_val", "language": "clj", "prompt": "(defn max_val\n  \"\tWrite a function to find the maximum value in a given heterogeneous list.\"\n  [listval]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_val)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python\" 3 2 4 5 \"version\"]) 5))\n  (is (= (candidate [\"Python\" 15 20 25]) 25))\n  (is (= (candidate [\"Python\" 30 20 40 50 \"version\"]) 50))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_295_sum_div", "language": "clj", "prompt": "(defn sum_div\n  \"\tWrite a function to return the sum of all divisors of a number.\"\n  [number]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_div)\n\n(deftest test-humaneval\n\n  (is (= (candidate 8) 7))\n  (is (= (candidate 12) 16))\n  (is (= (candidate 7) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_296_get_Inv_Count", "language": "clj", "prompt": "(defn get_Inv_Count\n  \"\tWrite a python function to count inversions in an array.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_Inv_Count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 20 6 4 5]) 5))\n  (is (= (candidate [1 2 1]) 1))\n  (is (= (candidate [1 2 5 6 1]) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_297_flatten_list", "language": "clj", "prompt": "(defn flatten_list\n  \"\tWrite a function to flatten a given nested list structure.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate flatten_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 10 [20 30] 40 50 [60 70 80] [90 100 110 120]]) [0 10 20 30 40 50 60 70 80 90 100 110 120]))\n  (is (= (candidate [[10 20] [40] [30 56 25] [10 20] [33] [40]]) [10 20 40 30 56 25 10 20 33 40]))\n  (is (= (candidate [[1 2 3] [4 5 6] [10 11 12] [7 8 9]]) [1 2 3 4 5 6 10 11 12 7 8 9]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_299_max_aggregate", "language": "clj", "prompt": "(defn max_aggregate\n  \"\tWrite a function to calculate the maximum aggregate from the list of tuples.\"\n  [stdata]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_aggregate)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Juan Whelan\" 90] [\"Sabah Colley\" 88] [\"Peter Nichols\" 7] [\"Juan Whelan\" 122] [\"Sabah Colley\" 84]]) [\"Juan Whelan\" 212]))\n  (is (= (candidate [[\"Juan Whelan\" 50] [\"Sabah Colley\" 48] [\"Peter Nichols\" 37] [\"Juan Whelan\" 22] [\"Sabah Colley\" 14]]) [\"Juan Whelan\" 72]))\n  (is (= (candidate [[\"Juan Whelan\" 10] [\"Sabah Colley\" 20] [\"Peter Nichols\" 30] [\"Juan Whelan\" 40] [\"Sabah Colley\" 50]]) [\"Sabah Colley\" 70]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_304_find_Element", "language": "clj", "prompt": "(defn find_Element\n  \"\tWrite a python function to find element at a given index after number of rotations.\"\n  [arr ranges rotations index]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] [[0 2] [0 3]] 2 1) 3))\n  (is (= (candidate [1 2 3 4] [[0 1] [0 2]] 1 2) 3))\n  (is (= (candidate [1 2 3 4 5 6] [[0 1] [0 2]] 1 1) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_305_start_withp", "language": "clj", "prompt": "(defn start_withp\n  \"\tWrite a function to return two words from a list of words starting with letter 'p'.\"\n  [words]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate start_withp)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python PHP\" \"Java JavaScript\" \"c c++\"]) [\"Python\" \"PHP\"]))\n  (is (= (candidate [\"Python Programming\" \"Java Programming\"]) [\"Python\" \"Programming\"]))\n  (is (= (candidate [\"Pqrst Pqr\" \"qrstuv\"]) [\"Pqrst\" \"Pqr\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "clj", "prompt": "(defn max_sum_increasing_subseq\n  \"\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\"\n  [a n index k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sum_increasing_subseq)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 101 2 3 100 4 5] 7 4 6) 11))\n  (is (= (candidate [1 101 2 3 100 4 5] 7 2 5) 7))\n  (is (= (candidate [11 15 19 21 26 28 31] 7 2 4) 71))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_308_large_product", "language": "clj", "prompt": "(defn large_product\n  \"\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\"\n  [nums1 nums2 N]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate large_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6] [3 6 8 9 10 6] 3) [60 54 50]))\n  (is (= (candidate [1 2 3 4 5 6] [3 6 8 9 10 6] 4) [60 54 50 48]))\n  (is (= (candidate [1 2 3 4 5 6] [3 6 8 9 10 6] 5) [60 54 50 48 45]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_309_maximum", "language": "clj", "prompt": "(defn maximum\n  \"\tWrite a python function to find the maximum of two numbers.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maximum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 10) 10))\n  (is (= (candidate -1 -2) -1))\n  (is (= (candidate 9 7) 9))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_310_string_to_tuple", "language": "clj", "prompt": "(defn string_to_tuple\n  \"\tWrite a function to convert a given string to a list of characters.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate string_to_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python 3.0\") [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\" \"3\" \".\" \"0\"]))\n  (is (= (candidate \"item1\") [\"i\" \"t\" \"e\" \"m\" \"1\"]))\n  (is (= (candidate \"15.10\") [\"1\" \"5\" \".\" \"1\" \"0\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_388_highest_Power_of_2", "language": "clj", "prompt": "(defn highest_Power_of_2\n  \"\tWrite a python function to find the highest power of 2 that is less than or equal to n.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate highest_Power_of_2)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 8))\n  (is (= (candidate 19) 16))\n  (is (= (candidate 32) 32))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_389_find_lucas", "language": "clj", "prompt": "(defn find_lucas\n  \"\tWrite a function to find the n'th lucas number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_lucas)\n\n(deftest test-humaneval\n\n  (is (= (candidate 9) 76))\n  (is (= (candidate 4) 7))\n  (is (= (candidate 3) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_390_add_string", "language": "clj", "prompt": "(defn add_string\n  \"\tWrite a function to apply a given format string to all of the elements in a list.\"\n  [list_ string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4] \"temp{0}\") [\"temp1\" \"temp2\" \"temp3\" \"temp4\"]))\n  (is (= (candidate [\"a\" \"b\" \"c\" \"d\"] \"python{0}\") [\"pythona\" \"pythonb\" \"pythonc\" \"pythond\"]))\n  (is (= (candidate [5 6 7 8] \"string{0}\") [\"string5\" \"string6\" \"string7\" \"string8\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_391_convert_list_dictionary", "language": "clj", "prompt": "(defn convert_list_dictionary\n  \"\tWrite a function to convert more than one list to nested dictionary.\"\n  [l1 l2 l3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate convert_list_dictionary)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"S001\" \"S002\" \"S003\" \"S004\"] [\"Adina Park\" \"Leyton Marsh\" \"Duncan Boyle\" \"Saim Richards\"] [85 98 89 92]) [{\"S001\" {\"Adina Park\" 85}} {\"S002\" {\"Leyton Marsh\" 98}} {\"S003\" {\"Duncan Boyle\" 89}} {\"S004\" {\"Saim Richards\" 92}}]))\n  (is (= (candidate [\"abc\" \"def\" \"ghi\" \"jkl\"] [\"python\" \"program\" \"language\" \"programs\"] [100 200 300 400]) [{\"abc\" {\"python\" 100}} {\"def\" {\"program\" 200}} {\"ghi\" {\"language\" 300}} {\"jkl\" {\"programs\" 400}}]))\n  (is (= (candidate [\"A1\" \"A2\" \"A3\" \"A4\"] [\"java\" \"C\" \"C++\" \"DBMS\"] [10 20 30 40]) [{\"A1\" {\"java\" 10}} {\"A2\" {\"C\" 20}} {\"A3\" {\"C++\" 30}} {\"A4\" {\"DBMS\" 40}}]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_392_get_max_sum", "language": "clj", "prompt": "(defn get_max_sum\n  \"\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_max_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 60) 106))\n  (is (= (candidate 10) 12))\n  (is (= (candidate 2) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_393_max_length_list", "language": "clj", "prompt": "(defn max_length_list\n  \"\tWrite a function to find the list with maximum length.\"\n  [input_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_length_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[0] [1 3] [5 7] [9 11] [13 15 17]]) [3 [13 15 17]]))\n  (is (= (candidate [[1 2 3 4 5] [1 2 3 4] [1 2 3] [1 2] [1]]) [5 [1 2 3 4 5]]))\n  (is (= (candidate [[3 4 5] [6 7 8 9] [10 11 12]]) [4 [6 7 8 9]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_394_check_distinct", "language": "clj", "prompt": "(defn check_distinct\n  \"\tWrite a function to check if given list contains no duplicates.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_distinct)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 4 5 6 1 4]) false))\n  (is (= (candidate [1 4 5 6]) true))\n  (is (= (candidate [2 3 4 5 6]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_395_first_non_repeating_character", "language": "clj", "prompt": "(defn first_non_repeating_character\n  \"\tWrite a python function to find the first non-repeated character in a given string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_non_repeating_character)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcabc\") nil))\n  (is (= (candidate \"abc\") \"a\"))\n  (is (= (candidate \"ababc\") \"c\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_396_check_char", "language": "clj", "prompt": "(defn check_char\n  \"\tWrite a function to check whether the given string starts and ends with the same character or not.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abba\") \"Valid\"))\n  (is (= (candidate \"a\") \"Valid\"))\n  (is (= (candidate \"abcd\") \"Invalid\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_397_median_numbers", "language": "clj", "prompt": "(defn median_numbers\n  \"\tWrite a function to find the median of three numbers.\"\n  [a b c]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate median_numbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate 25 55 65) 55.0))\n  (is (= (candidate 20 10 30) 20.0))\n  (is (= (candidate 15 45 75) 45.0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_398_sum_of_digits", "language": "clj", "prompt": "(defn sum_of_digits\n  \"\tWrite a function to compute the sum of digits of each number of a given list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_of_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 2 56]) 14))\n  (is (= (candidate [[10 20 4 5 \"b\" 70 \"a\"]]) 19))\n  (is (= (candidate [10 20 -4 5 -70]) 19))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_399_bitwise_xor", "language": "clj", "prompt": "(defn bitwise_xor\n  \"\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bitwise_xor)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 6 9] [5 2 3 3]) [15 6 5 10]))\n  (is (= (candidate [11 5 7 10] [6 3 4 4]) [13 6 3 14]))\n  (is (= (candidate [12 6 8 11] [7 4 5 6]) [11 2 13 13]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_3_is_not_prime", "language": "clj", "prompt": "(defn is_not_prime\n  \"\tWrite a python function to identify non-prime numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_not_prime)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) false))\n  (is (= (candidate 10) true))\n  (is (= (candidate 35) true))\n  (is (= (candidate 37) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_400_extract_freq", "language": "clj", "prompt": "(defn extract_freq\n  \"\tWrite a function to extract the number of unique tuples in the given list.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_freq)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[3 4] [1 2] [4 3] [5 6]]) 3))\n  (is (= (candidate [[4 15] [2 3] [5 4] [6 7]]) 4))\n  (is (= (candidate [[5 16] [2 3] [6 5] [6 9]]) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_401_add_nested_tuples", "language": "clj", "prompt": "(defn add_nested_tuples\n  \"\tWrite a function to perform index wise addition of list elements in the given two nested lists.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_nested_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [4 5] [2 9] [1 10]] [[6 7] [3 9] [1 1] [7 3]]) [[7 10] [7 14] [3 10] [8 13]]))\n  (is (= (candidate [[2 4] [5 6] [3 10] [2 11]] [[7 8] [4 10] [2 2] [8 4]]) [[9 12] [9 16] [5 12] [10 15]]))\n  (is (= (candidate [[3 5] [6 7] [4 11] [3 12]] [[8 9] [5 11] [3 3] [9 5]]) [[11 14] [11 18] [7 14] [12 17]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_404_minimum", "language": "clj", "prompt": "(defn minimum\n  \"\tWrite a python function to find the minimum of two numbers.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate minimum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 2) 1))\n  (is (= (candidate -5 -4) -5))\n  (is (= (candidate 0 0) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_405_check_tuplex", "language": "clj", "prompt": "(defn check_tuplex\n  \"\tWrite a function to check whether an element exists within a tuple.\"\n  [tuplex tuple1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_tuplex)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\"] \"r\") true))\n  (is (= (candidate [\"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\"] \"5\") false))\n  (is (= (candidate [\"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\"] 3) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_406_find_Parity", "language": "clj", "prompt": "(defn find_Parity\n  \"\tWrite a python function to find whether the parity of a given number is odd.\"\n  [x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Parity)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12) false))\n  (is (= (candidate 7) true))\n  (is (= (candidate 10) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_407_rearrange_bigger", "language": "clj", "prompt": "(defn rearrange_bigger\n  \"\tWrite a function to create the next bigger number by rearranging the digits of a given number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rearrange_bigger)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12) 21))\n  (is (= (candidate 10) false))\n  (is (= (candidate 102) 120))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_408_k_smallest_pairs", "language": "clj", "prompt": "(defn k_smallest_pairs\n  \"\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\"\n  [nums1 nums2 k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate k_smallest_pairs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 7] [2 4 6] 2) [[1 2] [1 4]]))\n  (is (= (candidate [1 3 7] [2 4 6] 1) [[1 2]]))\n  (is (= (candidate [1 3 7] [2 4 6] 7) [[1 2] [1 4] [3 2] [1 6] [3 4] [3 6] [7 2]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_409_min_product_tuple", "language": "clj", "prompt": "(defn min_product_tuple\n  \"\tWrite a function to find the minimum product from the pairs of tuples within a given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_product_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[2 7] [2 6] [1 8] [4 9]]) 8))\n  (is (= (candidate [[10 20] [15 2] [5 10]]) 30))\n  (is (= (candidate [[11 44] [10 15] [20 5] [12 9]]) 100))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_410_min_val", "language": "clj", "prompt": "(defn min_val\n  \"\tWrite a function to find the minimum value in a given heterogeneous list.\"\n  [listval]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_val)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python\" 3 2 4 5 \"version\"]) 2))\n  (is (= (candidate [\"Python\" 15 20 25]) 15))\n  (is (= (candidate [\"Python\" 30 20 40 50 \"version\"]) 20))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_411_snake_to_camel", "language": "clj", "prompt": "(defn snake_to_camel\n  \"\tWrite a function to convert the given snake case string to camel case string.\"\n  [word]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate snake_to_camel)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"android_tv\") \"AndroidTv\"))\n  (is (= (candidate \"google_pixel\") \"GooglePixel\"))\n  (is (= (candidate \"apple_watch\") \"AppleWatch\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_412_remove_odd", "language": "clj", "prompt": "(defn remove_odd\n  \"\tWrite a python function to remove odd numbers from a given list.\"\n  [l]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) [2]))\n  (is (= (candidate [2 4 6]) [2 4 6]))\n  (is (= (candidate [10 20 3]) [10 20]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_413_extract_nth_element", "language": "clj", "prompt": "(defn extract_nth_element\n  \"\tWrite a function to extract the nth element from a given list of tuples.\"\n  [list1 n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_nth_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Greyson Fulton\" 98 99] [\"Brady Kent\" 97 96] [\"Wyatt Knott\" 91 94] [\"Beau Turnbull\" 94 98]] 0) [\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"]))\n  (is (= (candidate [[\"Greyson Fulton\" 98 99] [\"Brady Kent\" 97 96] [\"Wyatt Knott\" 91 94] [\"Beau Turnbull\" 94 98]] 2) [99 96 94 98]))\n  (is (= (candidate [[\"Greyson Fulton\" 98 99] [\"Brady Kent\" 97 96] [\"Wyatt Knott\" 91 94] [\"Beau Turnbull\" 94 98]] 1) [98 97 91 94]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_414_overlapping", "language": "clj", "prompt": "(defn overlapping\n  \"\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\"\n  [list1 list2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate overlapping)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] [6 7 8 9]) false))\n  (is (= (candidate [1 2 3] [4 5 6]) false))\n  (is (= (candidate [1 4 5] [1 4 5]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_415_max_Product", "language": "clj", "prompt": "(defn max_Product\n  \"\tWrite a python function to find a pair with highest product from a given array of integers.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_Product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 7 0 8 4]) [7 8]))\n  (is (= (candidate [0 -1 -2 -4 5 0 -6]) [-4 -6]))\n  (is (= (candidate [1 2 3]) [2 3]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_417_group_tuples", "language": "clj", "prompt": "(defn group_tuples\n  \"\tWrite a function to find common first element in given list of lists.\"\n  [Input]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate group_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"x\" \"y\"] [\"x\" \"z\"] [\"w\" \"t\"]]) [[\"x\" \"y\" \"z\"] [\"w\" \"t\"]]))\n  (is (= (candidate [[\"a\" \"b\"] [\"a\" \"c\"] [\"d\" \"e\"]]) [[\"a\" \"b\" \"c\"] [\"d\" \"e\"]]))\n  (is (= (candidate [[\"f\" \"g\"] [\"f\" \"g\"] [\"h\" \"i\"]]) [[\"f\" \"g\" \"g\"] [\"h\" \"i\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_418_Find_Max", "language": "clj", "prompt": "(defn Find_Max\n  \"\tWrite a python function to find the element of a list having maximum length.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Max)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"A\"] [\"A\" \"B\"] [\"A\" \"B\" \"C\"]]) [\"A\" \"B\" \"C\"]))\n  (is (= (candidate [[1] [1 2] [1 2 3]]) [1 2 3]))\n  (is (= (candidate [[1 1] [1 2 3] [1 5 6 1]]) [1 5 6 1]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_419_round_and_sum", "language": "clj", "prompt": "(defn round_and_sum\n  \"\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate round_and_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5]) 243))\n  (is (= (candidate [5 2 9 24.3 29]) 345))\n  (is (= (candidate [25.0 56.7 89.2]) 513))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_420_cube_Sum", "language": "clj", "prompt": "(defn cube_Sum\n  \"\tWrite a python function to find the cube sum of first n even natural numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cube_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 72))\n  (is (= (candidate 3) 288))\n  (is (= (candidate 4) 800))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_421_concatenate_tuple", "language": "clj", "prompt": "(defn concatenate_tuple\n  \"\tWrite a function to concatenate each element of tuple by the delimiter.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate concatenate_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"ID\" \"is\" 4 \"UTS\"]) \"ID-is-4-UTS\"))\n  (is (= (candidate [\"QWE\" \"is\" 4 \"RTY\"]) \"QWE-is-4-RTY\"))\n  (is (= (candidate [\"ZEN\" \"is\" 4 \"OP\"]) \"ZEN-is-4-OP\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "clj", "prompt": "(defn find_Average_Of_Cube\n  \"\tWrite a python function to find the average of cubes of first n natural numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Average_Of_Cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 4.5))\n  (is (= (candidate 3) 12))\n  (is (= (candidate 1) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_424_extract_rear", "language": "clj", "prompt": "(defn extract_rear\n  \"\tWrite a function to extract only the rear index element of each string in the given tuple.\"\n  [test_tuple]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_rear)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Mers\" \"for\" \"Vers\"]) [\"s\" \"r\" \"s\"]))\n  (is (= (candidate [\"Avenge\" \"for\" \"People\"]) [\"e\" \"r\" \"e\"]))\n  (is (= (candidate [\"Gotta\" \"get\" \"go\"]) [\"a\" \"t\" \"o\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_425_count_element_in_list", "language": "clj", "prompt": "(defn count_element_in_list\n  \"\tWrite a function to count the number of sublists containing a particular element.\"\n  [list1 x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_element_in_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [5 7] [1 11] [1 15 7]] 1) 3))\n  (is (= (candidate [[\"A\" \"B\"] [\"A\" \"C\"] [\"A\" \"D\" \"E\"] [\"B\" \"C\" \"D\"]] \"A\") 3))\n  (is (= (candidate [[\"A\" \"B\"] [\"A\" \"C\"] [\"A\" \"D\" \"E\"] [\"B\" \"C\" \"D\"]] \"E\") 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_426_filter_oddnumbers", "language": "clj", "prompt": "(defn filter_oddnumbers\n  \"\tWrite a function to filter odd numbers.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_oddnumbers)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [1 3 5 7 9]))\n  (is (= (candidate [10 20 45 67 84 93]) [45 67 93]))\n  (is (= (candidate [5 7 9 8 6 4 3]) [5 7 9 3]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_427_change_date_format", "language": "clj", "prompt": "(defn change_date_format\n  \"\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\"\n  [dt]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate change_date_format)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"2026-01-02\") \"02-01-2026\"))\n  (is (= (candidate \"2020-11-13\") \"13-11-2020\"))\n  (is (= (candidate \"2021-04-26\") \"26-04-2021\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_428_shell_sort", "language": "clj", "prompt": "(defn shell_sort\n  \"\tWrite a function to sort the given array by using shell sort.\"\n  [my_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate shell_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 23 4 5 3 2 12 81 56 95]) [2 3 4 5 12 12 23 56 81 95]))\n  (is (= (candidate [24 22 39 34 87 73 68]) [22 24 34 39 68 73 87]))\n  (is (= (candidate [32 30 16 96 82 83 74]) [16 30 32 74 82 83 96]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_429_and_tuples", "language": "clj", "prompt": "(defn and_tuples\n  \"\tWrite a function to extract the elementwise and tuples from the given two tuples.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate and_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 6 9] [5 2 3 3]) [0 0 2 1]))\n  (is (= (candidate [1 2 3 4] [5 6 7 8]) [1 2 3 0]))\n  (is (= (candidate [8 9 11 12] [7 13 14 17]) [0 9 10 0]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_430_parabola_directrix", "language": "clj", "prompt": "(defn parabola_directrix\n  \"\tWrite a function to find the directrix of a parabola.\"\n  [a b c]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate parabola_directrix)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 3 2) -198))\n  (is (= (candidate 9 8 4) -2336))\n  (is (= (candidate 2 4 6) -130))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_431_common_element", "language": "clj", "prompt": "(defn common_element\n  \"\tWrite a function that takes two lists and returns true if they have at least one common element.\"\n  [list1 list2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate common_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] [5 6 7 8 9]) true))\n  (is (= (candidate [1 2 3 4 5] [6 7 8 9]) nil))\n  (is (= (candidate [\"a\" \"b\" \"c\"] [\"d\" \"b\" \"e\"]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_432_median_trapezium", "language": "clj", "prompt": "(defn median_trapezium\n  \"\tWrite a function to find the median length of a trapezium.\"\n  [base1 base2 height]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate median_trapezium)\n\n(deftest test-humaneval\n\n  (is (= (candidate 15 25 35) 20))\n  (is (= (candidate 10 20 30) 15))\n  (is (= (candidate 6 9 4) 7.5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_433_check_greater", "language": "clj", "prompt": "(defn check_greater\n  \"\tWrite a function to check whether the entered number is greater than the elements of the given array.\"\n  [arr number]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_greater)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5] 4) false))\n  (is (= (candidate [2 3 4 5 6] 8) true))\n  (is (= (candidate [9 7 4 8 6 1] 11) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_434_text_match_one", "language": "clj", "prompt": "(defn text_match_one\n  \"\tWrite a function that matches a string that has an a followed by one or more b's.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_one)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abba\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_435_last_Digit", "language": "clj", "prompt": "(defn last_Digit\n  \"\tWrite a python function to find the last digit of a given number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate last_Digit)\n\n(deftest test-humaneval\n\n  (is (= (candidate 123) 3))\n  (is (= (candidate 25) 5))\n  (is (= (candidate 30) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_436_neg_nos", "language": "clj", "prompt": "(defn neg_nos\n  \"\tWrite a python function to return the negative numbers in a list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate neg_nos)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-1 4 5 -6]) [-1 -6]))\n  (is (= (candidate [-1 -2 3 4]) [-1 -2]))\n  (is (= (candidate [-7 -6 8 9]) [-7 -6]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_437_remove_odd", "language": "clj", "prompt": "(defn remove_odd\n  \"\tWrite a function to remove odd characters in a string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") \"yhn\"))\n  (is (= (candidate \"program\") \"rga\"))\n  (is (= (candidate \"language\") \"agae\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_438_count_bidirectional", "language": "clj", "prompt": "(defn count_bidirectional\n  \"\tWrite a function to count bidirectional tuple pairs.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_bidirectional)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[5 6] [1 2] [6 5] [9 1] [6 5] [2 1]]) 3))\n  (is (= (candidate [[5 6] [1 3] [6 5] [9 1] [6 5] [2 1]]) 2))\n  (is (= (candidate [[5 6] [1 2] [6 5] [9 2] [6 5] [2 1]]) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_439_multiple_to_single", "language": "clj", "prompt": "(defn multiple_to_single\n  \"\tWrite a function to join a list of multiple integers into a single integer.\"\n  [L]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiple_to_single)\n\n(deftest test-humaneval\n\n  (is (= (candidate [11 33 50]) 113350))\n  (is (= (candidate [-1 2 3 4 5 6]) -123456))\n  (is (= (candidate [10 15 20 25]) 10152025))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_440_find_adverb_position", "language": "clj", "prompt": "(defn find_adverb_position\n  \"\tWrite a function to find the first adverb and their positions in a given sentence.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_adverb_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"clearly!! we can see the sky\") [0 7 \"clearly\"]))\n  (is (= (candidate \"seriously!! there are many roses\") [0 9 \"seriously\"]))\n  (is (= (candidate \"unfortunately!! sita is going to home\") [0 13 \"unfortunately\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_441_surfacearea_cube", "language": "clj", "prompt": "(defn surfacearea_cube\n  \"\tWrite a function to find the surface area of a cube of a given size.\"\n  [l]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate surfacearea_cube)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 150))\n  (is (= (candidate 3) 54))\n  (is (= (candidate 10) 600))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_442_positive_count", "language": "clj", "prompt": "(defn positive_count\n  \"\tWrite a function to find the ration of positive numbers in an array of integers.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate positive_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 1 2 -1 -5 6 0 -3 -2 3 4 6 8]) 0.54))\n  (is (= (candidate [2 1 2 -1 -5 6 4 -3 -2 3 4 6 8]) 0.69))\n  (is (= (candidate [2 4 -6 -9 11 -12 14 -5 17]) 0.56))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_443_largest_neg", "language": "clj", "prompt": "(defn largest_neg\n  \"\tWrite a python function to find the largest negative number from the given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate largest_neg)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 -4 -6]) -6))\n  (is (= (candidate [1 2 3 -8 -9]) -9))\n  (is (= (candidate [1 2 3 4 -1]) -1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_444_trim_tuple", "language": "clj", "prompt": "(defn trim_tuple\n  \"\tWrite a function to trim each list by k in the given lists.\"\n  [test_list K]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate trim_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[5 3 2 1 4] [3 4 9 2 1] [9 1 2 3 5] [4 8 2 1 7]] 2) [[2] [9] [2] [2]]))\n  (is (= (candidate [[5 3 2 1 4] [3 4 9 2 1] [9 1 2 3 5] [4 8 2 1 7]] 1) [[3 2 1] [4 9 2] [1 2 3] [8 2 1]]))\n  (is (= (candidate [[7 8 4 9] [11 8 12 4] [4 1 7 8] [3 6 9 7]] 1) [[8 4] [8 12] [1 7] [6 9]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_445_index_multiplication", "language": "clj", "prompt": "(defn index_multiplication\n  \"\tWrite a function to perform index wise multiplication of list elements in the given two lists.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate index_multiplication)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [4 5] [2 9] [1 10]] [[6 7] [3 9] [1 1] [7 3]]) [[6 21] [12 45] [2 9] [7 30]]))\n  (is (= (candidate [[2 4] [5 6] [3 10] [2 11]] [[7 8] [4 10] [2 2] [8 4]]) [[14 32] [20 60] [6 20] [16 44]]))\n  (is (= (candidate [[3 5] [6 7] [4 11] [3 12]] [[8 9] [5 11] [3 3] [9 5]]) [[24 45] [30 77] [12 33] [27 60]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_446_count_Occurrence", "language": "clj", "prompt": "(defn count_Occurrence\n  \"\tWrite a python function to count the occurence of all elements of list in a tuple.\"\n  [tup lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Occurrence)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"a\" \"a\" \"c\" \"b\" \"d\"] [\"a\" \"b\"]) 3))\n  (is (= (candidate [1 2 3 1 4 6 7 1 4] [1 4 7]) 6))\n  (is (= (candidate [1 2 3 4 5 6] [1 2]) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_447_cube_nums", "language": "clj", "prompt": "(defn cube_nums\n  \"\tWrite a function to find cubes of individual elements in a list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cube_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [1 8 27 64 125 216 343 512 729 1000]))\n  (is (= (candidate [10 20 30]) [1000 8000 27000]))\n  (is (= (candidate [12 15]) [1728 3375]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_448_cal_sum", "language": "clj", "prompt": "(defn cal_sum\n  \"\tWrite a function to calculate the sum of perrin numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cal_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 9) 49))\n  (is (= (candidate 10) 66))\n  (is (= (candidate 11) 88))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_450_extract_string", "language": "clj", "prompt": "(defn extract_string\n  \"\tWrite a function to extract specified size of strings from a given list of string values.\"\n  [str l]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Python\" \"list\" \"exercises\" \"practice\" \"solution\"] 8) [\"practice\" \"solution\"]))\n  (is (= (candidate [\"Python\" \"list\" \"exercises\" \"practice\" \"solution\"] 6) [\"Python\"]))\n  (is (= (candidate [\"Python\" \"list\" \"exercises\" \"practice\" \"solution\"] 9) [\"exercises\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_451_remove_whitespaces", "language": "clj", "prompt": "(defn remove_whitespaces\n  \"\tWrite a function to remove all whitespaces from the given string.\"\n  [text1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_whitespaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \" Google    Flutter \") \"GoogleFlutter\"))\n  (is (= (candidate \" Google    Dart \") \"GoogleDart\"))\n  (is (= (candidate \" iOS    Swift \") \"iOSSwift\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_452_loss_amount", "language": "clj", "prompt": "(defn loss_amount\n  \"\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\"\n  [actual_cost sale_amount]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate loss_amount)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1500 1200) 0))\n  (is (= (candidate 100 200) 100))\n  (is (= (candidate 2000 5000) 3000))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_453_sumofFactors", "language": "clj", "prompt": "(defn sumofFactors\n  \"\tWrite a python function to find the sum of even factors of a number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sumofFactors)\n\n(deftest test-humaneval\n\n  (is (= (candidate 18) 26))\n  (is (= (candidate 30) 48))\n  (is (= (candidate 6) 8))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_454_text_match_wordz", "language": "clj", "prompt": "(defn text_match_wordz\n  \"\tWrite a function that matches a word containing 'z'.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_wordz)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"pythonz.\") true))\n  (is (= (candidate \"xyz.\") true))\n  (is (= (candidate \"  lang  .\") false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_455_check_monthnumb_number", "language": "clj", "prompt": "(defn check_monthnumb_number\n  \"\tWrite a function to check whether the given month number contains 31 days or not.\"\n  [monthnum2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_monthnumb_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) true))\n  (is (= (candidate 2) false))\n  (is (= (candidate 6) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_456_reverse_string_list", "language": "clj", "prompt": "(defn reverse_string_list\n  \"\tWrite a function to reverse each string in a given list of string values.\"\n  [stringlist]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_string_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"Red\" \"Green\" \"Blue\" \"White\" \"Black\"]) [\"deR\" \"neerG\" \"eulB\" \"etihW\" \"kcalB\"]))\n  (is (= (candidate [\"john\" \"amal\" \"joel\" \"george\"]) [\"nhoj\" \"lama\" \"leoj\" \"egroeg\"]))\n  (is (= (candidate [\"jack\" \"john\" \"mary\"]) [\"kcaj\" \"nhoj\" \"yram\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_457_Find_Min", "language": "clj", "prompt": "(defn Find_Min\n  \"\tWrite a python function to find the sublist having minimum length.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Min)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1] [1 2] [1 2 3]]) [1]))\n  (is (= (candidate [[1 1] [1 1 1] [1 2 7 8]]) [1 1]))\n  (is (= (candidate [[\"x\"] [\"x\" \"y\"] [\"x\" \"y\" \"z\"]]) [\"x\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_458_rectangle_area", "language": "clj", "prompt": "(defn rectangle_area\n  \"\tWrite a function to find the area of a rectangle.\"\n  [l b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rectangle_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 20) 200))\n  (is (= (candidate 10 5) 50))\n  (is (= (candidate 4 2) 8))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_459_remove_uppercase", "language": "clj", "prompt": "(defn remove_uppercase\n  \"\tWrite a function to remove uppercase substrings from a given string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_uppercase)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"cAstyoUrFavoRitETVshoWs\") \"cstyoravoitshos\"))\n  (is (= (candidate \"wAtchTheinTernEtrAdIo\") \"wtchheinerntrdo\"))\n  (is (= (candidate \"VoicESeaRchAndreComMendaTionS\") \"oiceachndreomendaion\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_460_Extract", "language": "clj", "prompt": "(defn Extract\n  \"\tWrite a python function to get the first element of each sublist.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Extract)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2] [3 4 5] [6 7 8 9]]) [1 3 6]))\n  (is (= (candidate [[1 2 3] [4 5]]) [1 4]))\n  (is (= (candidate [[9 8 1] [1 2]]) [9 1]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_461_upper_ctr", "language": "clj", "prompt": "(defn upper_ctr\n  \"\tWrite a python function to count the upper case characters in a given string.\"\n  [str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate upper_ctr)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"PYthon\") 1))\n  (is (= (candidate \"BigData\") 1))\n  (is (= (candidate \"program\") 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_462_combinations_list", "language": "clj", "prompt": "(defn combinations_list\n  \"\tWrite a function to find all possible combinations of the elements of a given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate combinations_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"orange\" \"red\" \"green\" \"blue\"]) [[] [\"orange\"] [\"red\"] [\"red\" \"orange\"] [\"green\"] [\"green\" \"orange\"] [\"green\" \"red\"] [\"green\" \"red\" \"orange\"] [\"blue\"] [\"blue\" \"orange\"] [\"blue\" \"red\"] [\"blue\" \"red\" \"orange\"] [\"blue\" \"green\"] [\"blue\" \"green\" \"orange\"] [\"blue\" \"green\" \"red\"] [\"blue\" \"green\" \"red\" \"orange\"]]))\n  (is (= (candidate [\"red\" \"green\" \"blue\" \"white\" \"black\" \"orange\"]) [[] [\"red\"] [\"green\"] [\"green\" \"red\"] [\"blue\"] [\"blue\" \"red\"] [\"blue\" \"green\"] [\"blue\" \"green\" \"red\"] [\"white\"] [\"white\" \"red\"] [\"white\" \"green\"] [\"white\" \"green\" \"red\"] [\"white\" \"blue\"] [\"white\" \"blue\" \"red\"] [\"white\" \"blue\" \"green\"] [\"white\" \"blue\" \"green\" \"red\"] [\"black\"] [\"black\" \"red\"] [\"black\" \"green\"] [\"black\" \"green\" \"red\"] [\"black\" \"blue\"] [\"black\" \"blue\" \"red\"] [\"black\" \"blue\" \"green\"] [\"black\" \"blue\" \"green\" \"red\"] [\"black\" \"white\"] [\"black\" \"white\" \"red\"] [\"black\" \"white\" \"green\"] [\"black\" \"white\" \"green\" \"red\"] [\"black\" \"white\" \"blue\"] [\"black\" \"white\" \"blue\" \"red\"] [\"black\" \"white\" \"blue\" \"green\"] [\"black\" \"white\" \"blue\" \"green\" \"red\"] [\"orange\"] [\"orange\" \"red\"] [\"orange\" \"green\"] [\"orange\" \"green\" \"red\"] [\"orange\" \"blue\"] [\"orange\" \"blue\" \"red\"] [\"orange\" \"blue\" \"green\"] [\"orange\" \"blue\" \"green\" \"red\"] [\"orange\" \"white\"] [\"orange\" \"white\" \"red\"] [\"orange\" \"white\" \"green\"] [\"orange\" \"white\" \"green\" \"red\"] [\"orange\" \"white\" \"blue\"] [\"orange\" \"white\" \"blue\" \"red\"] [\"orange\" \"white\" \"blue\" \"green\"] [\"orange\" \"white\" \"blue\" \"green\" \"red\"] [\"orange\" \"black\"] [\"orange\" \"black\" \"red\"] [\"orange\" \"black\" \"green\"] [\"orange\" \"black\" \"green\" \"red\"] [\"orange\" \"black\" \"blue\"] [\"orange\" \"black\" \"blue\" \"red\"] [\"orange\" \"black\" \"blue\" \"green\"] [\"orange\" \"black\" \"blue\" \"green\" \"red\"] [\"orange\" \"black\" \"white\"] [\"orange\" \"black\" \"white\" \"red\"] [\"orange\" \"black\" \"white\" \"green\"] [\"orange\" \"black\" \"white\" \"green\" \"red\"] [\"orange\" \"black\" \"white\" \"blue\"] [\"orange\" \"black\" \"white\" \"blue\" \"red\"] [\"orange\" \"black\" \"white\" \"blue\" \"green\"] [\"orange\" \"black\" \"white\" \"blue\" \"green\" \"red\"]]))\n  (is (= (candidate [\"red\" \"green\" \"black\" \"orange\"]) [[] [\"red\"] [\"green\"] [\"green\" \"red\"] [\"black\"] [\"black\" \"red\"] [\"black\" \"green\"] [\"black\" \"green\" \"red\"] [\"orange\"] [\"orange\" \"red\"] [\"orange\" \"green\"] [\"orange\" \"green\" \"red\"] [\"orange\" \"black\"] [\"orange\" \"black\" \"red\"] [\"orange\" \"black\" \"green\"] [\"orange\" \"black\" \"green\" \"red\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_463_max_subarray_product", "language": "clj", "prompt": "(defn max_subarray_product\n  \"\tWrite a function to find the maximum product subarray of the given array.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_subarray_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 -2 -3 0 7 -8 -2]) 112))\n  (is (= (candidate [6 -3 -10 0 2]) 180))\n  (is (= (candidate [-2 -40 0 -2 -3]) 80))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_464_check_value", "language": "clj", "prompt": "(defn check_value\n  \"\tWrite a function to check if all values are same in a dictionary.\"\n  [dict n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_value)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Cierra Vega\" 12 \"Alden Cantrell\" 12 \"Kierra Gentry\" 12 \"Pierre Cox\" 12} 10) false))\n  (is (= (candidate {\"Cierra Vega\" 12 \"Alden Cantrell\" 12 \"Kierra Gentry\" 12 \"Pierre Cox\" 12} 12) true))\n  (is (= (candidate {\"Cierra Vega\" 12 \"Alden Cantrell\" 12 \"Kierra Gentry\" 12 \"Pierre Cox\" 12} 5) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_465_drop_empty", "language": "clj", "prompt": "(defn drop_empty\n  \"\tWrite a function to drop empty items from a given dictionary.\"\n  [dict1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate drop_empty)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"c1\" \"Red\" \"c2\" \"Green\" \"c3\" nil}) {\"c1\" \"Red\" \"c2\" \"Green\"}))\n  (is (= (candidate {\"c1\" \"Red\" \"c2\" nil \"c3\" nil}) {\"c1\" \"Red\"}))\n  (is (= (candidate {\"c1\" nil \"c2\" \"Green\" \"c3\" nil}) {\"c2\" \"Green\"}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_468_max_product", "language": "clj", "prompt": "(defn max_product\n  \"\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 100 4 5 150 6]) 3000))\n  (is (= (candidate [4 42 55 68 80]) 50265600))\n  (is (= (candidate [10 22 9 33 21 50 41 60]) 2460))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_470_add_pairwise", "language": "clj", "prompt": "(defn add_pairwise\n  \"\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_pairwise)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 8 10]) [6 12 15 18]))\n  (is (= (candidate [2 6 8 9 11]) [8 14 17 20]))\n  (is (= (candidate [3 7 9 10 12]) [10 16 19 22]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_471_find_remainder", "language": "clj", "prompt": "(defn find_remainder\n  \"\tWrite a python function to find the product of the array multiplication modulo n.\"\n  [arr n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_remainder)\n\n(deftest test-humaneval\n\n  (is (= (candidate [100 10 5 25 35 14] 11) 9))\n  (is (= (candidate [1 1 1] 1) 0))\n  (is (= (candidate [1 2 1] 2) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_472_check_Consecutive", "language": "clj", "prompt": "(defn check_Consecutive\n  \"\tWrite a python function to check whether the given list contains consecutive numbers or not.\"\n  [l]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_Consecutive)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) true))\n  (is (= (candidate [1 2 3 5 6]) false))\n  (is (= (candidate [1 2 1]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_474_replace_char", "language": "clj", "prompt": "(defn replace_char\n  \"\tWrite a function to replace characters in a string.\"\n  [str1 ch newch]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"polygon\" \"y\" \"l\") \"pollgon\"))\n  (is (= (candidate \"character\" \"c\" \"a\") \"aharaater\"))\n  (is (= (candidate \"python\" \"l\" \"a\") \"python\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_475_sort_counter", "language": "clj", "prompt": "(defn sort_counter\n  \"\tWrite a function to sort a dictionary by value.\"\n  [dict1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_counter)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Math\" 81 \"Physics\" 83 \"Chemistry\" 87}) [[\"Chemistry\" 87] [\"Physics\" 83] [\"Math\" 81]]))\n  (is (= (candidate {\"Math\" 400 \"Physics\" 300 \"Chemistry\" 250}) [[\"Math\" 400] [\"Physics\" 300] [\"Chemistry\" 250]]))\n  (is (= (candidate {\"Math\" 900 \"Physics\" 1000 \"Chemistry\" 1250}) [[\"Chemistry\" 1250] [\"Physics\" 1000] [\"Math\" 900]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_476_big_sum", "language": "clj", "prompt": "(defn big_sum\n  \"\tWrite a python function to find the sum of the largest and smallest value in a given array.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate big_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 4))\n  (is (= (candidate [-1 2 3 4]) 3))\n  (is (= (candidate [2 3 6]) 8))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_477_is_lower", "language": "clj", "prompt": "(defn is_lower\n  \"\tWrite a python function to convert the given string to lower case.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_lower)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"InValid\") \"invalid\"))\n  (is (= (candidate \"TruE\") \"true\"))\n  (is (= (candidate \"SenTenCE\") \"sentence\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_478_remove_lowercase", "language": "clj", "prompt": "(defn remove_lowercase\n  \"\tWrite a function to remove lowercase substrings from a given string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_lowercase)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"PYTHon\") \"PYTH\"))\n  (is (= (candidate \"FInD\") \"FID\"))\n  (is (= (candidate \"STRinG\") \"STRG\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_479_first_Digit", "language": "clj", "prompt": "(defn first_Digit\n  \"\tWrite a python function to find the first digit of a given number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_Digit)\n\n(deftest test-humaneval\n\n  (is (= (candidate 123) 1))\n  (is (= (candidate 456) 4))\n  (is (= (candidate 12) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_4_heap_queue_largest", "language": "clj", "prompt": "(defn heap_queue_largest\n  \"\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\"\n  [nums n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate heap_queue_largest)\n\n(deftest test-humaneval\n\n  (is (= (candidate [25 35 22 85 14 65 75 22 58] 3) [85 75 65]))\n  (is (= (candidate [25 35 22 85 14 65 75 22 58] 2) [85 75]))\n  (is (= (candidate [25 35 22 85 14 65 75 22 58] 5) [85 75 65 58 35]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_554_Split", "language": "clj", "prompt": "(defn Split\n  \"\tWrite a python function which takes a list of integers and only returns the odd ones.\"\n  [list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Split)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6]) [1 3 5]))\n  (is (= (candidate [10 11 12 13]) [11 13]))\n  (is (= (candidate [7 8 9 1]) [7 9 1]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_555_difference", "language": "clj", "prompt": "(defn difference\n  \"\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate difference)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 30))\n  (is (= (candidate 5) 210))\n  (is (= (candidate 2) 6))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_556_find_Odd_Pair", "language": "clj", "prompt": "(defn find_Odd_Pair\n  \"\tWrite a python function to count the number of pairs whose xor value is odd.\"\n  [A N]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Odd_Pair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 4 7 2 1] 5) 6))\n  (is (= (candidate [7 2 8 1 0 5 11] 7) 12))\n  (is (= (candidate [1 2 3] 3) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_557_toggle_string", "language": "clj", "prompt": "(defn toggle_string\n  \"\tWrite a function to toggle the case of all characters in a string.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate toggle_string)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python\") \"pYTHON\"))\n  (is (= (candidate \"Pangram\") \"pANGRAM\"))\n  (is (= (candidate \"LIttLE\") \"liTTle\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_558_digit_distance_nums", "language": "clj", "prompt": "(defn digit_distance_nums\n  \"\tWrite a python function to find the sum of the per-digit difference between two integers.\"\n  [n1 n2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate digit_distance_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 2) 1))\n  (is (= (candidate 23 56) 6))\n  (is (= (candidate 123 256) 7))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_559_max_sub_array_sum", "language": "clj", "prompt": "(defn max_sub_array_sum\n  \"\tWrite a function to find the sum of the largest contiguous sublist in the given list.\"\n  [a size]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sub_array_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [-2 -3 4 -1 -2 1 5 -3] 8) 7))\n  (is (= (candidate [-3 -4 5 -2 -3 2 6 -4] 8) 8))\n  (is (= (candidate [-4 -5 6 -3 -4 3 7 -5] 8) 10))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_560_union_elements", "language": "clj", "prompt": "(defn union_elements\n  \"\tWrite a function to find the union of the elements of two given lists and output them in sorted order.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate union_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4 5 6] [5 7 4 10]) [3 4 5 6 7 10]))\n  (is (= (candidate [1 2 3 4] [3 4 5 6]) [1 2 3 4 5 6]))\n  (is (= (candidate [11 12 13 14] [13 15 16 17]) [11 12 13 14 15 16 17]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_562_Find_Max_Length", "language": "clj", "prompt": "(defn Find_Max_Length\n  \"\tWrite a python function to find the length of the longest sublists.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Max_Length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1] [1 4] [5 6 7 8]]) 4))\n  (is (= (candidate [[0 1] [2 2] [3 2 1]]) 3))\n  (is (= (candidate [[7] [22 23] [13 14 15] [10 20 30 40 50]]) 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_563_extract_values", "language": "clj", "prompt": "(defn extract_values\n  \"\tWrite a function to extract values between quotation marks from a string.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_values)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"\"Python\", \"PHP\", \"Java\"\") [\"Python\" \"PHP\" \"Java\"]))\n  (is (= (candidate \"\"python\",\"program\",\"language\"\") [\"python\" \"program\" \"language\"]))\n  (is (= (candidate \"\"red\",\"blue\",\"green\",\"yellow\"\") [\"red\" \"blue\" \"green\" \"yellow\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_564_count_Pairs", "language": "clj", "prompt": "(defn count_Pairs\n  \"\tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\"\n  [arr n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Pairs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 1] 3) 2))\n  (is (= (candidate [1 1 1 1] 4) 0))\n  (is (= (candidate [1 2 3 4 5] 5) 10))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_565_split", "language": "clj", "prompt": "(defn split\n  \"\tWrite a python function to split a string into characters.\"\n  [word]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") [\"p\" \"y\" \"t\" \"h\" \"o\" \"n\"]))\n  (is (= (candidate \"Name\") [\"N\" \"a\" \"m\" \"e\"]))\n  (is (= (candidate \"program\") [\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_566_sum_digits", "language": "clj", "prompt": "(defn sum_digits\n  \"\tWrite a function to get the sum of the digits of a non-negative integer.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 345) 12))\n  (is (= (candidate 12) 3))\n  (is (= (candidate 97) 16))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_567_issort_list", "language": "clj", "prompt": "(defn issort_list\n  \"\tWrite a function to check whether a specified list is sorted or not.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate issort_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 6 8 10 12 14 16 17]) true))\n  (is (= (candidate [1 2 4 6 8 10 12 14 20 17]) false))\n  (is (= (candidate [1 2 4 6 8 10 15 14 20]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_568_empty_list", "language": "clj", "prompt": "(defn empty_list\n  \"\tWrite a function to create a list of N empty dictionaries.\"\n  [length]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate empty_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) [{} {} {} {} {}]))\n  (is (= (candidate 6) [{} {} {} {} {} {}]))\n  (is (= (candidate 7) [{} {} {} {} {} {} {}]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_569_sort_sublists", "language": "clj", "prompt": "(defn sort_sublists\n  \"\tWrite a function to sort each sublist of strings in a given list of lists.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_sublists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"green\" \"orange\"] [\"black\" \"white\"] [\"white\" \"black\" \"orange\"]]) [[\"green\" \"orange\"] [\"black\" \"white\"] [\"black\" \"orange\" \"white\"]]))\n  (is (= (candidate [[\"green\" \"orange\"] [\"black\"] [\"green\" \"orange\"] [\"white\"]]) [[\"green\" \"orange\"] [\"black\"] [\"green\" \"orange\"] [\"white\"]]))\n  (is (= (candidate [[\"a\" \"b\"] [\"d\" \"c\"] [\"g\" \"h\"] [\"f\" \"e\"]]) [[\"a\" \"b\"] [\"c\" \"d\"] [\"g\" \"h\"] [\"e\" \"f\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_56_checks", "language": "clj", "prompt": "(defn checks\n  \"\tWrite a python function to check if a given number is one less than twice its reverse.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate checks)\n\n(deftest test-humaneval\n\n  (is (= (candidate 70) false))\n  (is (= (candidate 23) false))\n  (is (= (candidate 73) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_572_two_unique_nums", "language": "clj", "prompt": "(defn two_unique_nums\n  \"\tWrite a python function to remove duplicate numbers from a given number of lists.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate two_unique_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 2 3 4 5]) [1 4 5]))\n  (is (= (candidate [1 2 3 2 4 5]) [1 3 4 5]))\n  (is (= (candidate [1 2 3 4 5]) [1 2 3 4 5]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_573_unique_product", "language": "clj", "prompt": "(defn unique_product\n  \"\tWrite a python function to calculate the product of the unique numbers in a given list.\"\n  [list_data]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate unique_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 30 40 20 50 60 40]) 720000000))\n  (is (= (candidate [1 2 3 1]) 6))\n  (is (= (candidate [7 8 9 0 1 1]) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "clj", "prompt": "(defn surfacearea_cylinder\n  \"\tWrite a function to find the surface area of a cylinder.\"\n  [r h]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate surfacearea_cylinder)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10 5) 942.45))\n  (is (= (candidate 4 5) 226.18800000000002))\n  (is (= (candidate 4 10) 351.848))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_576_is_Sub_Array", "language": "clj", "prompt": "(defn is_Sub_Array\n  \"\tWrite a python function to check whether a list is sublist of another or not.\"\n  [A B]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Sub_Array)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 4 3 5] [1 2]) false))\n  (is (= (candidate [1 2 1] [1 2 1]) true))\n  (is (= (candidate [1 0 2 2] [2 2 0]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "clj", "prompt": "(defn last_Digit_Factorial\n  \"\tWrite a python function to find the last digit in factorial of a given number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate last_Digit_Factorial)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4) 4))\n  (is (= (candidate 21) 0))\n  (is (= (candidate 30) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_578_interleave_lists", "language": "clj", "prompt": "(defn interleave_lists\n  \"\tWrite a function to interleave 3 lists of the same length into a single flat list.\"\n  [list1 list2 list3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate interleave_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7] [10 20 30 40 50 60 70] [100 200 300 400 500 600 700]) [1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700]))\n  (is (= (candidate [10 20] [15 2] [5 10]) [10 15 5 20 2 10]))\n  (is (= (candidate [11 44] [10 15] [20 5]) [11 10 20 44 15 5]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_579_find_dissimilar", "language": "clj", "prompt": "(defn find_dissimilar\n  \"\tWrite a function to find the dissimilar elements in the given two tuples.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_dissimilar)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4 5 6] [5 7 4 10]) [3 6 7 10]))\n  (is (= (candidate [1 2 3 4] [7 2 3 9]) [1 4 7 9]))\n  (is (= (candidate [21 11 25 26] [26 34 21 36]) [34 36 11 25]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_57_find_Max_Num", "language": "clj", "prompt": "(defn find_Max_Num\n  \"\tWrite a python function to find the largest number that can be formed with the given list of digits.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Max_Num)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 321))\n  (is (= (candidate [4 5 6 1]) 6541))\n  (is (= (candidate [1 2 3 9]) 9321))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_580_extract_even", "language": "clj", "prompt": "(defn extract_even\n  \"\tWrite a function to remove uneven elements in the nested mixed tuple.\"\n  [test_tuple]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_even)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 5 [7 6 [2 4]] 6 8]) [4 [6 [2 4]] 6 8]))\n  (is (= (candidate [5 6 [8 7 [4 8]] 7 9]) [6 [8 [4 8]]]))\n  (is (= (candidate [5 6 [9 8 [4 6]] 8 10]) [6 [8 [4 6]] 8 10]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_581_surface_Area", "language": "clj", "prompt": "(defn surface_Area\n  \"\tWrite a python function to find the surface area of a square pyramid with a given base edge and height.\"\n  [b s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate surface_Area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 4) 33))\n  (is (= (candidate 4 5) 56))\n  (is (= (candidate 1 2) 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_583_catalan_number", "language": "clj", "prompt": "(defn catalan_number\n  \"\tWrite a function which returns nth catalan number.\"\n  [num]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate catalan_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 16796))\n  (is (= (candidate 9) 4862))\n  (is (= (candidate 7) 429))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_584_find_adverbs", "language": "clj", "prompt": "(defn find_adverbs\n  \"\tWrite a function to find the first adverb ending with ly and its positions in a given string.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_adverbs)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\"))\n  (is (= (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\"))\n  (is (= (candidate \"Complete the task quickly\") \"18-25: quickly\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_585_expensive_items", "language": "clj", "prompt": "(defn expensive_items\n  \"\tWrite a function to find the n most expensive items in a given dataset.\"\n  [items n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate expensive_items)\n\n(deftest test-humaneval\n\n  (is (= (candidate [{\"name\" \"Item-1\" \"price\" 101.1} {\"name\" \"Item-2\" \"price\" 555.22}] 1) [{\"name\" \"Item-2\" \"price\" 555.22}]))\n  (is (= (candidate [{\"name\" \"Item-1\" \"price\" 101.1} {\"name\" \"Item-2\" \"price\" 555.22} {\"name\" \"Item-3\" \"price\" 45.09}] 2) [{\"name\" \"Item-2\" \"price\" 555.22} {\"name\" \"Item-1\" \"price\" 101.1}]))\n  (is (= (candidate [{\"name\" \"Item-1\" \"price\" 101.1} {\"name\" \"Item-2\" \"price\" 555.22} {\"name\" \"Item-3\" \"price\" 45.09} {\"name\" \"Item-4\" \"price\" 22.75}] 1) [{\"name\" \"Item-2\" \"price\" 555.22}]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_586_split_Arr", "language": "clj", "prompt": "(defn split_Arr\n  \"\tWrite a python function to split a list at the nth eelment and add the first part to the end.\"\n  [l n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate split_Arr)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 10 5 6 52 36] 2) [5 6 52 36 12 10]))\n  (is (= (candidate [1 2 3 4] 1) [2 3 4 1]))\n  (is (= (candidate [0 1 2 3 4 5 6 7] 3) [3 4 5 6 7 0 1 2]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_587_list_tuple", "language": "clj", "prompt": "(defn list_tuple\n  \"\tWrite a function to convert a list to a tuple.\"\n  [listx]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate list_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 10 7 4 15 3]) [5 10 7 4 15 3]))\n  (is (= (candidate [2 4 5 6 2 3 4 4 7]) [2 4 5 6 2 3 4 4 7]))\n  (is (= (candidate [58 44 56]) [58 44 56]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_588_big_diff", "language": "clj", "prompt": "(defn big_diff\n  \"\tWrite a python function to find the difference between largest and smallest value in a given list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate big_diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4]) 3))\n  (is (= (candidate [4 5 12]) 8))\n  (is (= (candidate [9 2 3]) 7))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_589_perfect_squares", "language": "clj", "prompt": "(defn perfect_squares\n  \"\tWrite a function to find perfect squares between two given numbers.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate perfect_squares)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 30) [1 4 9 16 25]))\n  (is (= (candidate 50 100) [64 81 100]))\n  (is (= (candidate 100 200) [100 121 144 169 196]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_58_opposite_Signs", "language": "clj", "prompt": "(defn opposite_Signs\n  \"\tWrite a python function to check whether the given two integers have opposite sign or not.\"\n  [x y]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate opposite_Signs)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 -2) true))\n  (is (= (candidate 3 2) false))\n  (is (= (candidate -10 -10) false))\n  (is (= (candidate -2 2) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_591_swap_List", "language": "clj", "prompt": "(defn swap_List\n  \"\tWrite a python function to interchange the first and last elements in a list.\"\n  [newList]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate swap_List)\n\n(deftest test-humaneval\n\n  (is (= (candidate [12 35 9 56 24]) [24 35 9 56 12]))\n  (is (= (candidate [1 2 3]) [3 2 1]))\n  (is (= (candidate [4 5 6]) [6 5 4]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_592_sum_Of_product", "language": "clj", "prompt": "(defn sum_Of_product\n  \"\tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_Of_product)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 15))\n  (is (= (candidate 4) 56))\n  (is (= (candidate 1) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_593_removezero_ip", "language": "clj", "prompt": "(defn removezero_ip\n  \"\tWrite a function to remove leading zeroes from an ip address.\"\n  [ip]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate removezero_ip)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"216.08.094.196\") \"216.8.94.196\"))\n  (is (= (candidate \"12.01.024\") \"12.1.24\"))\n  (is (= (candidate \"216.08.094.0196\") \"216.8.94.196\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_594_diff_even_odd", "language": "clj", "prompt": "(defn diff_even_odd\n  \"\tWrite a function to find the difference of the first even and first odd number of a given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate diff_even_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 4 1 6 8]) 3))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) 1))\n  (is (= (candidate [1 5 7 9 10]) 9))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_595_min_Swaps", "language": "clj", "prompt": "(defn min_Swaps\n  \"\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\"\n  [str1 str2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_Swaps)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"1101\" \"1110\") 1))\n  (is (= (candidate \"111\" \"000\") \"Not Possible\"))\n  (is (= (candidate \"111\" \"110\") \"Not Possible\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_597_find_kth", "language": "clj", "prompt": "(defn find_kth\n  \"\tWrite a function to find kth element from the given two sorted arrays.\"\n  [arr1 arr2 k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_kth)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 3 6 7 9] [1 4 8 10] 5) 6))\n  (is (= (candidate [100 112 256 349 770] [72 86 113 119 265 445 892] 7) 256))\n  (is (= (candidate [3 4 7 8 10] [2 5 9 11] 6) 8))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_598_armstrong_number", "language": "clj", "prompt": "(defn armstrong_number\n  \"\tWrite a function to check whether the given number is armstrong or not.\"\n  [number]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate armstrong_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 153) true))\n  (is (= (candidate 259) false))\n  (is (= (candidate 4458) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_599_sum_average", "language": "clj", "prompt": "(defn sum_average\n  \"\tWrite a function to find sum and average of first n natural numbers.\"\n  [number]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_average)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) [55 5.5]))\n  (is (= (candidate 15) [120 8.0]))\n  (is (= (candidate 20) [210 10.5]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_59_is_octagonal", "language": "clj", "prompt": "(defn is_octagonal\n  \"\tWrite a function to find the nth octagonal number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_octagonal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 65))\n  (is (= (candidate 10) 280))\n  (is (= (candidate 15) 645))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_600_is_Even", "language": "clj", "prompt": "(defn is_Even\n  \"\tWrite a python function to check whether the given number is even or not.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Even)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1) false))\n  (is (= (candidate 2) true))\n  (is (= (candidate 3) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_602_first_repeated_char", "language": "clj", "prompt": "(defn first_repeated_char\n  \"\tWrite a python function to find the first repeated character in a given string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_repeated_char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abcabc\") \"a\"))\n  (is (= (candidate \"abc\") nil))\n  (is (= (candidate \"123123\") \"1\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_603_get_ludic", "language": "clj", "prompt": "(defn get_ludic\n  \"\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_ludic)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) [1 2 3 5 7]))\n  (is (= (candidate 25) [1 2 3 5 7 11 13 17 23 25]))\n  (is (= (candidate 45) [1 2 3 5 7 11 13 17 23 25 29 37 41 43]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_604_reverse_words", "language": "clj", "prompt": "(defn reverse_words\n  \"\tWrite a function to reverse words seperated by spaces in a given string.\"\n  [s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_words)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python program\") \"program python\"))\n  (is (= (candidate \"java language\") \"language java\"))\n  (is (= (candidate \"indian man\") \"man indian\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_605_prime_num", "language": "clj", "prompt": "(defn prime_num\n  \"\tWrite a function to check if the given integer is a prime number.\"\n  [num]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate prime_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 13) true))\n  (is (= (candidate 7) true))\n  (is (= (candidate -1010) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_606_radian_degree", "language": "clj", "prompt": "(defn radian_degree\n  \"\tWrite a function to convert degrees to radians.\"\n  [degree]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate radian_degree)\n\n(deftest test-humaneval\n\n  (is (= (candidate 90) 1.5707963267948966))\n  (is (= (candidate 60) 1.0471975511965976))\n  (is (= (candidate 120) 2.0943951023931953))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_607_find_literals", "language": "clj", "prompt": "(defn find_literals\n  \"\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\"\n  [text pattern]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_literals)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") [\"fox\" 16 19]))\n  (is (= (candidate \"Its been a very crazy procedure right\" \"crazy\") [\"crazy\" 16 21]))\n  (is (= (candidate \"Hardest choices required strongest will\" \"will\") [\"will\" 35 39]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_608_bell_Number", "language": "clj", "prompt": "(defn bell_Number\n  \"\tWrite a python function to find nth bell number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bell_Number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 2))\n  (is (= (candidate 3) 5))\n  (is (= (candidate 4) 15))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_610_remove_kth_element", "language": "clj", "prompt": "(defn remove_kth_element\n  \"\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\"\n  [list1 L]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_kth_element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 3 4 4 5 1] 3) [1 1 3 4 4 5 1]))\n  (is (= (candidate [0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4] 4) [0 0 1 3 4 4 5 6 6 6 7 8 9 4 4]))\n  (is (= (candidate [10 10 15 19 18 18 17 26 26 17 18 10] 5) [10 10 15 19 18 17 26 26 17 18 10]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_611_max_of_nth", "language": "clj", "prompt": "(defn max_of_nth\n  \"\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\"\n  [test_list N]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_of_nth)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[5 6 7] [1 3 5] [8 9 19]] 2) 19))\n  (is (= (candidate [[6 7 8] [2 4 6] [9 10 20]] 1) 10))\n  (is (= (candidate [[7 8 9] [3 5 7] [10 11 21]] 1) 11))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_612_merge", "language": "clj", "prompt": "(defn merge\n  \"\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate merge)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"x\" \"y\"] [\"a\" \"b\"] [\"m\" \"n\"]]) [[\"x\" \"a\" \"m\"] [\"y\" \"b\" \"n\"]]))\n  (is (= (candidate [[1 2] [3 4] [5 6] [7 8]]) [[1 3 5 7] [2 4 6 8]]))\n  (is (= (candidate [[\"x\" \"y\" \"z\"] [\"a\" \"b\" \"c\"] [\"m\" \"n\" \"o\"]]) [[\"x\" \"a\" \"m\"] [\"y\" \"b\" \"n\"] [\"z\" \"c\" \"o\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_614_cummulative_sum", "language": "clj", "prompt": "(defn cummulative_sum\n  \"\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate cummulative_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [5 6 7] [2 6]]) 30))\n  (is (= (candidate [[2 4] [6 7 8] [3 7]]) 37))\n  (is (= (candidate [[3 5] [7 8 9] [4 8]]) 44))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_615_average_tuple", "language": "clj", "prompt": "(defn average_tuple\n  \"\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate average_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[10 10 10 12] [30 45 56 45] [81 80 39 32] [1 2 3 4]]) [30.5 34.25 27.0 23.25]))\n  (is (= (candidate [[1 1 -5] [30 -15 56] [81 -60 -39] [-10 2 3]]) [25.5 -18.0 3.75]))\n  (is (= (candidate [[100 100 100 120] [300 450 560 450] [810 800 390 320] [10 20 30 40]]) [305.0 342.5 270.0 232.5]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_616_tuple_modulo", "language": "clj", "prompt": "(defn tuple_modulo\n  \"\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_modulo)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5 6] [5 6 7 5]) [0 4 5 1]))\n  (is (= (candidate [11 5 6 7] [6 7 8 6]) [5 5 6 1]))\n  (is (= (candidate [12 6 7 8] [7 8 9 7]) [5 6 7 1]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_617_min_Jumps", "language": "clj", "prompt": "(defn min_Jumps\n  \"\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\"\n  [steps d]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_Jumps)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4] 11) 3.5))\n  (is (= (candidate [3 4] 0) 0))\n  (is (= (candidate [11 14] 11) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_618_div_list", "language": "clj", "prompt": "(defn div_list\n  \"\tWrite a function to divide two lists element wise.\"\n  [nums1 nums2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate div_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 5 6] [1 2 3]) [4.0 2.5 2.0]))\n  (is (= (candidate [3 2] [1 4]) [3.0 0.5]))\n  (is (= (candidate [90 120] [50 70]) [1.8 1.7142857142857142]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_619_move_num", "language": "clj", "prompt": "(defn move_num\n  \"\tWrite a function to move all the numbers to the end of the given string.\"\n  [test_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate move_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"I1love143you55three3000thousand\") \"Iloveyouthreethousand1143553000\"))\n  (is (= (candidate \"Avengers124Assemble\") \"AvengersAssemble124\"))\n  (is (= (candidate \"Its11our12path13to14see15things16do17things\") \"Itsourpathtoseethingsdothings11121314151617\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_61_count_Substrings", "language": "clj", "prompt": "(defn count_Substrings\n  \"\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\"\n  [s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_Substrings)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"112112\") 6))\n  (is (= (candidate \"111\") 6))\n  (is (= (candidate \"1101112\") 12))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_622_get_median", "language": "clj", "prompt": "(defn get_median\n  \"\tWrite a function to find the median of two sorted lists of same size.\"\n  [arr1 arr2 n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_median)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 12 15 26 38] [2 13 17 30 45] 5) 16.0))\n  (is (= (candidate [2 4 8 9] [7 13 19 28] 4) 8.5))\n  (is (= (candidate [3 6 14 23 36 42] [2 18 27 39 49 55] 6) 25.0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_623_nth_nums", "language": "clj", "prompt": "(defn nth_nums\n  \"\tWrite a function to compute the n-th power of each number in a list.\"\n  [nums n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate nth_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 2) [1 4 9 16 25 36 49 64 81 100]))\n  (is (= (candidate [10 20 30] 3) [1000 8000 27000]))\n  (is (= (candidate [12 15] 5) [248832 759375]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_624_is_upper", "language": "clj", "prompt": "(defn is_upper\n  \"\tWrite a python function to convert a given string to uppercase.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_upper)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"person\") \"PERSON\"))\n  (is (= (candidate \"final\") \"FINAL\"))\n  (is (= (candidate \"Valid\") \"VALID\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_625_swap_List", "language": "clj", "prompt": "(defn swap_List\n  \"\tWrite a python function to interchange the first and last element in a given list.\"\n  [newList]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate swap_List)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) [3 2 1]))\n  (is (= (candidate [1 2 3 4 4]) [4 2 3 4 1]))\n  (is (= (candidate [4 5 6]) [6 5 4]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_626_triangle_area", "language": "clj", "prompt": "(defn triangle_area\n  \"\tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\"\n  [r]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate triangle_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate -1) nil))\n  (is (= (candidate 0) 0))\n  (is (= (candidate 2) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_627_find_First_Missing", "language": "clj", "prompt": "(defn find_First_Missing\n  \"\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\"\n  [array]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_First_Missing)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 1 2 3]) 4))\n  (is (= (candidate [0 1 2 6 9]) 3))\n  (is (= (candidate [2 3 5 8 9]) 0))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_628_replace_spaces", "language": "clj", "prompt": "(defn replace_spaces\n  \"\tWrite a function to replace all spaces in the given string with '%20'.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\"))\n  (is (= (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\"))\n  (is (= (candidate \"I love Coding\") \"I%20love%20Coding\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_629_Split", "language": "clj", "prompt": "(defn Split\n  \"\tWrite a python function to find even numbers from a list of numbers.\"\n  [list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Split)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5]) [2 4]))\n  (is (= (candidate [4 5 6 7 8 0 1]) [4 6 8 0]))\n  (is (= (candidate [8 12 15 19]) [8 12]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_62_smallest_num", "language": "clj", "prompt": "(defn smallest_num\n  \"\tWrite a python function to find smallest number in a list.\"\n  [xs]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate smallest_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 1 45 99]) 1))\n  (is (= (candidate [1 2 3]) 1))\n  (is (= (candidate [45 46 50 60]) 45))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_630_get_coordinates", "language": "clj", "prompt": "(defn get_coordinates\n  \"\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_coordinates)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 4]) [[2 3] [2 4] [2 5] [3 3] [3 4] [3 5] [4 3] [4 4] [4 5]]))\n  (is (= (candidate [4 5]) [[3 4] [3 5] [3 6] [4 4] [4 5] [4 6] [5 4] [5 5] [5 6]]))\n  (is (= (candidate [5 6]) [[4 5] [4 6] [4 7] [5 5] [5 6] [5 7] [6 5] [6 6] [6 7]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_631_replace_spaces", "language": "clj", "prompt": "(defn replace_spaces\n  \"\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Jumanji The Jungle\") \"Jumanji_The_Jungle\"))\n  (is (= (candidate \"The_Avengers\") \"The Avengers\"))\n  (is (= (candidate \"Fast and Furious\") \"Fast_and_Furious\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_632_move_zero", "language": "clj", "prompt": "(defn move_zero\n  \"\tWrite a python function to move all zeroes to the end of the given list.\"\n  [num_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate move_zero)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 0 2 0 3 4]) [1 2 3 4 0 0]))\n  (is (= (candidate [2 3 2 0 0 4 0 5 0]) [2 3 2 4 5 0 0 0 0]))\n  (is (= (candidate [0 1 0 1 1]) [1 1 1 0 0]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_633_pair_xor_Sum", "language": "clj", "prompt": "(defn pair_xor_Sum\n  \"\tWrite a python function to find the sum of xor of all pairs of numbers in the given list.\"\n  [arr n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pair_xor_Sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 9 7 6] 4) 47))\n  (is (= (candidate [7 3 5] 3) 12))\n  (is (= (candidate [7 3] 2) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_635_heap_sort", "language": "clj", "prompt": "(defn heap_sort\n  \"\tWrite a function to sort the given list.\"\n  [iterable]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate heap_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 9 2 4 6 8 0]) [0 1 2 3 4 5 6 7 8 9]))\n  (is (= (candidate [25 35 22 85 14 65 75 25 58]) [14 22 25 25 35 58 65 75 85]))\n  (is (= (candidate [7 1 9 5]) [1 5 7 9]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_637_noprofit_noloss", "language": "clj", "prompt": "(defn noprofit_noloss\n  \"\tWrite a function to check whether the given amount has no profit and no loss\"\n  [actual_cost sale_amount]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate noprofit_noloss)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1500 1200) false))\n  (is (= (candidate 100 100) true))\n  (is (= (candidate 2000 5000) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_638_wind_chill", "language": "clj", "prompt": "(defn wind_chill\n  \"\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\"\n  [v t]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate wind_chill)\n\n(deftest test-humaneval\n\n  (is (= (candidate 120 35) 40))\n  (is (= (candidate 40 20) 19))\n  (is (= (candidate 10 8) 6))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_639_sample_nam", "language": "clj", "prompt": "(defn sample_nam\n  \"\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\"\n  [sample_names]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sample_nam)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\"]) 16))\n  (is (= (candidate [\"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\"]) 10))\n  (is (= (candidate [\"abcd\" \"Python\" \"abba\" \"aba\"]) 6))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_63_max_difference", "language": "clj", "prompt": "(defn max_difference\n  \"\tWrite a function to find the maximum difference between available pairs in the given tuple list.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_difference)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[3 5] [1 7] [10 3] [1 2]]) 7))\n  (is (= (candidate [[4 6] [2 17] [9 13] [11 12]]) 15))\n  (is (= (candidate [[12 35] [21 27] [13 23] [41 22]]) 23))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_640_remove_parenthesis", "language": "clj", "prompt": "(defn remove_parenthesis\n  \"\tWrite a function to remove the parenthesis and what is inbetween them from a string.\"\n  [items]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_parenthesis)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"python (chrome)\"]) \"python\"))\n  (is (= (candidate [\"string(.abc)\"]) \"string\"))\n  (is (= (candidate [\"alpha(num)\"]) \"alpha\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_641_is_nonagonal", "language": "clj", "prompt": "(defn is_nonagonal\n  \"\tWrite a function to find the nth nonagonal number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_nonagonal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 325))\n  (is (= (candidate 15) 750))\n  (is (= (candidate 18) 1089))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "clj", "prompt": "(defn text_match_wordz_middle\n  \"\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_wordz_middle)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"pythonzabc.\") true))\n  (is (= (candidate \"zxyabc.\") false))\n  (is (= (candidate \"  lang  .\") false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "clj", "prompt": "(defn reverse_Array_Upto_K\n  \"\tWrite a python function to reverse an array upto a given position.\"\n  [input k]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate reverse_Array_Upto_K)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6] 4) [4 3 2 1 5 6]))\n  (is (= (candidate [4 5 6 7] 2) [5 4 6 7]))\n  (is (= (candidate [9 8 7 6 5] 3) [7 8 9 6 5]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_64_subject_marks", "language": "clj", "prompt": "(defn subject_marks\n  \"\tWrite a function to sort a list of tuples using the second value of each tuple.\"\n  [subjectmarks]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate subject_marks)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"English\" 88] [\"Science\" 90] [\"Maths\" 97] [\"Social sciences\" 82]]) [[\"Social sciences\" 82] [\"English\" 88] [\"Science\" 90] [\"Maths\" 97]]))\n  (is (= (candidate [[\"Telugu\" 49] [\"Hindhi\" 54] [\"Social\" 33]]) [[\"Social\" 33] [\"Telugu\" 49] [\"Hindhi\" 54]]))\n  (is (= (candidate [[\"Physics\" 96] [\"Chemistry\" 97] [\"Biology\" 45]]) [[\"Biology\" 45] [\"Physics\" 96] [\"Chemistry\" 97]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_65_recursive_list_sum", "language": "clj", "prompt": "(defn recursive_list_sum\n  \"\tWrite a function to flatten a list and sum all of its elements.\"\n  [data_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate recursive_list_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 [3 4] [5 6]]) 21))\n  (is (= (candidate [7 10 [15 14] [19 41]]) 106))\n  (is (= (candidate [10 20 [30 40] [50 60]]) 210))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_66_pos_count", "language": "clj", "prompt": "(defn pos_count\n  \"\tWrite a python function to count the number of positive numbers in a list.\"\n  [list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pos_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 -2 3 -4]) 2))\n  (is (= (candidate [3 4 5 -1]) 3))\n  (is (= (candidate [1 2 3 4]) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_67_bell_number", "language": "clj", "prompt": "(defn bell_number\n  \"\tWrite a function to find the number of ways to partition a set of Bell numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate bell_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 2))\n  (is (= (candidate 10) 115975))\n  (is (= (candidate 56) 6775685320645824322581483068371419745979053216268760300))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_68_is_Monotonic", "language": "clj", "prompt": "(defn is_Monotonic\n  \"\tWrite a python function to check whether the given array is monotonic or not.\"\n  [A]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Monotonic)\n\n(deftest test-humaneval\n\n  (is (= (candidate [6 5 4 4]) true))\n  (is (= (candidate [1 2 2 3]) true))\n  (is (= (candidate [1 3 2]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_69_is_sublist", "language": "clj", "prompt": "(defn is_sublist\n  \"\tWrite a function to check whether a list contains the given sublist or not.\"\n  [l s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_sublist)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 4 3 5 7] [3 7]) false))\n  (is (= (candidate [2 4 3 5 7] [4 3]) true))\n  (is (= (candidate [2 4 3 5 7] [1 6]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "clj", "prompt": "(defn differ_At_One_Bit_Pos\n  \"\tWrite a python function to check whether the two numbers differ at one bit position only or not.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate differ_At_One_Bit_Pos)\n\n(deftest test-humaneval\n\n  (is (= (candidate 13 9) true))\n  (is (= (candidate 15 8) false))\n  (is (= (candidate 2 4) false))\n  (is (= (candidate 2 3) true))\n  (is (= (candidate 5 1) true))\n  (is (= (candidate 1 5) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_70_get_equal", "language": "clj", "prompt": "(defn get_equal\n  \"\tWrite a function to find whether all the given lists have equal length or not.\"\n  [Input]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_equal)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[11 22 33] [44 55 66]]) true))\n  (is (= (candidate [[1 2 3] [4 5 6 7]]) false))\n  (is (= (candidate [[1 2] [3 4]]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_71_comb_sort", "language": "clj", "prompt": "(defn comb_sort\n  \"\tWrite a function to sort a list of elements.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate comb_sort)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 15 37 25 79]) [5 15 25 37 79]))\n  (is (= (candidate [41 32 15 19 22]) [15 19 22 32 41]))\n  (is (= (candidate [99 15 13 47]) [13 15 47 99]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "clj", "prompt": "(defn add_dict_to_tuple\n  \"\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\"\n  [test_tup test_dict]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_dict_to_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [4 5 6] {\"MSAM\" 1 \"is\" 2 \"best\" 3}) [4 5 6 {\"MSAM\" 1 \"is\" 2 \"best\" 3}]))\n  (is (= (candidate [1 2 3] {\"UTS\" 2 \"is\" 3 \"Worst\" 4}) [1 2 3 {\"UTS\" 2 \"is\" 3 \"Worst\" 4}]))\n  (is (= (candidate [8 9 10] {\"POS\" 3 \"is\" 4 \"Okay\" 5}) [8 9 10 {\"POS\" 3 \"is\" 4 \"Okay\" 5}]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_721_maxAverageOfPath", "language": "clj", "prompt": "(defn maxAverageOfPath\n  \"\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\"\n  [cost]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate maxAverageOfPath)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [6 5 4] [7 3 9]]) 5.2))\n  (is (= (candidate [[2 3 4] [7 6 5] [8 4 10]]) 6.2))\n  (is (= (candidate [[3 4 5] [8 7 6] [9 5 11]]) 7.2))\n  (is (= (candidate [[1 2 3] [4 5 6] [7 8 9]]) 5.8))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_722_filter_data", "language": "clj", "prompt": "(defn filter_data\n  \"\tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\"\n  [students h w]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate filter_data)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]} 6.0 70) {\"Cierra Vega\" [6.2 70]}))\n  (is (= (candidate {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]} 5.9 67) {\"Cierra Vega\" [6.2 70] \"Kierra Gentry\" [6.0 68]}))\n  (is (= (candidate {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]} 5.7 64) {\"Cierra Vega\" [6.2 70] \"Alden Cantrell\" [5.9 65] \"Kierra Gentry\" [6.0 68] \"Pierre Cox\" [5.8 66]}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_723_count_same_pair", "language": "clj", "prompt": "(defn count_same_pair\n  \"\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\"\n  [nums1 nums2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_same_pair)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8] [2 2 3 1 2 6 7 9]) 4))\n  (is (= (candidate [0 1 2 -1 -5 6 0 -3 -2 3 4 6 8] [2 1 2 -1 -5 6 4 -3 -2 3 4 6 8]) 11))\n  (is (= (candidate [2 4 -6 -9 11 -12 14 -5 17] [2 1 2 -1 -5 6 4 -3 -2 3 4 6 8]) 1))\n  (is (= (candidate [0 1 1 2] [0 1 2 2]) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_724_power_base_sum", "language": "clj", "prompt": "(defn power_base_sum\n  \"\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\"\n  [base power]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate power_base_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 100) 115))\n  (is (= (candidate 8 10) 37))\n  (is (= (candidate 8 15) 62))\n  (is (= (candidate 3 3) 9))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_725_extract_quotation", "language": "clj", "prompt": "(defn extract_quotation\n  \"\tWrite a function to extract values between quotation marks \" \" of the given string.\"\n  [text1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_quotation)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\") [\"A53\" \"multi\" \"Processor\"]))\n  (is (= (candidate \"Cast your \"favorite\" entertainment \"apps\"\") [\"favorite\" \"apps\"]))\n  (is (= (candidate \"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\") [\"4k Ultra HD\" \"HDR 10\"]))\n  (is (= (candidate \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") []))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_726_multiply_elements", "language": "clj", "prompt": "(defn multiply_elements\n  \"\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate multiply_elements)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 8 10]) [5 35 56 80]))\n  (is (= (candidate [2 4 5 6 7]) [8 20 30 42]))\n  (is (= (candidate [12 13 14 9 15]) [156 182 126 135]))\n  (is (= (candidate [12]) []))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_728_sum_list", "language": "clj", "prompt": "(defn sum_list\n  \"\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\"\n  [lst1 lst2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 20 30] [15 25 35]) [25 45 65]))\n  (is (= (candidate [1 2 3] [5 6 7]) [6 8 10]))\n  (is (= (candidate [15 20 30] [15 45 75]) [30 65 105]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_72_dif_Square", "language": "clj", "prompt": "(defn dif_Square\n  \"\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate dif_Square)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) true))\n  (is (= (candidate 10) false))\n  (is (= (candidate 15) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_730_consecutive_duplicates", "language": "clj", "prompt": "(defn consecutive_duplicates\n  \"\tWrite a function to remove consecutive duplicates of a given list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate consecutive_duplicates)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4]) [0 1 2 3 4 5 6 7 8 9 4]))\n  (is (= (candidate [10 10 15 19 18 18 17 26 26 17 18 10]) [10 15 19 18 17 26 17 18 10]))\n  (is (= (candidate [\"a\" \"a\" \"b\" \"c\" \"d\" \"d\"]) [\"a\" \"b\" \"c\" \"d\"]))\n  (is (= (candidate [\"a\" \"a\" \"b\" \"c\" \"d\" \"d\" \"a\" \"a\"]) [\"a\" \"b\" \"c\" \"d\" \"a\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_731_lateralsurface_cone", "language": "clj", "prompt": "(defn lateralsurface_cone\n  \"\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\"\n  [r h]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lateralsurface_cone)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5 12) 204.20352248333654))\n  (is (= (candidate 10 15) 566.3586699569488))\n  (is (= (candidate 19 17) 1521.8090132193388))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_732_replace_specialchar", "language": "clj", "prompt": "(defn replace_specialchar\n  \"\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate replace_specialchar)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python language, Programming language.\") \"Python:language::Programming:language:\"))\n  (is (= (candidate \"a b c,d e f\") \"a:b:c:d:e:f\"))\n  (is (= (candidate \"ram reshma,ram rahim\") \"ram:reshma:ram:rahim\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_733_find_first_occurrence", "language": "clj", "prompt": "(defn find_first_occurrence\n  \"\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\"\n  [A x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_first_occurrence)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 5 5 5 6 6 8 9 9 9] 5) 1))\n  (is (= (candidate [2 3 5 5 6 6 8 9 9 9] 5) 2))\n  (is (= (candidate [2 4 1 5 6 6 8 9 9 9] 6) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "clj", "prompt": "(defn sum_Of_Subarray_Prod\n  \"\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_Of_Subarray_Prod)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 20))\n  (is (= (candidate [1 2]) 5))\n  (is (= (candidate [1 2 3 4]) 84))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_735_toggle_middle_bits", "language": "clj", "prompt": "(defn toggle_middle_bits\n  \"\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate toggle_middle_bits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 9) 15))\n  (is (= (candidate 10) 12))\n  (is (= (candidate 11) 13))\n  (is (= (candidate 65) 127))\n  (is (= (candidate 77) 115))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_736_left_insertion", "language": "clj", "prompt": "(defn left_insertion\n  \"\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\"\n  [a x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate left_insertion)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 5] 6) 4))\n  (is (= (candidate [1 2 4 5] 3) 2))\n  (is (= (candidate [1 2 4 5] 7) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_737_check_str", "language": "clj", "prompt": "(defn check_str\n  \"\tWrite a function to check whether the given string is starting with a vowel or not using regex.\"\n  [string]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_str)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"annie\") true))\n  (is (= (candidate \"dawood\") false))\n  (is (= (candidate \"Else\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_738_geometric_sum", "language": "clj", "prompt": "(defn geometric_sum\n  \"\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate geometric_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7) 1.9921875))\n  (is (= (candidate 4) 1.9375))\n  (is (= (candidate 8) 1.99609375))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_739_find_Index", "language": "clj", "prompt": "(defn find_Index\n  \"\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Index)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 4))\n  (is (= (candidate 3) 14))\n  (is (= (candidate 4) 45))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_740_tuple_to_dict", "language": "clj", "prompt": "(defn tuple_to_dict\n  \"\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_to_dict)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 10 13 5]) {1 5 7 10 13 5}))\n  (is (= (candidate [1 2 3 4 5 6]) {1 2 3 4 5 6}))\n  (is (= (candidate [7 8 9 10 11 12]) {7 8 9 10 11 12}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_741_all_Characters_Same", "language": "clj", "prompt": "(defn all_Characters_Same\n  \"\tWrite a python function to check whether all the characters are same or not.\"\n  [s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate all_Characters_Same)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python\") false))\n  (is (= (candidate \"aaa\") true))\n  (is (= (candidate \"data\") false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_742_area_tetrahedron", "language": "clj", "prompt": "(defn area_tetrahedron\n  \"\tWrite a function to caluclate the area of a tetrahedron.\"\n  [side]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate area_tetrahedron)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3) 15.588457268119894))\n  (is (= (candidate 20) 692.8203230275509))\n  (is (= (candidate 10) 173.20508075688772))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_743_rotate_right", "language": "clj", "prompt": "(defn rotate_right\n  \"\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\"\n  [list m]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rotate_right)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 3) [8 9 10 1 2 3 4 5 6 7]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 2) [9 10 1 2 3 4 5 6 7 8]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10] 5) [6 7 8 9 10 1 2 3 4 5]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_744_check_none", "language": "clj", "prompt": "(defn check_none\n  \"\tWrite a function to check if the given tuple has any none value or not.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_none)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5 6 nil]) true))\n  (is (= (candidate [7 8 9 11 14]) false))\n  (is (= (candidate [1 2 3 4 nil]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_745_divisible_by_digits", "language": "clj", "prompt": "(defn divisible_by_digits\n  \"\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\"\n  [startnum endnum]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate divisible_by_digits)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 22) [1 2 3 4 5 6 7 8 9 11 12 15 22]))\n  (is (= (candidate 1 15) [1 2 3 4 5 6 7 8 9 11 12 15]))\n  (is (= (candidate 20 25) [22 24]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_746_sector_area", "language": "clj", "prompt": "(defn sector_area\n  \"\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\"\n  [r a]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sector_area)\n\n(deftest test-humaneval\n\n  (is (= (candidate 4 45) 6.283185307179586))\n  (is (= (candidate 9 45) 31.808625617596654))\n  (is (= (candidate 9 361) nil))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_747_lcs_of_three", "language": "clj", "prompt": "(defn lcs_of_three\n  \"\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\"\n  [X Y Z]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate lcs_of_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2))\n  (is (= (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5))\n  (is (= (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_748_capital_words_spaces", "language": "clj", "prompt": "(defn capital_words_spaces\n  \"\tWrite a function to put spaces between words starting with capital letters in a given string.\"\n  [str1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate capital_words_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Python\") \"Python\"))\n  (is (= (candidate \"PythonProgrammingExamples\") \"Python Programming Examples\"))\n  (is (= (candidate \"GetReadyToBeCodingFreak\") \"Get Ready To Be Coding Freak\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_749_sort_numeric_strings", "language": "clj", "prompt": "(defn sort_numeric_strings\n  \"\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\"\n  [nums_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sort_numeric_strings)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"4\" \"12\" \"45\" \"7\" \"0\" \"100\" \"200\" \"-12\" \"-500\"]) [-500 -12 0 4 7 12 45 100 200]))\n  (is (= (candidate [\"2\" \"3\" \"8\" \"4\" \"7\" \"9\" \"8\" \"2\" \"6\" \"5\" \"1\" \"6\" \"1\" \"2\" \"3\" \"4\" \"6\" \"9\" \"1\" \"2\"]) [1 1 1 2 2 2 2 3 3 4 4 5 6 6 6 7 8 8 9 9]))\n  (is (= (candidate [\"1\" \"3\" \"5\" \"7\" \"1\" \"3\" \"13\" \"15\" \"17\" \"5\" \"7 \" \"9\" \"1\" \"11\"]) [1 1 1 3 3 5 5 7 7 9 11 13 15 17]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_74_is_samepatterns", "language": "clj", "prompt": "(defn is_samepatterns\n  \"\tWrite a function to check whether it follows the sequence given in the patterns array.\"\n  [colors patterns]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_samepatterns)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"red\" \"green\" \"green\"] [\"a\" \"b\" \"b\"]) true))\n  (is (= (candidate [\"red\" \"green\" \"greenn\"] [\"a\" \"b\" \"b\"]) false))\n  (is (= (candidate [\"red\" \"green\" \"greenn\"] [\"a\" \"b\"]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_750_add_tuple", "language": "clj", "prompt": "(defn add_tuple\n  \"\tWrite a function to add the given tuple to the given list.\"\n  [test_list test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate add_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [5 6 7] [9 10]) [5 6 7 9 10]))\n  (is (= (candidate [6 7 8] [10 11]) [6 7 8 10 11]))\n  (is (= (candidate [7 8 9] [11 12]) [7 8 9 11 12]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_751_check_min_heap", "language": "clj", "prompt": "(defn check_min_heap\n  \"\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_min_heap)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6]) true))\n  (is (= (candidate [2 3 4 5 10 15]) true))\n  (is (= (candidate [2 10 4 5 3 15]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_752_jacobsthal_num", "language": "clj", "prompt": "(defn jacobsthal_num\n  \"\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate jacobsthal_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 11))\n  (is (= (candidate 2) 1))\n  (is (= (candidate 4) 5))\n  (is (= (candidate 13) 2731))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_753_min_k", "language": "clj", "prompt": "(defn min_k\n  \"\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\"\n  [test_list K]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate min_k)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Manjeet\" 10] [\"Akshat\" 4] [\"Akash\" 2] [\"Nikhil\" 8]] 2) [[\"Akash\" 2] [\"Akshat\" 4]]))\n  (is (= (candidate [[\"Sanjeev\" 11] [\"Angat\" 5] [\"Akash\" 3] [\"Nepin\" 9]] 3) [[\"Akash\" 3] [\"Angat\" 5] [\"Nepin\" 9]]))\n  (is (= (candidate [[\"tanmay\" 14] [\"Amer\" 11] [\"Ayesha\" 9] [\"SKD\" 16]] 1) [[\"Ayesha\" 9]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_754_extract_index_list", "language": "clj", "prompt": "(defn extract_index_list\n  \"\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\"\n  [l1 l2 l3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate extract_index_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 3 4 5 6 7] [0 1 2 3 4 5 7] [0 1 2 3 4 5 7]) [1 7]))\n  (is (= (candidate [1 1 3 4 5 6 7] [0 1 2 3 4 6 5] [0 1 2 3 4 6 7]) [1 6]))\n  (is (= (candidate [1 1 3 4 6 5 6] [0 1 2 3 4 5 7] [0 1 2 3 4 5 7]) [1 5]))\n  (is (= (candidate [1 2 3 4 6 6 6] [0 1 2 3 4 5 7] [0 1 2 3 4 5 7]) []))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_755_second_smallest", "language": "clj", "prompt": "(defn second_smallest\n  \"\tWrite a function to find the second smallest number in a list.\"\n  [numbers]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate second_smallest)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 -8 -2 0 -2]) -2))\n  (is (= (candidate [1 1 -0.5 0 2 -2 -2]) -0.5))\n  (is (= (candidate [2 2]) nil))\n  (is (= (candidate [2 2 2]) nil))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_756_text_match_zero_one", "language": "clj", "prompt": "(defn text_match_zero_one\n  \"\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_zero_one)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abbbba\") true))\n  (is (= (candidate \"dsabbbba\") true))\n  (is (= (candidate \"asbbbba\") false))\n  (is (= (candidate \"abaaa\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_757_count_reverse_pairs", "language": "clj", "prompt": "(defn count_reverse_pairs\n  \"\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_reverse_pairs)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"julia\" \"best\" \"tseb\" \"for\" \"ailuj\"]) 2))\n  (is (= (candidate [\"geeks\" \"best\" \"for\" \"skeeg\"]) 1))\n  (is (= (candidate [\"makes\" \"best\" \"sekam\" \"for\" \"rof\"]) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_759_is_decimal", "language": "clj", "prompt": "(defn is_decimal\n  \"\tWrite a function to check whether a given string is a decimal number with a precision of 2.\"\n  [num]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_decimal)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"123.11\") true))\n  (is (= (candidate \"e666.86\") false))\n  (is (= (candidate \"3.124587\") false))\n  (is (= (candidate \"1.11\") true))\n  (is (= (candidate \"1.1.11\") false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_75_find_tuples", "language": "clj", "prompt": "(defn find_tuples\n  \"\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\"\n  [test_list K]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_tuples)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[6 24 12] [7 9 6] [12 18 21]] 6) [[6 24 12]]))\n  (is (= (candidate [[5 25 30] [4 2 3] [7 8 9]] 5) [[5 25 30]]))\n  (is (= (candidate [[7 9 16] [8 16 4] [19 17 18]] 4) [[8 16 4]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_760_unique_Element", "language": "clj", "prompt": "(defn unique_Element\n  \"\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate unique_Element)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 1]) true))\n  (is (= (candidate [1 2 1 2]) false))\n  (is (= (candidate [1 2 3 4 5]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_762_check_monthnumber_number", "language": "clj", "prompt": "(defn check_monthnumber_number\n  \"\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\"\n  [monthnum3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_monthnumber_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 6) true))\n  (is (= (candidate 2) false))\n  (is (= (candidate 12) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_763_find_min_diff", "language": "clj", "prompt": "(defn find_min_diff\n  \"\tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\"\n  [arr n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_min_diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 3 19 18 25] 6) 1))\n  (is (= (candidate [4 3 2 6] 4) 1))\n  (is (= (candidate [30 5 20 9] 4) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_764_number_ctr", "language": "clj", "prompt": "(defn number_ctr\n  \"\tWrite a python function to count number of digits in a given string.\"\n  [str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate number_ctr)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"program2bedone\") 1))\n  (is (= (candidate \"3wonders\") 1))\n  (is (= (candidate \"123\") 3))\n  (is (= (candidate \"3wond-1ers2\") 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_765_is_polite", "language": "clj", "prompt": "(defn is_polite\n  \"\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_polite)\n\n(deftest test-humaneval\n\n  (is (= (candidate 7) 11))\n  (is (= (candidate 4) 7))\n  (is (= (candidate 9) 13))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_766_pair_wise", "language": "clj", "prompt": "(defn pair_wise\n  \"\tWrite a function to return a list of all pairs of consecutive items in a given list.\"\n  [l1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pair_wise)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 2 3 3 4 4 5]) [[1 1] [1 2] [2 3] [3 3] [3 4] [4 4] [4 5]]))\n  (is (= (candidate [1 5 7 9 10]) [[1 5] [5 7] [7 9] [9 10]]))\n  (is (= (candidate [5 1 9 7 10]) [[5 1] [1 9] [9 7] [7 10]]))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [[1 2] [2 3] [3 4] [4 5] [5 6] [6 7] [7 8] [8 9] [9 10]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_767_get_pairs_count", "language": "clj", "prompt": "(defn get_pairs_count\n  \"\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\"\n  [arr sum]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_pairs_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 1 1 1] 2) 6))\n  (is (= (candidate [1 5 7 -1 5] 6) 3))\n  (is (= (candidate [1 -2 3] 1) 1))\n  (is (= (candidate [-1 -2 3] -3) 1))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_769_Diff", "language": "clj", "prompt": "(defn Diff\n  \"\tWrite a python function to get the difference between two lists.\"\n  [li1 li2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 15 20 25 30 35 40] [25 40 35]) [10 20 30 15]))\n  (is (= (candidate [1 2 3 4 5] [6 7 1]) [2 3 4 5 6 7]))\n  (is (= (candidate [1 2 3] [6 7 1]) [2 3 6 7]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_770_odd_num_sum", "language": "clj", "prompt": "(defn odd_num_sum\n  \"\tWrite a python function to find the sum of fourth power of first n odd natural numbers.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_num_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2) 82))\n  (is (= (candidate 3) 707))\n  (is (= (candidate 4) 3108))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_771_check_expression", "language": "clj", "prompt": "(defn check_expression\n  \"\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\"\n  [exp]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_expression)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"{()}[{}]\") true))\n  (is (= (candidate \"{()}[{]\") false))\n  (is (= (candidate \"{()}[{}][]({})\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_772_remove_length", "language": "clj", "prompt": "(defn remove_length\n  \"\tWrite a function to remove all the words with k length in the given string.\"\n  [test_str K]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_length)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"The person is most value tet\" 3) \"person is most value\"))\n  (is (= (candidate \"If you told me about this ok\" 4) \"If you me about ok\"))\n  (is (= (candidate \"Forces of darkeness is come into the play\" 4) \"Forces of darkeness is the\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_773_occurance_substring", "language": "clj", "prompt": "(defn occurance_substring\n  \"\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\"\n  [text pattern]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate occurance_substring)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python programming, python language\" \"python\") [\"python\" 0 6]))\n  (is (= (candidate \"python programming,programming language\" \"programming\") [\"programming\" 7 18]))\n  (is (= (candidate \"python programming,programming language\" \"language\") [\"language\" 31 39]))\n  (is (= (candidate \"c++ programming, c++ language\" \"python\") nil))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_775_odd_position", "language": "clj", "prompt": "(defn odd_position\n  \"\tWrite a python function to check whether every odd index contains odd numbers of a given list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate [2 1 4 3 6 7 6 3]) true))\n  (is (= (candidate [4 1 2]) true))\n  (is (= (candidate [1 2 3]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_776_count_vowels", "language": "clj", "prompt": "(defn count_vowels\n  \"\tWrite a function to count those characters which have vowels as their neighbors in the given string.\"\n  [test_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_vowels)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"bestinstareels\") 7))\n  (is (= (candidate \"partofthejourneyistheend\") 12))\n  (is (= (candidate \"amazonprime\") 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_777_find_sum", "language": "clj", "prompt": "(defn find_sum\n  \"\tWrite a python function to find the sum of non-repeated elements in a given list.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 1 1 4 5 6]) 21))\n  (is (= (candidate [1 10 9 4 2 10 10 45 4]) 71))\n  (is (= (candidate [12 10 9 45 2 10 10 45 10]) 78))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "clj", "prompt": "(defn pack_consecutive_duplicates\n  \"\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate pack_consecutive_duplicates)\n\n(deftest test-humaneval\n\n  (is (= (candidate [0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4]) [[0 0] [1] [2] [3] [4 4] [5] [6 6 6] [7] [8] [9] [4 4]]))\n  (is (= (candidate [10 10 15 19 18 18 17 26 26 17 18 10]) [[10 10] [15] [19] [18 18] [17] [26 26] [17] [18] [10]]))\n  (is (= (candidate [\"a\" \"a\" \"b\" \"c\" \"d\" \"d\"]) [[\"a\" \"a\"] [\"b\"] [\"c\"] [\"d\" \"d\"]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_77_is_Diff", "language": "clj", "prompt": "(defn is_Diff\n  \"\tWrite a python function to find whether a number is divisible by 11.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_Diff)\n\n(deftest test-humaneval\n\n  (is (= (candidate 12345) false))\n  (is (= (candidate 1212112) true))\n  (is (= (candidate 1212) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_780_find_combinations", "language": "clj", "prompt": "(defn find_combinations\n  \"\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_combinations)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[2 4] [6 7] [5 1] [6 10]]) [[8 11] [7 5] [8 14] [11 8] [12 17] [11 11]]))\n  (is (= (candidate [[3 5] [7 8] [6 2] [7 11]]) [[10 13] [9 7] [10 16] [13 10] [14 19] [13 13]]))\n  (is (= (candidate [[4 6] [8 9] [7 3] [8 12]]) [[12 15] [11 9] [12 18] [15 12] [16 21] [15 15]]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_781_count_divisors", "language": "clj", "prompt": "(defn count_divisors\n  \"\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_divisors)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) true))\n  (is (= (candidate 100) false))\n  (is (= (candidate 125) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_782_odd_length_sum", "language": "clj", "prompt": "(defn odd_length_sum\n  \"\tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate odd_length_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4]) 14))\n  (is (= (candidate [1 2 1 2]) 15))\n  (is (= (candidate [1 7]) 8))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_783_rgb_to_hsv", "language": "clj", "prompt": "(defn rgb_to_hsv\n  \"\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\"\n  [r g b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate rgb_to_hsv)\n\n(deftest test-humaneval\n\n  (is (= (candidate 255 255 255) [0.0 0.0 100.0]))\n  (is (= (candidate 0 215 0) [120.0 100.0 84.31372549019608]))\n  (is (= (candidate 10 215 110) [149.26829268292684 95.34883720930233 84.31372549019608]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_784_mul_even_odd", "language": "clj", "prompt": "(defn mul_even_odd\n  \"\tWrite a function to find the product of first even and odd number of a given list.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate mul_even_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5 7 4 1 6 8]) 4))\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) 2))\n  (is (= (candidate [1 5 7 9 10]) 10))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_785_tuple_str_int", "language": "clj", "prompt": "(defn tuple_str_int\n  \"\tWrite a function to convert tuple string to integer tuple.\"\n  [test_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tuple_str_int)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"(7, 8, 9)\") [7 8 9]))\n  (is (= (candidate \"(1, 2, 3)\") [1 2 3]))\n  (is (= (candidate \"(4, 5, 6)\") [4 5 6]))\n  (is (= (candidate \"(7, 81, 19)\") [7 81 19]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_786_right_insertion", "language": "clj", "prompt": "(defn right_insertion\n  \"\tWrite a function to locate the right insertion point for a specified value in sorted order.\"\n  [a x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate right_insertion)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 4 5] 6) 4))\n  (is (= (candidate [1 2 4 5] 3) 2))\n  (is (= (candidate [1 2 4 5] 7) 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_787_text_match_three", "language": "clj", "prompt": "(defn text_match_three\n  \"\tWrite a function that matches a string that has an a followed by three 'b'.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_match_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"ac\") false))\n  (is (= (candidate \"dc\") false))\n  (is (= (candidate \"abbbba\") true))\n  (is (= (candidate \"caacabbbba\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_788_new_tuple", "language": "clj", "prompt": "(defn new_tuple\n  \"\tWrite a function to create a new tuple from the given string and list.\"\n  [test_list test_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate new_tuple)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"WEB\" \"is\"] \"best\") [\"WEB\" \"is\" \"best\"]))\n  (is (= (candidate [\"We\" \"are\"] \"Developers\") [\"We\" \"are\" \"Developers\"]))\n  (is (= (candidate [\"Part\" \"is\"] \"Wrong\") [\"Part\" \"is\" \"Wrong\"]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_790_even_position", "language": "clj", "prompt": "(defn even_position\n  \"\tWrite a python function to check whether every even index contains even numbers of a given list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate even_position)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 2 1]) false))\n  (is (= (candidate [1 2 3]) false))\n  (is (= (candidate [2 1 4]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_791_remove_nested", "language": "clj", "prompt": "(defn remove_nested\n  \"\tWrite a function to remove tuples from the given tuple.\"\n  [test_tup]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_nested)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 5 7 [4 6] 10]) [1 5 7 10]))\n  (is (= (candidate [2 6 8 [5 7] 11]) [2 6 8 11]))\n  (is (= (candidate [3 7 9 [6 8] 12]) [3 7 9 12]))\n  (is (= (candidate [3 7 9 [6 8] [5 12] 12]) [3 7 9 12]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_792_count_list", "language": "clj", "prompt": "(defn count_list\n  \"\tWrite a python function to count the number of lists in a given number of lists.\"\n  [input_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 3] [5 7] [9 11] [13 15 17]]) 4))\n  (is (= (candidate [[1 2] [2 3] [4 5]]) 3))\n  (is (= (candidate [[1 0] [2 0]]) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_793_last", "language": "clj", "prompt": "(defn last\n  \"\tWrite a python function to find the last position of an element in a sorted array.\"\n  [arr x]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate last)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] 1) 0))\n  (is (= (candidate [1 1 1 2 3 4] 1) 2))\n  (is (= (candidate [2 3 2 3 6 8 9] 3) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_794_text_starta_endb", "language": "clj", "prompt": "(defn text_starta_endb\n  \"\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate text_starta_endb)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aabbbb\") true))\n  (is (= (candidate \"aabAbbbc\") false))\n  (is (= (candidate \"accddbbjjj\") false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_796_return_sum", "language": "clj", "prompt": "(defn return_sum\n  \"\tWrite function to find the sum of all items in the given dictionary.\"\n  [dict]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate return_sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"a\" 100 \"b\" 200 \"c\" 300}) 600))\n  (is (= (candidate {\"a\" 25 \"b\" 18 \"c\" 45}) 88))\n  (is (= (candidate {\"a\" 36 \"b\" 39 \"c\" 49}) 124))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_797_sum_in_range", "language": "clj", "prompt": "(defn sum_in_range\n  \"\tWrite a python function to find the sum of all odd natural numbers within the range l and r.\"\n  [l r]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sum_in_range)\n\n(deftest test-humaneval\n\n  (is (= (candidate 2 5) 8))\n  (is (= (candidate 5 7) 12))\n  (is (= (candidate 7 13) 40))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_798__sum", "language": "clj", "prompt": "(defn _sum\n  \"\tWrite a python function to find the sum of an array.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate _sum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) 6))\n  (is (= (candidate [15 12 13 10]) 50))\n  (is (= (candidate [0 1 2]) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_799_left_rotate", "language": "clj", "prompt": "(defn left_rotate\n  \"\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\"\n  [n d]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate left_rotate)\n\n(deftest test-humaneval\n\n  (is (= (candidate 16 2) 64))\n  (is (= (candidate 10 2) 40))\n  (is (= (candidate 99 3) 792))\n  (is (= (candidate 99 3) 792))\n  (is (= (candidate 1 3) 8))\n  (is (= (candidate 5 3) 40))\n  (is (= (candidate 29 3) 232))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_79_word_len", "language": "clj", "prompt": "(defn word_len\n  \"\tWrite a python function to check whether the length of the word is odd or not.\"\n  [s]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate word_len)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"Hadoop\") false))\n  (is (= (candidate \"great\") true))\n  (is (= (candidate \"structure\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_800_remove_all_spaces", "language": "clj", "prompt": "(defn remove_all_spaces\n  \"\tWrite a function to remove all whitespaces from a string.\"\n  [text]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate remove_all_spaces)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"python  program\") \"pythonprogram\"))\n  (is (= (candidate \"python   programming    language\") \"pythonprogramminglanguage\"))\n  (is (= (candidate \"python                     program\") \"pythonprogram\"))\n  (is (= (candidate \"   python                     program\") \"pythonprogram\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_801_test_three_equal", "language": "clj", "prompt": "(defn test_three_equal\n  \"\tWrite a python function to count the number of equal numbers from three given integers.\"\n  [x y z]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate test_three_equal)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1 1 1) 3))\n  (is (= (candidate -1 -2 -3) 0))\n  (is (= (candidate 1 2 2) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_802_count_rotation", "language": "clj", "prompt": "(defn count_rotation\n  \"\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate count_rotation)\n\n(deftest test-humaneval\n\n  (is (= (candidate [3 2 1]) 1))\n  (is (= (candidate [4 5 1 2 3]) 2))\n  (is (= (candidate [7 8 9 1 2 3]) 3))\n  (is (= (candidate [1 2 3]) 0))\n  (is (= (candidate [1 3 2]) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_803_is_perfect_square", "language": "clj", "prompt": "(defn is_perfect_square\n  \"\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_perfect_square)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) false))\n  (is (= (candidate 36) true))\n  (is (= (candidate 14) false))\n  (is (= (candidate 196) true))\n  (is (= (candidate 125) false))\n  (is (= (candidate 15625) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_804_is_product_even", "language": "clj", "prompt": "(defn is_product_even\n  \"\tWrite a function to check whether the product of numbers in a list is even or not.\"\n  [arr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_product_even)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3]) true))\n  (is (= (candidate [1 2 1 4]) true))\n  (is (= (candidate [1 1]) false))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_805_max_sum_list", "language": "clj", "prompt": "(defn max_sum_list\n  \"\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\"\n  [lists]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_sum_list)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3] [4 5 6] [10 11 12] [7 8 9]]) [10 11 12]))\n  (is (= (candidate [[3 2 1] [6 5 4] [12 11 10]]) [12 11 10]))\n  (is (= (candidate [[2 3 1]]) [2 3 1]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_806_max_run_uppercase", "language": "clj", "prompt": "(defn max_run_uppercase\n  \"\tWrite a function to find maximum run of uppercase characters in the given string.\"\n  [test_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate max_run_uppercase)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"GeMKSForGERksISBESt\") 5))\n  (is (= (candidate \"PrECIOusMOVemENTSYT\") 6))\n  (is (= (candidate \"GooGLEFluTTER\") 4))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_807_first_odd", "language": "clj", "prompt": "(defn first_odd\n  \"\tWrite a python function to find the first odd number in a given list of numbers.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate first_odd)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 3 5]) 1))\n  (is (= (candidate [2 4 1 3]) 1))\n  (is (= (candidate [8 9 1]) 9))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_808_check_K", "language": "clj", "prompt": "(defn check_K\n  \"\tWrite a function to check if the given tuples contain the k or not.\"\n  [test_tup K]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_K)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 4 5 6 8] 6) true))\n  (is (= (candidate [1 2 3 4 5 6] 7) false))\n  (is (= (candidate [7 8 9 44 11 12] 11) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_809_check_smaller", "language": "clj", "prompt": "(defn check_smaller\n  \"\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\"\n  [test_tup1 test_tup2]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate check_smaller)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3] [2 3 4]) false))\n  (is (= (candidate [4 5 6] [3 4 5]) true))\n  (is (= (candidate [11 12 13] [10 11 12]) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_80_tetrahedral_number", "language": "clj", "prompt": "(defn tetrahedral_number\n  \"\tWrite a function to find the nth tetrahedral number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate tetrahedral_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 5) 35))\n  (is (= (candidate 6) 56))\n  (is (= (candidate 7) 84))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_83_get_Char", "language": "clj", "prompt": "(defn get_Char\n  \"\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\"\n  [strr]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate get_Char)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"abc\") \"f\"))\n  (is (= (candidate \"gfg\") \"t\"))\n  (is (= (candidate \"ab\") \"c\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_84_sequence", "language": "clj", "prompt": "(defn sequence\n  \"\tWrite a function to find the nth number in the newman conway sequence.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate sequence)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 6))\n  (is (= (candidate 2) 1))\n  (is (= (candidate 3) 2))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "clj", "prompt": "(defn centered_hexagonal_number\n  \"\tWrite a function to find nth centered hexagonal number.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate centered_hexagonal_number)\n\n(deftest test-humaneval\n\n  (is (= (candidate 10) 271))\n  (is (= (candidate 2) 7))\n  (is (= (candidate 9) 217))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "clj", "prompt": "(defn merge_dictionaries_three\n  \"\tWrite a function to merge three dictionaries into a single dictionary.\"\n  [dict1 dict2 dict3]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate merge_dictionaries_three)\n\n(deftest test-humaneval\n\n  (is (= (candidate {\"R\" \"Red\" \"B\" \"Black\" \"P\" \"Pink\"} {\"G\" \"Green\" \"W\" \"White\"} {\"O\" \"Orange\" \"W\" \"White\" \"B\" \"Black\"}) {\"B\" \"Black\" \"R\" \"Red\" \"P\" \"Pink\" \"G\" \"Green\" \"W\" \"White\" \"O\" \"Orange\"}))\n  (is (= (candidate {\"R\" \"Red\" \"B\" \"Black\" \"P\" \"Pink\"} {\"G\" \"Green\" \"W\" \"White\"} {\"L\" \"lavender\" \"B\" \"Blue\"}) {\"W\" \"White\" \"P\" \"Pink\" \"B\" \"Black\" \"R\" \"Red\" \"G\" \"Green\" \"L\" \"lavender\"}))\n  (is (= (candidate {\"R\" \"Red\" \"B\" \"Black\" \"P\" \"Pink\"} {\"L\" \"lavender\" \"B\" \"Blue\"} {\"G\" \"Green\" \"W\" \"White\"}) {\"B\" \"Black\" \"P\" \"Pink\" \"R\" \"Red\" \"G\" \"Green\" \"L\" \"lavender\" \"W\" \"White\"}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_88_freq_count", "language": "clj", "prompt": "(defn freq_count\n  \"\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate freq_count)\n\n(deftest test-humaneval\n\n  (is (= (candidate [10 10 10 10 20 20 20 20 40 40 50 50 30]) {10 4 20 4 40 2 50 2 30 1}))\n  (is (= (candidate [1 2 3 4 3 2 4 1 3 1 4]) {1 3 2 2 3 3 4 3}))\n  (is (= (candidate [5 6 7 4 9 10 4 5 6 7 9 5]) {10 1 5 3 6 2 7 2 4 2 9 2}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_89_closest_num", "language": "clj", "prompt": "(defn closest_num\n  \"\tWrite a function to find the closest smaller number than n.\"\n  [N]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate closest_num)\n\n(deftest test-humaneval\n\n  (is (= (candidate 11) 10))\n  (is (= (candidate 7) 6))\n  (is (= (candidate 12) 11))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_8_square_nums", "language": "clj", "prompt": "(defn square_nums\n  \"\tWrite a function to find squares of individual elements in a list.\"\n  [nums]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate square_nums)\n\n(deftest test-humaneval\n\n  (is (= (candidate [1 2 3 4 5 6 7 8 9 10]) [1 4 9 16 25 36 49 64 81 100]))\n  (is (= (candidate [10 20 30]) [100 400 900]))\n  (is (= (candidate [12 15]) [144 225]))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_90_len_log", "language": "clj", "prompt": "(defn len_log\n  \"\tWrite a python function to find the length of the longest word.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate len_log)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"python\" \"PHP\" \"bigdata\"]) 7))\n  (is (= (candidate [\"a\" \"ab\" \"abc\"]) 3))\n  (is (= (candidate [\"small\" \"big\" \"tall\"]) 5))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_91_find_substring", "language": "clj", "prompt": "(defn find_substring\n  \"\tWrite a function to check if a string is present as a substring in a given list of string values.\"\n  [str1 sub_str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_substring)\n\n(deftest test-humaneval\n\n  (is (= (candidate [\"red\" \"black\" \"white\" \"green\" \"orange\"] \"ack\") true))\n  (is (= (candidate [\"red\" \"black\" \"white\" \"green\" \"orange\"] \"abc\") false))\n  (is (= (candidate [\"red\" \"black\" \"white\" \"green\" \"orange\"] \"ange\") true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_92_is_undulating", "language": "clj", "prompt": "(defn is_undulating\n  \"\tWrite a function to check whether the given number is undulating or not.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate is_undulating)\n\n(deftest test-humaneval\n\n  (is (= (candidate 1212121) true))\n  (is (= (candidate 1991) false))\n  (is (= (candidate 121) true))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_93_power", "language": "clj", "prompt": "(defn power\n  \"\tWrite a function to calculate the value of 'a' to the power 'b'.\"\n  [a b]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate power)\n\n(deftest test-humaneval\n\n  (is (= (candidate 3 4) 81))\n  (is (= (candidate 2 3) 8))\n  (is (= (candidate 5 5) 3125))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_94_index_minimum", "language": "clj", "prompt": "(defn index_minimum\n  \"\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\"\n  [test_list]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate index_minimum)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[\"Rash\" 143] [\"Manjeet\" 200] [\"Varsha\" 100]]) \"Varsha\"))\n  (is (= (candidate [[\"Yash\" 185] [\"Dawood\" 125] [\"Sanya\" 175]]) \"Dawood\"))\n  (is (= (candidate [[\"Sai\" 345] [\"Salman\" 145] [\"Ayesha\" 96]]) \"Ayesha\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_95_Find_Min_Length", "language": "clj", "prompt": "(defn Find_Min_Length\n  \"\tWrite a python function to find the length of the smallest list in a list of lists.\"\n  [lst]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate Find_Min_Length)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1] [1 2]]) 1))\n  (is (= (candidate [[1 2] [1 2 3] [1 2 3 4]]) 2))\n  (is (= (candidate [[3 3 3] [4 4 4 4]]) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_96_divisor", "language": "clj", "prompt": "(defn divisor\n  \"\tWrite a python function to find the number of divisors of a given integer.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate divisor)\n\n(deftest test-humaneval\n\n  (is (= (candidate 15) 4))\n  (is (= (candidate 12) 6))\n  (is (= (candidate 9) 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_97_frequency_lists", "language": "clj", "prompt": "(defn frequency_lists\n  \"\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\"\n  [list1]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate frequency_lists)\n\n(deftest test-humaneval\n\n  (is (= (candidate [[1 2 3 2] [4 5 6 2] [7 8 9 5]]) {1 1 2 3 3 1 4 1 5 2 6 1 7 1 8 1 9 1}))\n  (is (= (candidate [[1 2 3 4] [5 6 7 8] [9 10 11 12]]) {1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1}))\n  (is (= (candidate [[20 30 40 17] [18 16 14 13] [10 20 30 40]]) {20 2 30 2 40 2 17 1 18 1 16 1 14 1 13 1 10 1}))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_99_decimal_to_binary", "language": "clj", "prompt": "(defn decimal_to_binary\n  \"\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\"\n  [n]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate decimal_to_binary)\n\n(deftest test-humaneval\n\n  (is (= (candidate 8) \"1000\"))\n  (is (= (candidate 18) \"10010\"))\n  (is (= (candidate 7) \"111\"))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
{"name": "mbpp_9_find_Rotations", "language": "clj", "prompt": "(defn find_Rotations\n  \"\tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\"\n  [str]\n  ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "(require '[clojure.test :refer [deftest is run-test]])\n\n(def candidate find_Rotations)\n\n(deftest test-humaneval\n\n  (is (= (candidate \"aaaa\") 1))\n  (is (= (candidate \"ab\") 2))\n  (is (= (candidate \"abc\") 3))\n)\n\n(run-test test-humaneval)", "stop_tokens": ["\n(def", "\n;", "\n("]}
