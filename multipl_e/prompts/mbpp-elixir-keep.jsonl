{"name": "mbpp_100_next_smallest_palindrome", "language": "elixir", "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndefmodule HumanEval do\n  def candidate(num), do: next_smallest_palindrome(num)\n  def next_smallest_palindrome(num) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_smallest_palindrome' do\n    assert 101 == HumanEval.candidate(99)\n    assert 1331 == HumanEval.candidate(1221)\n    assert 121 == HumanEval.candidate(120)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_101_kth_element", "language": "elixir", "prompt": "# Write a function to find the kth element in the given array using 1-based indexing.\n\ndefmodule HumanEval do\n  def candidate(arr, k), do: kth_element(arr, k)\n  def kth_element(arr, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'kth_element' do\n    assert 3 == HumanEval.candidate([12, 3, 5, 7, 19], 2)\n    assert 8 == HumanEval.candidate([17, 24, 8, 23], 3)\n    assert 36 == HumanEval.candidate([16, 21, 25, 36, 4], 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_102_snake_to_camel", "language": "elixir", "prompt": "# Write a function to convert a snake case string to camel case string.\n\ndefmodule HumanEval do\n  def candidate(word), do: snake_to_camel(word)\n  def snake_to_camel(word) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'snake_to_camel' do\n    assert \"PythonProgram\" == HumanEval.candidate(\"python_program\")\n    assert \"PythonLanguage\" == HumanEval.candidate(\"python_language\")\n    assert \"ProgrammingLanguage\" == HumanEval.candidate(\"programming_language\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_103_eulerian_num", "language": "elixir", "prompt": "# Write a function to find the Eulerian number a(n, m).\n\ndefmodule HumanEval do\n  def candidate(n, m), do: eulerian_num(n, m)\n  def eulerian_num(n, m) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'eulerian_num' do\n    assert 4 == HumanEval.candidate(3, 1)\n    assert 11 == HumanEval.candidate(4, 1)\n    assert 26 == HumanEval.candidate(5, 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_104_sort_sublists", "language": "elixir", "prompt": "# Write a function to sort each sublist of strings in a given list of lists.\n\ndefmodule HumanEval do\n  def candidate(input_list), do: sort_sublists(input_list)\n  def sort_sublists(input_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_sublists' do\n    assert [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]] == HumanEval.candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n    assert [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]] == HumanEval.candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])\n    assert [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]] == HumanEval.candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_105_count", "language": "elixir", "prompt": "# Write a python function to count true booleans in the given list.\n\ndefmodule HumanEval do\n  def candidate(lst), do: count(lst)\n  def count(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count' do\n    assert 2 == HumanEval.candidate([true, false, true])\n    assert 0 == HumanEval.candidate([false, false])\n    assert 3 == HumanEval.candidate([true, true, true])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_106_add_lists", "language": "elixir", "prompt": "# Write a function to append the given list to the given tuples.\n\ndefmodule HumanEval do\n  def candidate(test_list, test_tup), do: add_lists(test_list, test_tup)\n  def add_lists(test_list, test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_lists' do\n    assert {9, 10, 5, 6, 7} == HumanEval.candidate([5, 6, 7], {9, 10})\n    assert {10, 11, 6, 7, 8} == HumanEval.candidate([6, 7, 8], {10, 11})\n    assert {11, 12, 7, 8, 9} == HumanEval.candidate([7, 8, 9], {11, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_108_merge_sorted_list", "language": "elixir", "prompt": "# Write a function to merge three lists into a single sorted list.\n\ndefmodule HumanEval do\n  def candidate(num1, num2, num3), do: merge_sorted_list(num1, num2, num3)\n  def merge_sorted_list(num1, num2, num3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'merge_sorted_list' do\n    assert [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233] == HumanEval.candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n    assert [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12] == HumanEval.candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n    assert [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85] == HumanEval.candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_109_odd_Equivalent", "language": "elixir", "prompt": "# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndefmodule HumanEval do\n  def candidate(s, n), do: odd_Equivalent(s, n)\n  def odd_Equivalent(s, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_Equivalent' do\n    assert 3 == HumanEval.candidate(\"011001\", 6)\n    assert 4 == HumanEval.candidate(\"11011\", 5)\n    assert 2 == HumanEval.candidate(\"1010\", 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_113_check_integer", "language": "elixir", "prompt": "# Write a function to check if a string represents an integer or not.\n\ndefmodule HumanEval do\n  def candidate(text), do: check_integer(text)\n  def check_integer(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_integer' do\n    assert false == HumanEval.candidate(\"python\")\n    assert true == HumanEval.candidate(\"1\")\n    assert true == HumanEval.candidate(\"12345\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_116_tuple_to_int", "language": "elixir", "prompt": "# Write a function to convert a given tuple of positive integers into a single integer.\n\ndefmodule HumanEval do\n  def candidate(nums), do: tuple_to_int(nums)\n  def tuple_to_int(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_to_int' do\n    assert 123 == HumanEval.candidate({1, 2, 3})\n    assert 456 == HumanEval.candidate({4, 5, 6})\n    assert 567 == HumanEval.candidate({5, 6, 7})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_117_list_to_float", "language": "elixir", "prompt": "# Write a function to convert all possible convertible elements in a list of lists to floats.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: list_to_float(test_list)\n  def list_to_float(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'list_to_float' do\n    assert [{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}] == HumanEval.candidate([{\"3\", \"4\"}, {\"1\", \"26.45\"}, {\"7.32\", \"8\"}, {\"4\", \"8\"}])\n    assert [{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}] == HumanEval.candidate([{\"4\", \"4\"}, {\"2\", \"27\"}, {\"4.12\", \"9\"}, {\"7\", \"11\"}])\n    assert [{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}] == HumanEval.candidate([{\"6\", \"78\"}, {\"5\", \"26.45\"}, {\"1.33\", \"4\"}, {\"82\", \"13\"}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_118_string_to_list", "language": "elixir", "prompt": "# Write a function to convert a string to a list of strings split on the space character.\n\ndefmodule HumanEval do\n  def candidate(string), do: string_to_list(string)\n  def string_to_list(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_to_list' do\n    assert [\"python\", \"programming\"] == HumanEval.candidate(\"python programming\")\n    assert [\"lists\", \"tuples\", \"strings\"] == HumanEval.candidate(\"lists tuples strings\")\n    assert [\"write\", \"a\", \"program\"] == HumanEval.candidate(\"write a program\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_119_search", "language": "elixir", "prompt": "# Write a python function to find the element that appears only once in a sorted array.\n\ndefmodule HumanEval do\n  def candidate(arr), do: search(arr)\n  def search(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'search' do\n    assert 3 == HumanEval.candidate([1, 1, 2, 2, 3])\n    assert 8 == HumanEval.candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8])\n    assert 1 == HumanEval.candidate([1, 2, 2, 3, 3, 4, 4])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_11_remove_Occ", "language": "elixir", "prompt": "# Write a python function to remove first and last occurrence of a given character from the string.\n\ndefmodule HumanEval do\n  def candidate(s, ch), do: remove_Occ(s, ch)\n  def remove_Occ(s, ch) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_Occ' do\n    assert \"heo\" == HumanEval.candidate(\"hello\", \"l\")\n    assert \"bcd\" == HumanEval.candidate(\"abcda\", \"a\")\n    assert \"H\" == HumanEval.candidate(\"PHP\", \"P\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_120_max_product_tuple", "language": "elixir", "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: max_product_tuple(list1)\n  def max_product_tuple(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_product_tuple' do\n    assert 36 == HumanEval.candidate([{2, 7}, {2, 6}, {1, 8}, {4, 9}])\n    assert 200 == HumanEval.candidate([{10, 20}, {15, 2}, {5, 10}])\n    assert 484 == HumanEval.candidate([{11, 44}, {10, 15}, {20, 5}, {12, 9}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "elixir", "prompt": "# Write a function to sum all amicable numbers from 1 to a specified number.\n\ndefmodule HumanEval do\n  def candidate(limit), do: amicable_numbers_sum(limit)\n  def amicable_numbers_sum(limit) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'amicable_numbers_sum' do\n    assert 504 == HumanEval.candidate(999)\n    assert 31626 == HumanEval.candidate(9999)\n    assert 0 == HumanEval.candidate(99)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_125_find_length", "language": "elixir", "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndefmodule HumanEval do\n  def candidate(string), do: find_length(string)\n  def find_length(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_length' do\n    assert 6 == HumanEval.candidate(\"11000010001\")\n    assert 1 == HumanEval.candidate(\"10111\")\n    assert 2 == HumanEval.candidate(\"11011101100101\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_126_sum", "language": "elixir", "prompt": "# Write a python function to find the sum of common divisors of two given numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: sum(a, b)\n  def sum(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum' do\n    assert 6 == HumanEval.candidate(10, 15)\n    assert 93 == HumanEval.candidate(100, 150)\n    assert 3 == HumanEval.candidate(4, 6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_127_multiply_int", "language": "elixir", "prompt": "# Write a function to multiply two integers.\n\ndefmodule HumanEval do\n  def candidate(x, y), do: multiply_int(x, y)\n  def multiply_int(x, y) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiply_int' do\n    assert 200 == HumanEval.candidate(10, 20)\n    assert 50 == HumanEval.candidate(5, 10)\n    assert 32 == HumanEval.candidate(4, 8)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_128_long_words", "language": "elixir", "prompt": "# Write a function to find words that are longer than n characters from a given list of words.\n\ndefmodule HumanEval do\n  def candidate(n, str), do: long_words(n, str)\n  def long_words(n, str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'long_words' do\n    assert [\"python\", \"programming\", \"language\"] == HumanEval.candidate(3, \"python is a programming language\")\n    assert [\"writing\", \"program\"] == HumanEval.candidate(2, \"writing a program\")\n    assert [\"sorting\"] == HumanEval.candidate(5, \"sorting list\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_129_magic_square_test", "language": "elixir", "prompt": "# Write a function to calculate whether the matrix is a magic square.\n\ndefmodule HumanEval do\n  def candidate(my_matrix), do: magic_square_test(my_matrix)\n  def magic_square_test(my_matrix) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'magic_square_test' do\n    assert true == HumanEval.candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n    assert true == HumanEval.candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    assert false == HumanEval.candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_12_sort_matrix", "language": "elixir", "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\ndefmodule HumanEval do\n  def candidate(M), do: sort_matrix(M)\n  def sort_matrix(M) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_matrix' do\n    assert [[1, 1, 1], [1, 2, 3], [2, 4, 5]] == HumanEval.candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    assert [[-2, 4, -5], [1, -1, 1], [1, 2, 3]] == HumanEval.candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n    assert [[2, 1, 4], [6, 4, 3], [5, 8, 9]] == HumanEval.candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_130_max_occurrences", "language": "elixir", "prompt": "# Write a function to find the item with maximum frequency in a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: max_occurrences(nums)\n  def max_occurrences(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_occurrences' do\n    assert 2 == HumanEval.candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n    assert 8 == HumanEval.candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18])\n    assert 20 == HumanEval.candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_131_reverse_vowels", "language": "elixir", "prompt": "# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndefmodule HumanEval do\n  def candidate(str1), do: reverse_vowels(str1)\n  def reverse_vowels(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_vowels' do\n    assert \"Python\" == HumanEval.candidate(\"Python\")\n    assert \"ASU\" == HumanEval.candidate(\"USA\")\n    assert \"ab\" == HumanEval.candidate(\"ab\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_132_tup_string", "language": "elixir", "prompt": "# Write a function to convert a list to a string.\n\ndefmodule HumanEval do\n  def candidate(tup1), do: tup_string(tup1)\n  def tup_string(tup1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tup_string' do\n    assert \"exercises\" == HumanEval.candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n    assert \"python\" == HumanEval.candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n    assert \"program\" == HumanEval.candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_133_sum_negativenum", "language": "elixir", "prompt": "# Write a function to calculate the sum of the negative numbers of a given list of numbers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: sum_negativenum(nums)\n  def sum_negativenum(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_negativenum' do\n    assert -32 == HumanEval.candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    assert -52 == HumanEval.candidate([10, 15, -14, 13, -18, 12, -20])\n    assert -894 == HumanEval.candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_135_hexagonal_num", "language": "elixir", "prompt": "# Write a function to find the nth hexagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: hexagonal_num(n)\n  def hexagonal_num(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'hexagonal_num' do\n    assert 190 == HumanEval.candidate(10)\n    assert 45 == HumanEval.candidate(5)\n    assert 91 == HumanEval.candidate(7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "elixir", "prompt": "# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_Sum_Of_Powers_Of_Two(n)\n  def is_Sum_Of_Powers_Of_Two(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Sum_Of_Powers_Of_Two' do\n    assert true == HumanEval.candidate(10)\n    assert false == HumanEval.candidate(7)\n    assert true == HumanEval.candidate(14)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_141_pancake_sort", "language": "elixir", "prompt": "# Write a function to sort a list of elements.\n\ndefmodule HumanEval do\n  def candidate(nums), do: pancake_sort(nums)\n  def pancake_sort(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pancake_sort' do\n    assert [15, 25, 38, 69, 79] == HumanEval.candidate([15, 79, 25, 38, 69])\n    assert [12, 36, 54, 85, 98] == HumanEval.candidate([98, 12, 54, 36, 85])\n    assert [12, 23, 32, 41, 42] == HumanEval.candidate([41, 42, 32, 12, 23])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_142_count_samepair", "language": "elixir", "prompt": "# Write a function to count number items that are identical in the same position of three given lists.\n\ndefmodule HumanEval do\n  def candidate(list1, list2, list3), do: count_samepair(list1, list2, list3)\n  def count_samepair(list1, list2, list3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_samepair' do\n    assert 3 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n    assert 4 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n    assert 5 == HumanEval.candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_143_find_lists", "language": "elixir", "prompt": "# Write a function to find number of lists present in the given list.\n\ndefmodule HumanEval do\n  def candidate(Input), do: find_lists(Input)\n  def find_lists(Input) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_lists' do\n    assert 2 == HumanEval.candidate([[1, 2, 3, 4], [5, 6, 7, 8]])\n    assert 3 == HumanEval.candidate([[1, 2], [3, 4], [5, 6]])\n    assert 1 == HumanEval.candidate([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "elixir", "prompt": "# Write a python function to find the maximum difference between any two elements in a given array.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_Abs_Diff(arr)\n  def max_Abs_Diff(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_Abs_Diff' do\n    assert 4 == HumanEval.candidate([2, 1, 5, 3])\n    assert 8 == HumanEval.candidate([9, 3, 2, 5, 1])\n    assert 2 == HumanEval.candidate([3, 2, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_14_find_Volume", "language": "elixir", "prompt": "# Write a python function to find the volume of a triangular prism.\n\ndefmodule HumanEval do\n  def candidate(l, b, h), do: find_Volume(l, b, h)\n  def find_Volume(l, b, h) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Volume' do\n    assert 240 == HumanEval.candidate(10, 8, 6)\n    assert 6 == HumanEval.candidate(3, 2, 2)\n    assert 1 == HumanEval.candidate(1, 2, 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_160_find_solution", "language": "elixir", "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndefmodule HumanEval do\n  def candidate(a, b, n), do: find_solution(a, b, n)\n  def find_solution(a, b, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_solution' do\n    assert {2, 1} == HumanEval.candidate(2, 3, 7)\n    assert nil == HumanEval.candidate(4, 2, 7)\n    assert {4, 1} == HumanEval.candidate(1, 13, 17)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_161_remove_elements", "language": "elixir", "prompt": "# Write a function to remove all elements from a given list present in another list.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: remove_elements(list1, list2)\n  def remove_elements(list1, list2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_elements' do\n    assert [1, 3, 5, 7, 9, 10] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n    assert [2, 4, 6, 8, 9, 10] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n    assert [1, 2, 3, 4, 6, 8, 9, 10] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_162_sum_series", "language": "elixir", "prompt": "# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_series(n)\n  def sum_series(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_series' do\n    assert 12 == HumanEval.candidate(6)\n    assert 30 == HumanEval.candidate(10)\n    assert 25 == HumanEval.candidate(9)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_164_are_equivalent", "language": "elixir", "prompt": "# Write a function to determine if the sum of the divisors of two integers are the same.\n\ndefmodule HumanEval do\n  def candidate(num1, num2), do: are_equivalent(num1, num2)\n  def are_equivalent(num1, num2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'are_equivalent' do\n    assert false == HumanEval.candidate(36, 57)\n    assert false == HumanEval.candidate(2, 4)\n    assert true == HumanEval.candidate(23, 47)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_165_count_char_position", "language": "elixir", "prompt": "# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndefmodule HumanEval do\n  def candidate(str1), do: count_char_position(str1)\n  def count_char_position(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_char_position' do\n    assert 2 == HumanEval.candidate(\"xbcefg\")\n    assert 3 == HumanEval.candidate(\"ABcED\")\n    assert 5 == HumanEval.candidate(\"AbgdeF\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_166_find_even_pair", "language": "elixir", "prompt": "# Write a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndefmodule HumanEval do\n  def candidate(A), do: find_even_pair(A)\n  def find_even_pair(A) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_even_pair' do\n    assert 4 == HumanEval.candidate([5, 4, 7, 2, 1])\n    assert 9 == HumanEval.candidate([7, 2, 8, 1, 0, 5, 11])\n    assert 1 == HumanEval.candidate([1, 2, 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_167_next_power_of_2", "language": "elixir", "prompt": "# Write a python function to find the smallest power of 2 greater than or equal to n.\n\ndefmodule HumanEval do\n  def candidate(n), do: next_power_of_2(n)\n  def next_power_of_2(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_power_of_2' do\n    assert 1 == HumanEval.candidate(0)\n    assert 8 == HumanEval.candidate(5)\n    assert 32 == HumanEval.candidate(17)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_168_frequency", "language": "elixir", "prompt": "# Write a function to count the number of occurrences of a number in a given list.\n\ndefmodule HumanEval do\n  def candidate(a, x), do: frequency(a, x)\n  def frequency(a, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'frequency' do\n    assert 0 == HumanEval.candidate([1, 2, 3], 4)\n    assert 3 == HumanEval.candidate([1, 2, 2, 3, 3, 3, 4], 3)\n    assert 2 == HumanEval.candidate([0, 1, 2, 3, 1, 2], 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "elixir", "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_lowercase_underscore(text)\n  def text_lowercase_underscore(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_lowercase_underscore' do\n    assert true == HumanEval.candidate(\"aab_cbbbc\")\n    assert false == HumanEval.candidate(\"aab_Abbbc\")\n    assert false == HumanEval.candidate(\"Aaab_abbbc\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_170_sum_range_list", "language": "elixir", "prompt": "# Write a function to find the sum of numbers in a list within a range specified by two indices.\n\ndefmodule HumanEval do\n  def candidate(list1, m, n), do: sum_range_list(list1, m, n)\n  def sum_range_list(list1, m, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_range_list' do\n    assert 29 == HumanEval.candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    assert 16 == HumanEval.candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n    assert 38 == HumanEval.candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "elixir", "prompt": "# Write a function to find the perimeter of a regular pentagon from the length of its sides.\n\ndefmodule HumanEval do\n  def candidate(a), do: perimeter_pentagon(a)\n  def perimeter_pentagon(a) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'perimeter_pentagon' do\n    assert 25 == HumanEval.candidate(5)\n    assert 50 == HumanEval.candidate(10)\n    assert 75 == HumanEval.candidate(15)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_172_count_occurance", "language": "elixir", "prompt": "# Write a function to count the number of occurence of the string 'std' in a given string.\n\ndefmodule HumanEval do\n  def candidate(s), do: count_occurance(s)\n  def count_occurance(s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_occurance' do\n    assert 3 == HumanEval.candidate(\"letstdlenstdporstd\")\n    assert 1 == HumanEval.candidate(\"truststdsolensporsd\")\n    assert 2 == HumanEval.candidate(\"makestdsostdworthit\")\n    assert 1 == HumanEval.candidate(\"stds\")\n    assert 0 == HumanEval.candidate(\"\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_17_square_perimeter", "language": "elixir", "prompt": "# Write a function that returns the perimeter of a square given its side length as input.\n\ndefmodule HumanEval do\n  def candidate(a), do: square_perimeter(a)\n  def square_perimeter(a) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_perimeter' do\n    assert 40 == HumanEval.candidate(10)\n    assert 20 == HumanEval.candidate(5)\n    assert 16 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "elixir", "prompt": "# Write a function to remove characters from the first string which are present in the second string.\n\ndefmodule HumanEval do\n  def candidate(string, second_string), do: remove_dirty_chars(string, second_string)\n  def remove_dirty_chars(string, second_string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_dirty_chars' do\n    assert \"bacuve\" == HumanEval.candidate(\"probasscurve\", \"pros\")\n    assert \"digiidi\" == HumanEval.candidate(\"digitalindia\", \"talent\")\n    assert \"emles\" == HumanEval.candidate(\"exoticmiles\", \"toxic\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_19_test_duplicate", "language": "elixir", "prompt": "# Write a function to find whether a given array of integers contains any duplicate element.\n\ndefmodule HumanEval do\n  def candidate(arraynums), do: test_duplicate(arraynums)\n  def test_duplicate(arraynums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'test_duplicate' do\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 4])\n    assert true == HumanEval.candidate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_20_is_woodall", "language": "elixir", "prompt": "# Write a function to check if the given number is woodball or not.\n\ndefmodule HumanEval do\n  def candidate(x), do: is_woodall(x)\n  def is_woodall(x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_woodall' do\n    assert true == HumanEval.candidate(383)\n    assert false == HumanEval.candidate(254)\n    assert false == HumanEval.candidate(200)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_222_check_type", "language": "elixir", "prompt": "# Write a function to check if all the elements in tuple have same data type or not.\n\ndefmodule HumanEval do\n  def candidate(test_tuple), do: check_type(test_tuple)\n  def check_type(test_tuple) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_type' do\n    assert true == HumanEval.candidate({5, 6, 7, 3, 5, 6})\n    assert false == HumanEval.candidate({1, 2, \"4\"})\n    assert true == HumanEval.candidate({3, 2, 1, 4, 5})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_223_is_majority", "language": "elixir", "prompt": "# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndefmodule HumanEval do\n  def candidate(arr, n, x), do: is_majority(arr, n, x)\n  def is_majority(arr, n, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_majority' do\n    assert true == HumanEval.candidate([1, 2, 3, 3, 3, 3, 10], 7, 3)\n    assert false == HumanEval.candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n    assert true == HumanEval.candidate([1, 1, 1, 2, 2], 5, 1)\n    assert false == HumanEval.candidate([1, 1, 2, 2], 5, 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_224_count_Set_Bits", "language": "elixir", "prompt": "# Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: count_Set_Bits(n)\n  def count_Set_Bits(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Set_Bits' do\n    assert 1 == HumanEval.candidate(2)\n    assert 1 == HumanEval.candidate(4)\n    assert 2 == HumanEval.candidate(6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_226_odd_values_string", "language": "elixir", "prompt": "# Write a python function to remove the characters which have odd index values of a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: odd_values_string(str)\n  def odd_values_string(str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_values_string' do\n    assert \"ace\" == HumanEval.candidate(\"abcdef\")\n    assert \"pto\" == HumanEval.candidate(\"python\")\n    assert \"dt\" == HumanEval.candidate(\"data\")\n    assert \"lms\" == HumanEval.candidate(\"lambs\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_227_min_of_three", "language": "elixir", "prompt": "# Write a function to find minimum of three numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: min_of_three(a, b, c)\n  def min_of_three(a, b, c) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_of_three' do\n    assert 0 == HumanEval.candidate(10, 20, 0)\n    assert 15 == HumanEval.candidate(19, 15, 18)\n    assert -30 == HumanEval.candidate(-10, -20, -30)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "elixir", "prompt": "# Write a python function to check whether all the bits are unset in the given range or not.\n\ndefmodule HumanEval do\n  def candidate(n, l, r), do: all_Bits_Set_In_The_Given_Range(n, l, r)\n  def all_Bits_Set_In_The_Given_Range(n, l, r) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_Bits_Set_In_The_Given_Range' do\n    assert true == HumanEval.candidate(4, 1, 2)\n    assert true == HumanEval.candidate(17, 2, 4)\n    assert false == HumanEval.candidate(39, 4, 6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_229_re_arrange_array", "language": "elixir", "prompt": "# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: re_arrange_array(arr, n)\n  def re_arrange_array(arr, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 're_arrange_array' do\n    assert [-1, -3, -7, 4, 5, 6, 2, 8, 9] == HumanEval.candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n    assert [-14, -26, 12, 13, 15] == HumanEval.candidate([12, -14, -26, 13, 15], 5)\n    assert [-42, -39, -78, 10, 24, 36, 85] == HumanEval.candidate([10, 24, 36, -42, -39, -78, 85], 7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_230_replace_blank", "language": "elixir", "prompt": "# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndefmodule HumanEval do\n  def candidate(str1, char), do: replace_blank(str1, char)\n  def replace_blank(str1, char) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_blank' do\n    assert \"hello@people\" == HumanEval.candidate(\"hello people\", \"@\")\n    assert \"python$program$language\" == HumanEval.candidate(\"python program language\", \"$\")\n    assert \"blank-space\" == HumanEval.candidate(\"blank space\", \"-\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_234_volume_cube", "language": "elixir", "prompt": "# Write a function to find the volume of a cube given its side length.\n\ndefmodule HumanEval do\n  def candidate(l), do: volume_cube(l)\n  def volume_cube(l) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'volume_cube' do\n    assert 27 == HumanEval.candidate(3)\n    assert 8 == HumanEval.candidate(2)\n    assert 125 == HumanEval.candidate(5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_237_check_occurences", "language": "elixir", "prompt": "# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: check_occurences(test_list)\n  def check_occurences(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_occurences' do\n    assert %{{1, 3} => 2, {2, 5} => 2, {3, 6} => 1} == HumanEval.candidate([{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}])\n    assert %{{2, 4} => 2, {3, 6} => 2, {4, 7} => 1} == HumanEval.candidate([{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}])\n    assert %{{2, 13} => 1, {11, 23} => 1, {12, 25} => 2, {16, 23} => 1} == HumanEval.candidate([{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_238_number_of_substrings", "language": "elixir", "prompt": "# Write a python function to count the number of non-empty substrings of a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: number_of_substrings(str)\n  def number_of_substrings(str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'number_of_substrings' do\n    assert 6 == HumanEval.candidate(\"abc\")\n    assert 10 == HumanEval.candidate(\"abcd\")\n    assert 15 == HumanEval.candidate(\"abcde\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "elixir", "prompt": "# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndefmodule HumanEval do\n  def candidate(m, n), do: get_total_number_of_sequences(m, n)\n  def get_total_number_of_sequences(m, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_total_number_of_sequences' do\n    assert 4 == HumanEval.candidate(10, 4)\n    assert 6 == HumanEval.candidate(5, 2)\n    assert 84 == HumanEval.candidate(16, 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_240_replace_list", "language": "elixir", "prompt": "# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: replace_list(list1, list2)\n  def replace_list(list1, list2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_list' do\n    assert [1, 3, 5, 7, 9, 2, 4, 6, 8] == HumanEval.candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n    assert [1, 2, 3, 4, 5, 6, 7, 8] == HumanEval.candidate([1, 2, 3, 4, 5], [5, 6, 7, 8])\n    assert [\"red\", \"blue\", \"yellow\"] == HumanEval.candidate([\"red\", \"blue\", \"green\"], [\"yellow\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_242_count_charac", "language": "elixir", "prompt": "# Write a function to count the total number of characters in a string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: count_charac(str1)\n  def count_charac(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_charac' do\n    assert 18 == HumanEval.candidate(\"python programming\")\n    assert 8 == HumanEval.candidate(\"language\")\n    assert 5 == HumanEval.candidate(\"words\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "elixir", "prompt": "# Write a python function to find the next perfect square greater than a given number.\n\ndefmodule HumanEval do\n  def candidate(N), do: next_Perfect_Square(N)\n  def next_Perfect_Square(N) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'next_Perfect_Square' do\n    assert 36 == HumanEval.candidate(35)\n    assert 9 == HumanEval.candidate(6)\n    assert 16 == HumanEval.candidate(9)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_245_max_sum", "language": "elixir", "prompt": "# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_sum(arr)\n  def max_sum(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sum' do\n    assert 194 == HumanEval.candidate([1, 15, 51, 45, 33, 100, 12, 18, 9])\n    assert 210 == HumanEval.candidate([80, 60, 30, 40, 20, 10])\n    assert 138 == HumanEval.candidate([2, 3, 14, 16, 21, 23, 29, 30])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_247_lps", "language": "elixir", "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: lps(str)\n  def lps(str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lps' do\n    assert 5 == HumanEval.candidate(\"TENS FOR TENS\")\n    assert 7 == HumanEval.candidate(\"CARDIO FOR CARDS\")\n    assert 9 == HumanEval.candidate(\"PART OF THE JOURNEY IS PART\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_249_intersection_array", "language": "elixir", "prompt": "# Write a function to find the intersection of two arrays.\n\ndefmodule HumanEval do\n  def candidate(array_nums1, array_nums2), do: intersection_array(array_nums1, array_nums2)\n  def intersection_array(array_nums1, array_nums2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'intersection_array' do\n    assert [1, 2, 8, 9] == HumanEval.candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n    assert [3, 5, 7, 9] == HumanEval.candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n    assert [10] == HumanEval.candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_250_count_X", "language": "elixir", "prompt": "# Write a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\ndefmodule HumanEval do\n  def candidate(tup, x), do: count_X(tup, x)\n  def count_X(tup, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_X' do\n    assert 0 == HumanEval.candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n    assert 3 == HumanEval.candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n    assert 4 == HumanEval.candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_251_insert_element", "language": "elixir", "prompt": "# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndefmodule HumanEval do\n  def candidate(list, element), do: insert_element(list, element)\n  def insert_element(list, element) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'insert_element' do\n    assert [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"] == HumanEval.candidate([\"Red\", \"Green\", \"Black\"], \"c\")\n    assert [\"program\", \"python\", \"program\", \"java\"] == HumanEval.candidate([\"python\", \"java\"], \"program\")\n    assert [\"laugh\", \"happy\", \"laugh\", \"sad\"] == HumanEval.candidate([\"happy\", \"sad\"], \"laugh\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_252_convert", "language": "elixir", "prompt": "# Write a python function to convert complex numbers to polar coordinates.\n\ndefmodule HumanEval do\n  def candidate(numbers), do: convert(numbers)\n  def convert(numbers) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'convert' do\n    assert {1.0, 0.0} == HumanEval.candidate(1)\n    assert {4.0, 0.0} == HumanEval.candidate(4)\n    assert {5.0, 0.0} == HumanEval.candidate(5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_253_count_integer", "language": "elixir", "prompt": "# Write a python function that returns the number of integer elements in a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: count_integer(list1)\n  def count_integer(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_integer' do\n    assert 2 == HumanEval.candidate([1, 2, \"abc\", 1.2])\n    assert 3 == HumanEval.candidate([1, 2, 3])\n    assert 2 == HumanEval.candidate([1, 1.2, 4, 5.1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_255_combinations_colors", "language": "elixir", "prompt": "# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\ndefmodule HumanEval do\n  def candidate(l, n), do: combinations_colors(l, n)\n  def combinations_colors(l, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'combinations_colors' do\n    assert [[\"Red\"], [\"Green\"], [\"Blue\"]] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\"], 1)\n    assert [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\"], 2)\n    assert [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\"], 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_256_count_Primes_nums", "language": "elixir", "prompt": "# Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndefmodule HumanEval do\n  def candidate(n), do: count_Primes_nums(n)\n  def count_Primes_nums(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Primes_nums' do\n    assert 2 == HumanEval.candidate(5)\n    assert 4 == HumanEval.candidate(10)\n    assert 25 == HumanEval.candidate(100)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_257_swap_numbers", "language": "elixir", "prompt": "# Write a function that takes in two numbers and returns a list with the second number and then the first number.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: swap_numbers(a, b)\n  def swap_numbers(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'swap_numbers' do\n    assert [20, 10] == HumanEval.candidate(10, 20)\n    assert [17, 15] == HumanEval.candidate(15, 17)\n    assert [200, 100] == HumanEval.candidate(100, 200)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_259_maximize_elements", "language": "elixir", "prompt": "# Write a function to maximize the given two lists.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: maximize_elements(test_tup1, test_tup2)\n  def maximize_elements(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maximize_elements' do\n    assert [[6, 7], [4, 9], [2, 9], [7, 10]] == HumanEval.candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    assert [[7, 8], [5, 10], [3, 10], [8, 11]] == HumanEval.candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    assert [[8, 9], [6, 11], [4, 11], [9, 12]] == HumanEval.candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_260_newman_prime", "language": "elixir", "prompt": "# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndefmodule HumanEval do\n  def candidate(n), do: newman_prime(n)\n  def newman_prime(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'newman_prime' do\n    assert 7 == HumanEval.candidate(3)\n    assert 17 == HumanEval.candidate(4)\n    assert 41 == HumanEval.candidate(5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_261_division_elements", "language": "elixir", "prompt": "# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: division_elements(test_tup1, test_tup2)\n  def division_elements(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'division_elements' do\n    assert {2, 2, 2, 3} == HumanEval.candidate({10, 4, 6, 9}, {5, 2, 3, 3})\n    assert {2, 2, 2, 4} == HumanEval.candidate({12, 6, 8, 16}, {6, 3, 4, 4})\n    assert {4, 2, 6, 2} == HumanEval.candidate({20, 14, 36, 18}, {5, 7, 6, 9})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_262_split_two_parts", "language": "elixir", "prompt": "# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndefmodule HumanEval do\n  def candidate(list1, L), do: split_two_parts(list1, L)\n  def split_two_parts(list1, L) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split_two_parts' do\n    assert {[1, 1, 2], [3, 4, 4, 5, 1]} == HumanEval.candidate([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    assert {[\"a\", \"b\"], [\"c\", \"d\"]} == HumanEval.candidate([\"a\", \"b\", \"c\", \"d\"], 2)\n    assert {[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]} == HumanEval.candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_264_dog_age", "language": "elixir", "prompt": "# Write a function to calculate a dog's age in dog's years.\n\ndefmodule HumanEval do\n  def candidate(h_age), do: dog_age(h_age)\n  def dog_age(h_age) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'dog_age' do\n    assert 61 == HumanEval.candidate(12)\n    assert 73 == HumanEval.candidate(15)\n    assert 109 == HumanEval.candidate(24)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_265_list_split", "language": "elixir", "prompt": "# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndefmodule HumanEval do\n  def candidate(S, step), do: list_split(S, step)\n  def list_split(S, step) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'list_split' do\n    assert [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]] == HumanEval.candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3)\n    assert [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n    assert [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]] == HumanEval.candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "elixir", "prompt": "# Write a function to find the lateral surface area of a cube given its side length.\n\ndefmodule HumanEval do\n  def candidate(l), do: lateralsurface_cube(l)\n  def lateralsurface_cube(l) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lateralsurface_cube' do\n    assert 100 == HumanEval.candidate(5)\n    assert 324 == HumanEval.candidate(9)\n    assert 400 == HumanEval.candidate(10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_267_square_Sum", "language": "elixir", "prompt": "# Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: square_Sum(n)\n  def square_Sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_Sum' do\n    assert 10 == HumanEval.candidate(2)\n    assert 35 == HumanEval.candidate(3)\n    assert 84 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_268_find_star_num", "language": "elixir", "prompt": "# Write a function to find the n'th star number.\n\ndefmodule HumanEval do\n  def candidate(n), do: find_star_num(n)\n  def find_star_num(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_star_num' do\n    assert 37 == HumanEval.candidate(3)\n    assert 73 == HumanEval.candidate(4)\n    assert 121 == HumanEval.candidate(5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_269_ascii_value", "language": "elixir", "prompt": "# Write a function to find the ascii value of a character.\n\ndefmodule HumanEval do\n  def candidate(k), do: ascii_value(k)\n  def ascii_value(k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'ascii_value' do\n    assert 65 == HumanEval.candidate(\"A\")\n    assert 82 == HumanEval.candidate(\"R\")\n    assert 83 == HumanEval.candidate(\"S\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "elixir", "prompt": "# Write a python function to find the sum of even numbers at even positions of a list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: sum_even_and_even_index(arr)\n  def sum_even_and_even_index(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_even_and_even_index' do\n    assert 30 == HumanEval.candidate([5, 6, 12, 1, 18, 8])\n    assert 26 == HumanEval.candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18])\n    assert 12 == HumanEval.candidate([5, 6, 12, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_271_even_Power_Sum", "language": "elixir", "prompt": "# Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndefmodule HumanEval do\n  def candidate(n), do: even_Power_Sum(n)\n  def even_Power_Sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_Power_Sum' do\n    assert 1056 == HumanEval.candidate(2)\n    assert 8832 == HumanEval.candidate(3)\n    assert 32 == HumanEval.candidate(1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_272_rear_extract", "language": "elixir", "prompt": "# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: rear_extract(test_list)\n  def rear_extract(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rear_extract' do\n    assert [21, 20, 19] == HumanEval.candidate([{1, \"Rash\", 21}, {2, \"Varsha\", 20}, {3, \"Kil\", 19}])\n    assert [36, 25, 45] == HumanEval.candidate([{1, \"Sai\", 36}, {2, \"Ayesha\", 25}, {3, \"Salman\", 45}])\n    assert [14, 36, 56] == HumanEval.candidate([{1, \"Sudeep\", 14}, {2, \"Vandana\", 36}, {3, \"Dawood\", 56}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_273_substract_elements", "language": "elixir", "prompt": "# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: substract_elements(test_tup1, test_tup2)\n  def substract_elements(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'substract_elements' do\n    assert {8, -1, -13} == HumanEval.candidate({10, 4, 5}, {2, 5, 18})\n    assert {-13, -43, -13} == HumanEval.candidate({11, 2, 3}, {24, 45, 16})\n    assert {-3, 7, -3} == HumanEval.candidate({7, 18, 9}, {10, 11, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "elixir", "prompt": "# Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndefmodule HumanEval do\n  def candidate(n), do: even_binomial_Coeff_Sum(n)\n  def even_binomial_Coeff_Sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_binomial_Coeff_Sum' do\n    assert 8 == HumanEval.candidate(4)\n    assert 32 == HumanEval.candidate(6)\n    assert 2 == HumanEval.candidate(2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_277_dict_filter", "language": "elixir", "prompt": "# Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndefmodule HumanEval do\n  def candidate(dict, n), do: dict_filter(dict, n)\n  def dict_filter(dict, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'dict_filter' do\n    assert %{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190} == HumanEval.candidate(%{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170)\n    assert %{\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190} == HumanEval.candidate(%{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180)\n    assert %{\"Pierre Cox\" => 190} == HumanEval.candidate(%{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_278_count_first_elements", "language": "elixir", "prompt": "# Write a function to find the number of elements that occurs before the list element in the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: count_first_elements(test_tup)\n  def count_first_elements(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_first_elements' do\n    assert 3 == HumanEval.candidate([1, 5, 7, {4, 6}, 10])\n    assert 2 == HumanEval.candidate([2, 9, {5, 7}, 11])\n    assert 4 == HumanEval.candidate([11, 15, 5, 8, {2, 3}, 8])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_279_is_num_decagonal", "language": "elixir", "prompt": "# Write a function to find the nth decagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_num_decagonal(n)\n  def is_num_decagonal(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_num_decagonal' do\n    assert 27 == HumanEval.candidate(3)\n    assert 175 == HumanEval.candidate(7)\n    assert 370 == HumanEval.candidate(10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_280_sequential_search", "language": "elixir", "prompt": "# Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndefmodule HumanEval do\n  def candidate(dlist, item), do: sequential_search(dlist, item)\n  def sequential_search(dlist, item) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sequential_search' do\n    assert {true, 3} == HumanEval.candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n    assert {true, 7} == HumanEval.candidate([12, 32, 45, 62, 35, 47, 44, 61], 61)\n    assert {true, 6} == HumanEval.candidate([9, 10, 17, 19, 22, 39, 48, 56], 48)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_281_all_unique", "language": "elixir", "prompt": "# Write a python function to check if the elements of a given list are unique or not.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: all_unique(test_list)\n  def all_unique(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_unique' do\n    assert true == HumanEval.candidate([1, 2, 3])\n    assert false == HumanEval.candidate([1, 2, 1, 2])\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_282_sub_list", "language": "elixir", "prompt": "# Write a function to subtract two lists element-wise.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2), do: sub_list(nums1, nums2)\n  def sub_list(nums1, nums2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sub_list' do\n    assert [-3, -3, -3] == HumanEval.candidate([1, 2, 3], [4, 5, 6])\n    assert [-2, -2] == HumanEval.candidate([1, 2], [3, 4])\n    assert [40, 50] == HumanEval.candidate([90, 120], [50, 70])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_283_validate", "language": "elixir", "prompt": "# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndefmodule HumanEval do\n  def candidate(n), do: validate(n)\n  def validate(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'validate' do\n    assert true == HumanEval.candidate(1234)\n    assert false == HumanEval.candidate(51241)\n    assert true == HumanEval.candidate(321)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_284_check_element", "language": "elixir", "prompt": "# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndefmodule HumanEval do\n  def candidate(list, element), do: check_element(list, element)\n  def check_element(list, element) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_element' do\n    assert false == HumanEval.candidate([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n    assert false == HumanEval.candidate([1, 2, 3, 4], 7)\n    assert true == HumanEval.candidate([\"green\", \"green\", \"green\", \"green\"], \"green\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_285_text_match_two_three", "language": "elixir", "prompt": "# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_two_three(text)\n  def text_match_two_three(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_two_three' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abbbba\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "elixir", "prompt": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndefmodule HumanEval do\n  def candidate(a, n, k), do: max_sub_array_sum_repeated(a, n, k)\n  def max_sub_array_sum_repeated(a, n, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sub_array_sum_repeated' do\n    assert 30 == HumanEval.candidate([10, 20, -30, -1], 4, 3)\n    assert 59 == HumanEval.candidate([-1, 10, 20], 3, 2)\n    assert -1 == HumanEval.candidate([-1, -2, -3], 3, 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_287_square_Sum", "language": "elixir", "prompt": "# Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: square_Sum(n)\n  def square_Sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_Sum' do\n    assert 20 == HumanEval.candidate(2)\n    assert 56 == HumanEval.candidate(3)\n    assert 120 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_290_max_length", "language": "elixir", "prompt": "# Write a function to find the list of maximum length in a list of lists.\n\ndefmodule HumanEval do\n  def candidate(list1), do: max_length(list1)\n  def max_length(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_length' do\n    assert {3, [13, 15, 17]} == HumanEval.candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    assert {4, [10, 12, 14, 15]} == HumanEval.candidate([[1], [5, 7], [10, 12, 14, 15]])\n    assert {3, [15, 20, 25]} == HumanEval.candidate([[5], [15, 20, 25]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_291_count_no_of_ways", "language": "elixir", "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndefmodule HumanEval do\n  def candidate(n, k), do: count_no_of_ways(n, k)\n  def count_no_of_ways(n, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_no_of_ways' do\n    assert 16 == HumanEval.candidate(2, 4)\n    assert 6 == HumanEval.candidate(3, 2)\n    assert 228 == HumanEval.candidate(4, 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_292_find", "language": "elixir", "prompt": "# Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndefmodule HumanEval do\n  def candidate(n, m), do: find(n, m)\n  def find(n, m) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find' do\n    assert 3 == HumanEval.candidate(10, 3)\n    assert 2 == HumanEval.candidate(4, 2)\n    assert 4 == HumanEval.candidate(20, 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_293_otherside_rightangle", "language": "elixir", "prompt": "# Write a function to find the third side of a right angled triangle.\n\ndefmodule HumanEval do\n  def candidate(w, h), do: otherside_rightangle(w, h)\n  def otherside_rightangle(w, h) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'otherside_rightangle' do\n    assert 10.63014581273465 == HumanEval.candidate(7, 8)\n    assert 5 == HumanEval.candidate(3, 4)\n    assert 16.55294535724685 == HumanEval.candidate(7, 15)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_294_max_val", "language": "elixir", "prompt": "# Write a function to find the maximum value in a given heterogeneous list.\n\ndefmodule HumanEval do\n  def candidate(listval), do: max_val(listval)\n  def max_val(listval) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_val' do\n    assert 5 == HumanEval.candidate([\"Python\", 3, 2, 4, 5, \"version\"])\n    assert 25 == HumanEval.candidate([\"Python\", 15, 20, 25])\n    assert 50 == HumanEval.candidate([\"Python\", 30, 20, 40, 50, \"version\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_295_sum_div", "language": "elixir", "prompt": "# Write a function to return the sum of all divisors of a number.\n\ndefmodule HumanEval do\n  def candidate(number), do: sum_div(number)\n  def sum_div(number) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_div' do\n    assert 7 == HumanEval.candidate(8)\n    assert 16 == HumanEval.candidate(12)\n    assert 1 == HumanEval.candidate(7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_296_get_Inv_Count", "language": "elixir", "prompt": "# Write a python function to count inversions in an array.\n\ndefmodule HumanEval do\n  def candidate(arr), do: get_Inv_Count(arr)\n  def get_Inv_Count(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_Inv_Count' do\n    assert 5 == HumanEval.candidate([1, 20, 6, 4, 5])\n    assert 1 == HumanEval.candidate([1, 2, 1])\n    assert 3 == HumanEval.candidate([1, 2, 5, 6, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_297_flatten_list", "language": "elixir", "prompt": "# Write a function to flatten a given nested list structure.\n\ndefmodule HumanEval do\n  def candidate(list1), do: flatten_list(list1)\n  def flatten_list(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'flatten_list' do\n    assert [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120] == HumanEval.candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    assert [10, 20, 40, 30, 56, 25, 10, 20, 33, 40] == HumanEval.candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    assert [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9] == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_299_max_aggregate", "language": "elixir", "prompt": "# Write a function to calculate the maximum aggregate from the list of tuples.\n\ndefmodule HumanEval do\n  def candidate(stdata), do: max_aggregate(stdata)\n  def max_aggregate(stdata) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_aggregate' do\n    assert {\"Juan Whelan\", 212} == HumanEval.candidate([{\"Juan Whelan\", 90}, {\"Sabah Colley\", 88}, {\"Peter Nichols\", 7}, {\"Juan Whelan\", 122}, {\"Sabah Colley\", 84}])\n    assert {\"Juan Whelan\", 72} == HumanEval.candidate([{\"Juan Whelan\", 50}, {\"Sabah Colley\", 48}, {\"Peter Nichols\", 37}, {\"Juan Whelan\", 22}, {\"Sabah Colley\", 14}])\n    assert {\"Sabah Colley\", 70} == HumanEval.candidate([{\"Juan Whelan\", 10}, {\"Sabah Colley\", 20}, {\"Peter Nichols\", 30}, {\"Juan Whelan\", 40}, {\"Sabah Colley\", 50}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_304_find_Element", "language": "elixir", "prompt": "# Write a python function to find element at a given index after number of rotations.\n\ndefmodule HumanEval do\n  def candidate(arr, ranges, rotations, index), do: find_Element(arr, ranges, rotations, index)\n  def find_Element(arr, ranges, rotations, index) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Element' do\n    assert 3 == HumanEval.candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n    assert 3 == HumanEval.candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n    assert 1 == HumanEval.candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_305_start_withp", "language": "elixir", "prompt": "# Write a function to return two words from a list of words starting with letter 'p'.\n\ndefmodule HumanEval do\n  def candidate(words), do: start_withp(words)\n  def start_withp(words) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'start_withp' do\n    assert {\"Python\", \"PHP\"} == HumanEval.candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n    assert {\"Python\", \"Programming\"} == HumanEval.candidate([\"Python Programming\", \"Java Programming\"])\n    assert {\"Pqrst\", \"Pqr\"} == HumanEval.candidate([\"Pqrst Pqr\", \"qrstuv\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "elixir", "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\ndefmodule HumanEval do\n  def candidate(a, n, index, k), do: max_sum_increasing_subseq(a, n, index, k)\n  def max_sum_increasing_subseq(a, n, index, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sum_increasing_subseq' do\n    assert 11 == HumanEval.candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n    assert 7 == HumanEval.candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n    assert 71 == HumanEval.candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_308_large_product", "language": "elixir", "prompt": "# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2, N), do: large_product(nums1, nums2, N)\n  def large_product(nums1, nums2, N) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'large_product' do\n    assert [60, 54, 50] == HumanEval.candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n    assert [60, 54, 50, 48] == HumanEval.candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n    assert [60, 54, 50, 48, 45] == HumanEval.candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_309_maximum", "language": "elixir", "prompt": "# Write a python function to find the maximum of two numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: maximum(a, b)\n  def maximum(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maximum' do\n    assert 10 == HumanEval.candidate(5, 10)\n    assert -1 == HumanEval.candidate(-1, -2)\n    assert 9 == HumanEval.candidate(9, 7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_310_string_to_tuple", "language": "elixir", "prompt": "# Write a function to convert a given string to a list of characters.\n\ndefmodule HumanEval do\n  def candidate(str1), do: string_to_tuple(str1)\n  def string_to_tuple(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'string_to_tuple' do\n    assert [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"] == HumanEval.candidate(\"python 3.0\")\n    assert [\"i\", \"t\", \"e\", \"m\", \"1\"] == HumanEval.candidate(\"item1\")\n    assert [\"1\", \"5\", \".\", \"1\", \"0\"] == HumanEval.candidate(\"15.10\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "elixir", "prompt": "# Write a python function to find the highest power of 2 that is less than or equal to n.\n\ndefmodule HumanEval do\n  def candidate(n), do: highest_Power_of_2(n)\n  def highest_Power_of_2(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'highest_Power_of_2' do\n    assert 8 == HumanEval.candidate(10)\n    assert 16 == HumanEval.candidate(19)\n    assert 32 == HumanEval.candidate(32)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_389_find_lucas", "language": "elixir", "prompt": "# Write a function to find the n'th lucas number.\n\ndefmodule HumanEval do\n  def candidate(n), do: find_lucas(n)\n  def find_lucas(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_lucas' do\n    assert 76 == HumanEval.candidate(9)\n    assert 7 == HumanEval.candidate(4)\n    assert 4 == HumanEval.candidate(3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_390_add_string", "language": "elixir", "prompt": "# Write a function to apply a given format string to all of the elements in a list.\n\ndefmodule HumanEval do\n  def candidate(list_, string), do: add_string(list_, string)\n  def add_string(list_, string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_string' do\n    assert [\"temp1\", \"temp2\", \"temp3\", \"temp4\"] == HumanEval.candidate([1, 2, 3, 4], \"temp{0}\")\n    assert [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"] == HumanEval.candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n    assert [\"string5\", \"string6\", \"string7\", \"string8\"] == HumanEval.candidate([5, 6, 7, 8], \"string{0}\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "elixir", "prompt": "# Write a function to convert more than one list to nested dictionary.\n\ndefmodule HumanEval do\n  def candidate(l1, l2, l3), do: convert_list_dictionary(l1, l2, l3)\n  def convert_list_dictionary(l1, l2, l3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'convert_list_dictionary' do\n    assert [%{\"S001\" => %{\"Adina Park\" => 85}}, %{\"S002\" => %{\"Leyton Marsh\" => 98}}, %{\"S003\" => %{\"Duncan Boyle\" => 89}}, %{\"S004\" => %{\"Saim Richards\" => 92}}] == HumanEval.candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n    assert [%{\"abc\" => %{\"python\" => 100}}, %{\"def\" => %{\"program\" => 200}}, %{\"ghi\" => %{\"language\" => 300}}, %{\"jkl\" => %{\"programs\" => 400}}] == HumanEval.candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n    assert [%{\"A1\" => %{\"java\" => 10}}, %{\"A2\" => %{\"C\" => 20}}, %{\"A3\" => %{\"C++\" => 30}}, %{\"A4\" => %{\"DBMS\" => 40}}] == HumanEval.candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_392_get_max_sum", "language": "elixir", "prompt": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndefmodule HumanEval do\n  def candidate(n), do: get_max_sum(n)\n  def get_max_sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_max_sum' do\n    assert 106 == HumanEval.candidate(60)\n    assert 12 == HumanEval.candidate(10)\n    assert 2 == HumanEval.candidate(2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_393_max_length_list", "language": "elixir", "prompt": "# Write a function to find the list with maximum length.\n\ndefmodule HumanEval do\n  def candidate(input_list), do: max_length_list(input_list)\n  def max_length_list(input_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_length_list' do\n    assert {3, [13, 15, 17]} == HumanEval.candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    assert {5, [1, 2, 3, 4, 5]} == HumanEval.candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n    assert {4, [6, 7, 8, 9]} == HumanEval.candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_394_check_distinct", "language": "elixir", "prompt": "# Write a function to check if given list contains no duplicates.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: check_distinct(test_tup)\n  def check_distinct(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_distinct' do\n    assert false == HumanEval.candidate([1, 4, 5, 6, 1, 4])\n    assert true == HumanEval.candidate([1, 4, 5, 6])\n    assert true == HumanEval.candidate([2, 3, 4, 5, 6])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "elixir", "prompt": "# Write a python function to find the first non-repeated character in a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: first_non_repeating_character(str1)\n  def first_non_repeating_character(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_non_repeating_character' do\n    assert nil == HumanEval.candidate(\"abcabc\")\n    assert \"a\" == HumanEval.candidate(\"abc\")\n    assert \"c\" == HumanEval.candidate(\"ababc\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_396_check_char", "language": "elixir", "prompt": "# Write a function to check whether the given string starts and ends with the same character or not.\n\ndefmodule HumanEval do\n  def candidate(string), do: check_char(string)\n  def check_char(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_char' do\n    assert \"Valid\" == HumanEval.candidate(\"abba\")\n    assert \"Valid\" == HumanEval.candidate(\"a\")\n    assert \"Invalid\" == HumanEval.candidate(\"abcd\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_397_median_numbers", "language": "elixir", "prompt": "# Write a function to find the median of three numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: median_numbers(a, b, c)\n  def median_numbers(a, b, c) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'median_numbers' do\n    assert 55.0 == HumanEval.candidate(25, 55, 65)\n    assert 20.0 == HumanEval.candidate(20, 10, 30)\n    assert 45.0 == HumanEval.candidate(15, 45, 75)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_398_sum_of_digits", "language": "elixir", "prompt": "# Write a function to compute the sum of digits of each number of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: sum_of_digits(nums)\n  def sum_of_digits(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_of_digits' do\n    assert 14 == HumanEval.candidate([10, 2, 56])\n    assert 19 == HumanEval.candidate([[10, 20, 4, 5, \"b\", 70, \"a\"]])\n    assert 19 == HumanEval.candidate([10, 20, -4, 5, -70])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_399_bitwise_xor", "language": "elixir", "prompt": "# Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: bitwise_xor(test_tup1, test_tup2)\n  def bitwise_xor(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bitwise_xor' do\n    assert {15, 6, 5, 10} == HumanEval.candidate({10, 4, 6, 9}, {5, 2, 3, 3})\n    assert {13, 6, 3, 14} == HumanEval.candidate({11, 5, 7, 10}, {6, 3, 4, 4})\n    assert {11, 2, 13, 13} == HumanEval.candidate({12, 6, 8, 11}, {7, 4, 5, 6})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_3_is_not_prime", "language": "elixir", "prompt": "# Write a python function to identify non-prime numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_not_prime(n)\n  def is_not_prime(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_not_prime' do\n    assert false == HumanEval.candidate(2)\n    assert true == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(35)\n    assert false == HumanEval.candidate(37)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_400_extract_freq", "language": "elixir", "prompt": "# Write a function to extract the number of unique tuples in the given list.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: extract_freq(test_list)\n  def extract_freq(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_freq' do\n    assert 3 == HumanEval.candidate([{3, 4}, {1, 2}, {4, 3}, {5, 6}])\n    assert 4 == HumanEval.candidate([{4, 15}, {2, 3}, {5, 4}, {6, 7}])\n    assert 4 == HumanEval.candidate([{5, 16}, {2, 3}, {6, 5}, {6, 9}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_401_add_nested_tuples", "language": "elixir", "prompt": "# Write a function to perform index wise addition of list elements in the given two nested lists.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: add_nested_tuples(test_tup1, test_tup2)\n  def add_nested_tuples(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_nested_tuples' do\n    assert [[7, 10], [7, 14], [3, 10], [8, 13]] == HumanEval.candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    assert [[9, 12], [9, 16], [5, 12], [10, 15]] == HumanEval.candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    assert [[11, 14], [11, 18], [7, 14], [12, 17]] == HumanEval.candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_404_minimum", "language": "elixir", "prompt": "# Write a python function to find the minimum of two numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: minimum(a, b)\n  def minimum(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'minimum' do\n    assert 1 == HumanEval.candidate(1, 2)\n    assert -5 == HumanEval.candidate(-5, -4)\n    assert 0 == HumanEval.candidate(0, 0)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_405_check_tuplex", "language": "elixir", "prompt": "# Write a function to check whether an element exists within a tuple.\n\ndefmodule HumanEval do\n  def candidate(tuplex, tuple1), do: check_tuplex(tuplex, tuple1)\n  def check_tuplex(tuplex, tuple1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_tuplex' do\n    assert true == HumanEval.candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n    assert false == HumanEval.candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\")\n    assert true == HumanEval.candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_406_find_Parity", "language": "elixir", "prompt": "# Write a python function to find whether the parity of a given number is odd.\n\ndefmodule HumanEval do\n  def candidate(x), do: find_Parity(x)\n  def find_Parity(x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Parity' do\n    assert false == HumanEval.candidate(12)\n    assert true == HumanEval.candidate(7)\n    assert false == HumanEval.candidate(10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_407_rearrange_bigger", "language": "elixir", "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: rearrange_bigger(n)\n  def rearrange_bigger(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rearrange_bigger' do\n    assert 21 == HumanEval.candidate(12)\n    assert false == HumanEval.candidate(10)\n    assert 120 == HumanEval.candidate(102)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "elixir", "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2, k), do: k_smallest_pairs(nums1, nums2, k)\n  def k_smallest_pairs(nums1, nums2, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'k_smallest_pairs' do\n    assert [[1, 2], [1, 4]] == HumanEval.candidate([1, 3, 7], [2, 4, 6], 2)\n    assert [[1, 2]] == HumanEval.candidate([1, 3, 7], [2, 4, 6], 1)\n    assert [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]] == HumanEval.candidate([1, 3, 7], [2, 4, 6], 7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_409_min_product_tuple", "language": "elixir", "prompt": "# Write a function to find the minimum product from the pairs of tuples within a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: min_product_tuple(list1)\n  def min_product_tuple(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_product_tuple' do\n    assert 8 == HumanEval.candidate([{2, 7}, {2, 6}, {1, 8}, {4, 9}])\n    assert 30 == HumanEval.candidate([{10, 20}, {15, 2}, {5, 10}])\n    assert 100 == HumanEval.candidate([{11, 44}, {10, 15}, {20, 5}, {12, 9}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_410_min_val", "language": "elixir", "prompt": "# Write a function to find the minimum value in a given heterogeneous list.\n\ndefmodule HumanEval do\n  def candidate(listval), do: min_val(listval)\n  def min_val(listval) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_val' do\n    assert 2 == HumanEval.candidate([\"Python\", 3, 2, 4, 5, \"version\"])\n    assert 15 == HumanEval.candidate([\"Python\", 15, 20, 25])\n    assert 20 == HumanEval.candidate([\"Python\", 30, 20, 40, 50, \"version\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_411_snake_to_camel", "language": "elixir", "prompt": "# Write a function to convert the given snake case string to camel case string.\n\ndefmodule HumanEval do\n  def candidate(word), do: snake_to_camel(word)\n  def snake_to_camel(word) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'snake_to_camel' do\n    assert \"AndroidTv\" == HumanEval.candidate(\"android_tv\")\n    assert \"GooglePixel\" == HumanEval.candidate(\"google_pixel\")\n    assert \"AppleWatch\" == HumanEval.candidate(\"apple_watch\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_412_remove_odd", "language": "elixir", "prompt": "# Write a python function to remove odd numbers from a given list.\n\ndefmodule HumanEval do\n  def candidate(l), do: remove_odd(l)\n  def remove_odd(l) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_odd' do\n    assert [2] == HumanEval.candidate([1, 2, 3])\n    assert [2, 4, 6] == HumanEval.candidate([2, 4, 6])\n    assert [10, 20] == HumanEval.candidate([10, 20, 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_413_extract_nth_element", "language": "elixir", "prompt": "# Write a function to extract the nth element from a given list of tuples.\n\ndefmodule HumanEval do\n  def candidate(list1, n), do: extract_nth_element(list1, n)\n  def extract_nth_element(list1, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_nth_element' do\n    assert [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"] == HumanEval.candidate([{\"Greyson Fulton\", 98, 99}, {\"Brady Kent\", 97, 96}, {\"Wyatt Knott\", 91, 94}, {\"Beau Turnbull\", 94, 98}], 0)\n    assert [99, 96, 94, 98] == HumanEval.candidate([{\"Greyson Fulton\", 98, 99}, {\"Brady Kent\", 97, 96}, {\"Wyatt Knott\", 91, 94}, {\"Beau Turnbull\", 94, 98}], 2)\n    assert [98, 97, 91, 94] == HumanEval.candidate([{\"Greyson Fulton\", 98, 99}, {\"Brady Kent\", 97, 96}, {\"Wyatt Knott\", 91, 94}, {\"Beau Turnbull\", 94, 98}], 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_414_overlapping", "language": "elixir", "prompt": "# Write a python function to check whether any value in a sequence exists in a sequence or not.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: overlapping(list1, list2)\n  def overlapping(list1, list2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'overlapping' do\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    assert false == HumanEval.candidate([1, 2, 3], [4, 5, 6])\n    assert true == HumanEval.candidate([1, 4, 5], [1, 4, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_415_max_Product", "language": "elixir", "prompt": "# Write a python function to find a pair with highest product from a given array of integers.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_Product(arr)\n  def max_Product(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_Product' do\n    assert {7, 8} == HumanEval.candidate([1, 2, 3, 4, 7, 0, 8, 4])\n    assert {-4, -6} == HumanEval.candidate([0, -1, -2, -4, 5, 0, -6])\n    assert {2, 3} == HumanEval.candidate([1, 2, 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_417_group_tuples", "language": "elixir", "prompt": "# Write a function to find common first element in given list of lists.\n\ndefmodule HumanEval do\n  def candidate(Input), do: group_tuples(Input)\n  def group_tuples(Input) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'group_tuples' do\n    assert [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]] == HumanEval.candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]])\n    assert [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]] == HumanEval.candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]])\n    assert [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]] == HumanEval.candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_418_Find_Max", "language": "elixir", "prompt": "# Write a python function to find the element of a list having maximum length.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Max(lst)\n  def Find_Max(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Max' do\n    assert [\"A\", \"B\", \"C\"] == HumanEval.candidate([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]])\n    assert [1, 2, 3] == HumanEval.candidate([[1], [1, 2], [1, 2, 3]])\n    assert [1, 5, 6, 1] == HumanEval.candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_419_round_and_sum", "language": "elixir", "prompt": "# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: round_and_sum(list1)\n  def round_and_sum(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'round_and_sum' do\n    assert 243 == HumanEval.candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n    assert 345 == HumanEval.candidate([5, 2, 9, 24.3, 29])\n    assert 513 == HumanEval.candidate([25.0, 56.7, 89.2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_420_cube_Sum", "language": "elixir", "prompt": "# Write a python function to find the cube sum of first n even natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: cube_Sum(n)\n  def cube_Sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cube_Sum' do\n    assert 72 == HumanEval.candidate(2)\n    assert 288 == HumanEval.candidate(3)\n    assert 800 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_421_concatenate_tuple", "language": "elixir", "prompt": "# Write a function to concatenate each element of tuple by the delimiter.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: concatenate_tuple(test_tup)\n  def concatenate_tuple(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'concatenate_tuple' do\n    assert \"ID-is-4-UTS\" == HumanEval.candidate({\"ID\", \"is\", 4, \"UTS\"})\n    assert \"QWE-is-4-RTY\" == HumanEval.candidate({\"QWE\", \"is\", 4, \"RTY\"})\n    assert \"ZEN-is-4-OP\" == HumanEval.candidate({\"ZEN\", \"is\", 4, \"OP\"})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "elixir", "prompt": "# Write a python function to find the average of cubes of first n natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: find_Average_Of_Cube(n)\n  def find_Average_Of_Cube(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Average_Of_Cube' do\n    assert 4.5 == HumanEval.candidate(2)\n    assert 12 == HumanEval.candidate(3)\n    assert 1 == HumanEval.candidate(1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_424_extract_rear", "language": "elixir", "prompt": "# Write a function to extract only the rear index element of each string in the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tuple), do: extract_rear(test_tuple)\n  def extract_rear(test_tuple) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_rear' do\n    assert [\"s\", \"r\", \"s\"] == HumanEval.candidate({\"Mers\", \"for\", \"Vers\"})\n    assert [\"e\", \"r\", \"e\"] == HumanEval.candidate({\"Avenge\", \"for\", \"People\"})\n    assert [\"a\", \"t\", \"o\"] == HumanEval.candidate({\"Gotta\", \"get\", \"go\"})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_425_count_element_in_list", "language": "elixir", "prompt": "# Write a function to count the number of sublists containing a particular element.\n\ndefmodule HumanEval do\n  def candidate(list1, x), do: count_element_in_list(list1, x)\n  def count_element_in_list(list1, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_element_in_list' do\n    assert 3 == HumanEval.candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n    assert 3 == HumanEval.candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n    assert 1 == HumanEval.candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "elixir", "prompt": "# Write a function to filter odd numbers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: filter_oddnumbers(nums)\n  def filter_oddnumbers(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_oddnumbers' do\n    assert [1, 3, 5, 7, 9] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert [45, 67, 93] == HumanEval.candidate([10, 20, 45, 67, 84, 93])\n    assert [5, 7, 9, 3] == HumanEval.candidate([5, 7, 9, 8, 6, 4, 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_427_change_date_format", "language": "elixir", "prompt": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndefmodule HumanEval do\n  def candidate(dt), do: change_date_format(dt)\n  def change_date_format(dt) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'change_date_format' do\n    assert \"02-01-2026\" == HumanEval.candidate(\"2026-01-02\")\n    assert \"13-11-2020\" == HumanEval.candidate(\"2020-11-13\")\n    assert \"26-04-2021\" == HumanEval.candidate(\"2021-04-26\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_428_shell_sort", "language": "elixir", "prompt": "# Write a function to sort the given array by using shell sort.\n\ndefmodule HumanEval do\n  def candidate(my_list), do: shell_sort(my_list)\n  def shell_sort(my_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'shell_sort' do\n    assert [2, 3, 4, 5, 12, 12, 23, 56, 81, 95] == HumanEval.candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    assert [22, 24, 34, 39, 68, 73, 87] == HumanEval.candidate([24, 22, 39, 34, 87, 73, 68])\n    assert [16, 30, 32, 74, 82, 83, 96] == HumanEval.candidate([32, 30, 16, 96, 82, 83, 74])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_429_and_tuples", "language": "elixir", "prompt": "# Write a function to extract the elementwise and tuples from the given two tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: and_tuples(test_tup1, test_tup2)\n  def and_tuples(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'and_tuples' do\n    assert {0, 0, 2, 1} == HumanEval.candidate({10, 4, 6, 9}, {5, 2, 3, 3})\n    assert {1, 2, 3, 0} == HumanEval.candidate({1, 2, 3, 4}, {5, 6, 7, 8})\n    assert {0, 9, 10, 0} == HumanEval.candidate({8, 9, 11, 12}, {7, 13, 14, 17})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_430_parabola_directrix", "language": "elixir", "prompt": "# Write a function to find the directrix of a parabola.\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: parabola_directrix(a, b, c)\n  def parabola_directrix(a, b, c) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'parabola_directrix' do\n    assert -198 == HumanEval.candidate(5, 3, 2)\n    assert -2336 == HumanEval.candidate(9, 8, 4)\n    assert -130 == HumanEval.candidate(2, 4, 6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_431_common_element", "language": "elixir", "prompt": "# Write a function that takes two lists and returns true if they have at least one common element.\n\ndefmodule HumanEval do\n  def candidate(list1, list2), do: common_element(list1, list2)\n  def common_element(list1, list2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'common_element' do\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n    assert nil == HumanEval.candidate([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    assert true == HumanEval.candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_432_median_trapezium", "language": "elixir", "prompt": "# Write a function to find the median length of a trapezium.\n\ndefmodule HumanEval do\n  def candidate(base1, base2, height), do: median_trapezium(base1, base2, height)\n  def median_trapezium(base1, base2, height) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'median_trapezium' do\n    assert 20 == HumanEval.candidate(15, 25, 35)\n    assert 15 == HumanEval.candidate(10, 20, 30)\n    assert 7.5 == HumanEval.candidate(6, 9, 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_433_check_greater", "language": "elixir", "prompt": "# Write a function to check whether the entered number is greater than the elements of the given array.\n\ndefmodule HumanEval do\n  def candidate(arr, number), do: check_greater(arr, number)\n  def check_greater(arr, number) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_greater' do\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5], 4)\n    assert true == HumanEval.candidate([2, 3, 4, 5, 6], 8)\n    assert true == HumanEval.candidate([9, 7, 4, 8, 6, 1], 11)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_434_text_match_one", "language": "elixir", "prompt": "# Write a function that matches a string that has an a followed by one or more b's.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_one(text)\n  def text_match_one(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_one' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abba\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_435_last_Digit", "language": "elixir", "prompt": "# Write a python function to find the last digit of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: last_Digit(n)\n  def last_Digit(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'last_Digit' do\n    assert 3 == HumanEval.candidate(123)\n    assert 5 == HumanEval.candidate(25)\n    assert 0 == HumanEval.candidate(30)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_436_neg_nos", "language": "elixir", "prompt": "# Write a python function to return the negative numbers in a list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: neg_nos(list1)\n  def neg_nos(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'neg_nos' do\n    assert [-1, -6] == HumanEval.candidate([-1, 4, 5, -6])\n    assert [-1, -2] == HumanEval.candidate([-1, -2, 3, 4])\n    assert [-7, -6] == HumanEval.candidate([-7, -6, 8, 9])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_437_remove_odd", "language": "elixir", "prompt": "# Write a function to remove odd characters in a string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: remove_odd(str1)\n  def remove_odd(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_odd' do\n    assert \"yhn\" == HumanEval.candidate(\"python\")\n    assert \"rga\" == HumanEval.candidate(\"program\")\n    assert \"agae\" == HumanEval.candidate(\"language\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_438_count_bidirectional", "language": "elixir", "prompt": "# Write a function to count bidirectional tuple pairs.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: count_bidirectional(test_list)\n  def count_bidirectional(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_bidirectional' do\n    assert 3 == HumanEval.candidate([{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}])\n    assert 2 == HumanEval.candidate([{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}])\n    assert 4 == HumanEval.candidate([{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_439_multiple_to_single", "language": "elixir", "prompt": "# Write a function to join a list of multiple integers into a single integer.\n\ndefmodule HumanEval do\n  def candidate(L), do: multiple_to_single(L)\n  def multiple_to_single(L) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiple_to_single' do\n    assert 113350 == HumanEval.candidate([11, 33, 50])\n    assert -123456 == HumanEval.candidate([-1, 2, 3, 4, 5, 6])\n    assert 10152025 == HumanEval.candidate([10, 15, 20, 25])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_440_find_adverb_position", "language": "elixir", "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\n\ndefmodule HumanEval do\n  def candidate(text), do: find_adverb_position(text)\n  def find_adverb_position(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_adverb_position' do\n    assert {0, 7, \"clearly\"} == HumanEval.candidate(\"clearly!! we can see the sky\")\n    assert {0, 9, \"seriously\"} == HumanEval.candidate(\"seriously!! there are many roses\")\n    assert {0, 13, \"unfortunately\"} == HumanEval.candidate(\"unfortunately!! sita is going to home\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_441_surfacearea_cube", "language": "elixir", "prompt": "# Write a function to find the surface area of a cube of a given size.\n\ndefmodule HumanEval do\n  def candidate(l), do: surfacearea_cube(l)\n  def surfacearea_cube(l) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'surfacearea_cube' do\n    assert 150 == HumanEval.candidate(5)\n    assert 54 == HumanEval.candidate(3)\n    assert 600 == HumanEval.candidate(10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_442_positive_count", "language": "elixir", "prompt": "# Write a function to find the ration of positive numbers in an array of integers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: positive_count(nums)\n  def positive_count(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'positive_count' do\n    assert 0.54 == HumanEval.candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    assert 0.69 == HumanEval.candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    assert 0.56 == HumanEval.candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_443_largest_neg", "language": "elixir", "prompt": "# Write a python function to find the largest negative number from the given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: largest_neg(list1)\n  def largest_neg(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'largest_neg' do\n    assert -6 == HumanEval.candidate([1, 2, 3, -4, -6])\n    assert -9 == HumanEval.candidate([1, 2, 3, -8, -9])\n    assert -1 == HumanEval.candidate([1, 2, 3, 4, -1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_444_trim_tuple", "language": "elixir", "prompt": "# Write a function to trim each list by k in the given lists.\n\ndefmodule HumanEval do\n  def candidate(test_list, K), do: trim_tuple(test_list, K)\n  def trim_tuple(test_list, K) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'trim_tuple' do\n    assert [[2], [9], [2], [2]] == HumanEval.candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)\n    assert [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]] == HumanEval.candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)\n    assert [[8, 4], [8, 12], [1, 7], [6, 9]] == HumanEval.candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_445_index_multiplication", "language": "elixir", "prompt": "# Write a function to perform index wise multiplication of list elements in the given two lists.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: index_multiplication(test_tup1, test_tup2)\n  def index_multiplication(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'index_multiplication' do\n    assert [[6, 21], [12, 45], [2, 9], [7, 30]] == HumanEval.candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n    assert [[14, 32], [20, 60], [6, 20], [16, 44]] == HumanEval.candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n    assert [[24, 45], [30, 77], [12, 33], [27, 60]] == HumanEval.candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_446_count_Occurrence", "language": "elixir", "prompt": "# Write a python function to count the occurence of all elements of list in a tuple.\n\ndefmodule HumanEval do\n  def candidate(tup, lst), do: count_Occurrence(tup, lst)\n  def count_Occurrence(tup, lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Occurrence' do\n    assert 3 == HumanEval.candidate({\"a\", \"a\", \"c\", \"b\", \"d\"}, [\"a\", \"b\"])\n    assert 6 == HumanEval.candidate({1, 2, 3, 1, 4, 6, 7, 1, 4}, [1, 4, 7])\n    assert 2 == HumanEval.candidate({1, 2, 3, 4, 5, 6}, [1, 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_447_cube_nums", "language": "elixir", "prompt": "# Write a function to find cubes of individual elements in a list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: cube_nums(nums)\n  def cube_nums(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cube_nums' do\n    assert [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert [1000, 8000, 27000] == HumanEval.candidate([10, 20, 30])\n    assert [1728, 3375] == HumanEval.candidate([12, 15])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_448_cal_sum", "language": "elixir", "prompt": "# Write a function to calculate the sum of perrin numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: cal_sum(n)\n  def cal_sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cal_sum' do\n    assert 49 == HumanEval.candidate(9)\n    assert 66 == HumanEval.candidate(10)\n    assert 88 == HumanEval.candidate(11)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_450_extract_string", "language": "elixir", "prompt": "# Write a function to extract specified size of strings from a given list of string values.\n\ndefmodule HumanEval do\n  def candidate(str, l), do: extract_string(str, l)\n  def extract_string(str, l) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_string' do\n    assert [\"practice\", \"solution\"] == HumanEval.candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n    assert [\"Python\"] == HumanEval.candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n    assert [\"exercises\"] == HumanEval.candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_451_remove_whitespaces", "language": "elixir", "prompt": "# Write a function to remove all whitespaces from the given string.\n\ndefmodule HumanEval do\n  def candidate(text1), do: remove_whitespaces(text1)\n  def remove_whitespaces(text1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_whitespaces' do\n    assert \"GoogleFlutter\" == HumanEval.candidate(\" Google    Flutter \")\n    assert \"GoogleDart\" == HumanEval.candidate(\" Google    Dart \")\n    assert \"iOSSwift\" == HumanEval.candidate(\" iOS    Swift \")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_452_loss_amount", "language": "elixir", "prompt": "# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndefmodule HumanEval do\n  def candidate(actual_cost, sale_amount), do: loss_amount(actual_cost, sale_amount)\n  def loss_amount(actual_cost, sale_amount) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'loss_amount' do\n    assert 0 == HumanEval.candidate(1500, 1200)\n    assert 100 == HumanEval.candidate(100, 200)\n    assert 3000 == HumanEval.candidate(2000, 5000)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_453_sumofFactors", "language": "elixir", "prompt": "# Write a python function to find the sum of even factors of a number.\n\ndefmodule HumanEval do\n  def candidate(n), do: sumofFactors(n)\n  def sumofFactors(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sumofFactors' do\n    assert 26 == HumanEval.candidate(18)\n    assert 48 == HumanEval.candidate(30)\n    assert 8 == HumanEval.candidate(6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_454_text_match_wordz", "language": "elixir", "prompt": "# Write a function that matches a word containing 'z'.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_wordz(text)\n  def text_match_wordz(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_wordz' do\n    assert true == HumanEval.candidate(\"pythonz.\")\n    assert true == HumanEval.candidate(\"xyz.\")\n    assert false == HumanEval.candidate(\"  lang  .\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "elixir", "prompt": "# Write a function to check whether the given month number contains 31 days or not.\n\ndefmodule HumanEval do\n  def candidate(monthnum2), do: check_monthnumb_number(monthnum2)\n  def check_monthnumb_number(monthnum2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_monthnumb_number' do\n    assert true == HumanEval.candidate(5)\n    assert false == HumanEval.candidate(2)\n    assert false == HumanEval.candidate(6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_456_reverse_string_list", "language": "elixir", "prompt": "# Write a function to reverse each string in a given list of string values.\n\ndefmodule HumanEval do\n  def candidate(stringlist), do: reverse_string_list(stringlist)\n  def reverse_string_list(stringlist) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_string_list' do\n    assert [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"] == HumanEval.candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n    assert [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"] == HumanEval.candidate([\"john\", \"amal\", \"joel\", \"george\"])\n    assert [\"kcaj\", \"nhoj\", \"yram\"] == HumanEval.candidate([\"jack\", \"john\", \"mary\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_457_Find_Min", "language": "elixir", "prompt": "# Write a python function to find the sublist having minimum length.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Min(lst)\n  def Find_Min(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Min' do\n    assert [1] == HumanEval.candidate([[1], [1, 2], [1, 2, 3]])\n    assert [1, 1] == HumanEval.candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n    assert [\"x\"] == HumanEval.candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_458_rectangle_area", "language": "elixir", "prompt": "# Write a function to find the area of a rectangle.\n\ndefmodule HumanEval do\n  def candidate(l, b), do: rectangle_area(l, b)\n  def rectangle_area(l, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rectangle_area' do\n    assert 200 == HumanEval.candidate(10, 20)\n    assert 50 == HumanEval.candidate(10, 5)\n    assert 8 == HumanEval.candidate(4, 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_459_remove_uppercase", "language": "elixir", "prompt": "# Write a function to remove uppercase substrings from a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: remove_uppercase(str1)\n  def remove_uppercase(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_uppercase' do\n    assert \"cstyoravoitshos\" == HumanEval.candidate(\"cAstyoUrFavoRitETVshoWs\")\n    assert \"wtchheinerntrdo\" == HumanEval.candidate(\"wAtchTheinTernEtrAdIo\")\n    assert \"oiceachndreomendaion\" == HumanEval.candidate(\"VoicESeaRchAndreComMendaTionS\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_460_Extract", "language": "elixir", "prompt": "# Write a python function to get the first element of each sublist.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Extract(lst)\n  def Extract(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Extract' do\n    assert [1, 3, 6] == HumanEval.candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    assert [1, 4] == HumanEval.candidate([[1, 2, 3], [4, 5]])\n    assert [9, 1] == HumanEval.candidate([[9, 8, 1], [1, 2]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_461_upper_ctr", "language": "elixir", "prompt": "# Write a python function to count the upper case characters in a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: upper_ctr(str)\n  def upper_ctr(str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'upper_ctr' do\n    assert 1 == HumanEval.candidate(\"PYthon\")\n    assert 1 == HumanEval.candidate(\"BigData\")\n    assert 0 == HumanEval.candidate(\"program\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_462_combinations_list", "language": "elixir", "prompt": "# Write a function to find all possible combinations of the elements of a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: combinations_list(list1)\n  def combinations_list(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'combinations_list' do\n    assert [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]] == HumanEval.candidate([\"orange\", \"red\", \"green\", \"blue\"])\n    assert [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]] == HumanEval.candidate([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"])\n    assert [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]] == HumanEval.candidate([\"red\", \"green\", \"black\", \"orange\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_463_max_subarray_product", "language": "elixir", "prompt": "# Write a function to find the maximum product subarray of the given array.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_subarray_product(arr)\n  def max_subarray_product(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_subarray_product' do\n    assert 112 == HumanEval.candidate([1, -2, -3, 0, 7, -8, -2])\n    assert 180 == HumanEval.candidate([6, -3, -10, 0, 2])\n    assert 80 == HumanEval.candidate([-2, -40, 0, -2, -3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_464_check_value", "language": "elixir", "prompt": "# Write a function to check if all values are same in a dictionary.\n\ndefmodule HumanEval do\n  def candidate(dict, n), do: check_value(dict, n)\n  def check_value(dict, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_value' do\n    assert false == HumanEval.candidate(%{\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 10)\n    assert true == HumanEval.candidate(%{\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 12)\n    assert false == HumanEval.candidate(%{\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_465_drop_empty", "language": "elixir", "prompt": "# Write a function to drop empty items from a given dictionary.\n\ndefmodule HumanEval do\n  def candidate(dict1), do: drop_empty(dict1)\n  def drop_empty(dict1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'drop_empty' do\n    assert %{\"c1\" => \"Red\", \"c2\" => \"Green\"} == HumanEval.candidate(%{\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => nil})\n    assert %{\"c1\" => \"Red\"} == HumanEval.candidate(%{\"c1\" => \"Red\", \"c2\" => nil, \"c3\" => nil})\n    assert %{\"c2\" => \"Green\"} == HumanEval.candidate(%{\"c1\" => nil, \"c2\" => \"Green\", \"c3\" => nil})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_468_max_product", "language": "elixir", "prompt": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndefmodule HumanEval do\n  def candidate(arr), do: max_product(arr)\n  def max_product(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_product' do\n    assert 3000 == HumanEval.candidate([3, 100, 4, 5, 150, 6])\n    assert 50265600 == HumanEval.candidate([4, 42, 55, 68, 80])\n    assert 2460 == HumanEval.candidate([10, 22, 9, 33, 21, 50, 41, 60])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_470_add_pairwise", "language": "elixir", "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: add_pairwise(test_tup)\n  def add_pairwise(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_pairwise' do\n    assert {6, 12, 15, 18} == HumanEval.candidate({1, 5, 7, 8, 10})\n    assert {8, 14, 17, 20} == HumanEval.candidate({2, 6, 8, 9, 11})\n    assert {10, 16, 19, 22} == HumanEval.candidate({3, 7, 9, 10, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_471_find_remainder", "language": "elixir", "prompt": "# Write a python function to find the product of the array multiplication modulo n.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: find_remainder(arr, n)\n  def find_remainder(arr, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_remainder' do\n    assert 9 == HumanEval.candidate([100, 10, 5, 25, 35, 14], 11)\n    assert 0 == HumanEval.candidate([1, 1, 1], 1)\n    assert 0 == HumanEval.candidate([1, 2, 1], 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_472_check_Consecutive", "language": "elixir", "prompt": "# Write a python function to check whether the given list contains consecutive numbers or not.\n\ndefmodule HumanEval do\n  def candidate(l), do: check_Consecutive(l)\n  def check_Consecutive(l) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_Consecutive' do\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert false == HumanEval.candidate([1, 2, 3, 5, 6])\n    assert false == HumanEval.candidate([1, 2, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_474_replace_char", "language": "elixir", "prompt": "# Write a function to replace characters in a string.\n\ndefmodule HumanEval do\n  def candidate(str1, ch, newch), do: replace_char(str1, ch, newch)\n  def replace_char(str1, ch, newch) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_char' do\n    assert \"pollgon\" == HumanEval.candidate(\"polygon\", \"y\", \"l\")\n    assert \"aharaater\" == HumanEval.candidate(\"character\", \"c\", \"a\")\n    assert \"python\" == HumanEval.candidate(\"python\", \"l\", \"a\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_475_sort_counter", "language": "elixir", "prompt": "# Write a function to sort a dictionary by value.\n\ndefmodule HumanEval do\n  def candidate(dict1), do: sort_counter(dict1)\n  def sort_counter(dict1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_counter' do\n    assert [{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}] == HumanEval.candidate(%{\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87})\n    assert [{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}] == HumanEval.candidate(%{\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250})\n    assert [{\"Chemistry\", 1250}, {\"Physics\", 1000}, {\"Math\", 900}] == HumanEval.candidate(%{\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_476_big_sum", "language": "elixir", "prompt": "# Write a python function to find the sum of the largest and smallest value in a given array.\n\ndefmodule HumanEval do\n  def candidate(nums), do: big_sum(nums)\n  def big_sum(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'big_sum' do\n    assert 4 == HumanEval.candidate([1, 2, 3])\n    assert 3 == HumanEval.candidate([-1, 2, 3, 4])\n    assert 8 == HumanEval.candidate([2, 3, 6])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_477_is_lower", "language": "elixir", "prompt": "# Write a python function to convert the given string to lower case.\n\ndefmodule HumanEval do\n  def candidate(string), do: is_lower(string)\n  def is_lower(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_lower' do\n    assert \"invalid\" == HumanEval.candidate(\"InValid\")\n    assert \"true\" == HumanEval.candidate(\"TruE\")\n    assert \"sentence\" == HumanEval.candidate(\"SenTenCE\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_478_remove_lowercase", "language": "elixir", "prompt": "# Write a function to remove lowercase substrings from a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: remove_lowercase(str1)\n  def remove_lowercase(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_lowercase' do\n    assert \"PYTH\" == HumanEval.candidate(\"PYTHon\")\n    assert \"FID\" == HumanEval.candidate(\"FInD\")\n    assert \"STRG\" == HumanEval.candidate(\"STRinG\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_479_first_Digit", "language": "elixir", "prompt": "# Write a python function to find the first digit of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: first_Digit(n)\n  def first_Digit(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_Digit' do\n    assert 1 == HumanEval.candidate(123)\n    assert 4 == HumanEval.candidate(456)\n    assert 1 == HumanEval.candidate(12)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_4_heap_queue_largest", "language": "elixir", "prompt": "# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndefmodule HumanEval do\n  def candidate(nums, n), do: heap_queue_largest(nums, n)\n  def heap_queue_largest(nums, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'heap_queue_largest' do\n    assert [85, 75, 65] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n    assert [85, 75] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n    assert [85, 75, 65, 58, 35] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_554_Split", "language": "elixir", "prompt": "# Write a python function which takes a list of integers and only returns the odd ones.\n\ndefmodule HumanEval do\n  def candidate(list), do: Split(list)\n  def Split(list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Split' do\n    assert [1, 3, 5] == HumanEval.candidate([1, 2, 3, 4, 5, 6])\n    assert [11, 13] == HumanEval.candidate([10, 11, 12, 13])\n    assert [7, 9, 1] == HumanEval.candidate([7, 8, 9, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_555_difference", "language": "elixir", "prompt": "# Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: difference(n)\n  def difference(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'difference' do\n    assert 30 == HumanEval.candidate(3)\n    assert 210 == HumanEval.candidate(5)\n    assert 6 == HumanEval.candidate(2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "elixir", "prompt": "# Write a python function to count the number of pairs whose xor value is odd.\n\ndefmodule HumanEval do\n  def candidate(A, N), do: find_Odd_Pair(A, N)\n  def find_Odd_Pair(A, N) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Odd_Pair' do\n    assert 6 == HumanEval.candidate([5, 4, 7, 2, 1], 5)\n    assert 12 == HumanEval.candidate([7, 2, 8, 1, 0, 5, 11], 7)\n    assert 2 == HumanEval.candidate([1, 2, 3], 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_557_toggle_string", "language": "elixir", "prompt": "# Write a function to toggle the case of all characters in a string.\n\ndefmodule HumanEval do\n  def candidate(string), do: toggle_string(string)\n  def toggle_string(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'toggle_string' do\n    assert \"pYTHON\" == HumanEval.candidate(\"Python\")\n    assert \"pANGRAM\" == HumanEval.candidate(\"Pangram\")\n    assert \"liTTle\" == HumanEval.candidate(\"LIttLE\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_558_digit_distance_nums", "language": "elixir", "prompt": "# Write a python function to find the sum of the per-digit difference between two integers.\n\ndefmodule HumanEval do\n  def candidate(n1, n2), do: digit_distance_nums(n1, n2)\n  def digit_distance_nums(n1, n2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'digit_distance_nums' do\n    assert 1 == HumanEval.candidate(1, 2)\n    assert 6 == HumanEval.candidate(23, 56)\n    assert 7 == HumanEval.candidate(123, 256)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "elixir", "prompt": "# Write a function to find the sum of the largest contiguous sublist in the given list.\n\ndefmodule HumanEval do\n  def candidate(a, size), do: max_sub_array_sum(a, size)\n  def max_sub_array_sum(a, size) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sub_array_sum' do\n    assert 7 == HumanEval.candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    assert 8 == HumanEval.candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n    assert 10 == HumanEval.candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_560_union_elements", "language": "elixir", "prompt": "# Write a function to find the union of the elements of two given lists and output them in sorted order.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: union_elements(test_tup1, test_tup2)\n  def union_elements(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'union_elements' do\n    assert [3, 4, 5, 6, 7, 10] == HumanEval.candidate([3, 4, 5, 6], [5, 7, 4, 10])\n    assert [1, 2, 3, 4, 5, 6] == HumanEval.candidate([1, 2, 3, 4], [3, 4, 5, 6])\n    assert [11, 12, 13, 14, 15, 16, 17] == HumanEval.candidate([11, 12, 13, 14], [13, 15, 16, 17])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_562_Find_Max_Length", "language": "elixir", "prompt": "# Write a python function to find the length of the longest sublists.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Max_Length(lst)\n  def Find_Max_Length(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Max_Length' do\n    assert 4 == HumanEval.candidate([[1], [1, 4], [5, 6, 7, 8]])\n    assert 3 == HumanEval.candidate([[0, 1], [2, 2], [3, 2, 1]])\n    assert 5 == HumanEval.candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_563_extract_values", "language": "elixir", "prompt": "# Write a function to extract values between quotation marks from a string.\n\ndefmodule HumanEval do\n  def candidate(text), do: extract_values(text)\n  def extract_values(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_values' do\n    assert [\"Python\", \"PHP\", \"Java\"] == HumanEval.candidate(\"\"Python\", \"PHP\", \"Java\"\")\n    assert [\"python\", \"program\", \"language\"] == HumanEval.candidate(\"\"python\",\"program\",\"language\"\")\n    assert [\"red\", \"blue\", \"green\", \"yellow\"] == HumanEval.candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_564_count_Pairs", "language": "elixir", "prompt": "# Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: count_Pairs(arr, n)\n  def count_Pairs(arr, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Pairs' do\n    assert 2 == HumanEval.candidate([1, 2, 1], 3)\n    assert 0 == HumanEval.candidate([1, 1, 1, 1], 4)\n    assert 10 == HumanEval.candidate([1, 2, 3, 4, 5], 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_565_split", "language": "elixir", "prompt": "# Write a python function to split a string into characters.\n\ndefmodule HumanEval do\n  def candidate(word), do: split(word)\n  def split(word) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split' do\n    assert [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"] == HumanEval.candidate(\"python\")\n    assert [\"N\", \"a\", \"m\", \"e\"] == HumanEval.candidate(\"Name\")\n    assert [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"] == HumanEval.candidate(\"program\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_566_sum_digits", "language": "elixir", "prompt": "# Write a function to get the sum of the digits of a non-negative integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_digits(n)\n  def sum_digits(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_digits' do\n    assert 12 == HumanEval.candidate(345)\n    assert 3 == HumanEval.candidate(12)\n    assert 16 == HumanEval.candidate(97)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_567_issort_list", "language": "elixir", "prompt": "# Write a function to check whether a specified list is sorted or not.\n\ndefmodule HumanEval do\n  def candidate(list1), do: issort_list(list1)\n  def issort_list(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'issort_list' do\n    assert true == HumanEval.candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n    assert false == HumanEval.candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n    assert false == HumanEval.candidate([1, 2, 4, 6, 8, 10, 15, 14, 20])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_568_empty_list", "language": "elixir", "prompt": "# Write a function to create a list of N empty dictionaries.\n\ndefmodule HumanEval do\n  def candidate(length), do: empty_list(length)\n  def empty_list(length) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'empty_list' do\n    assert [%{}, %{}, %{}, %{}, %{}] == HumanEval.candidate(5)\n    assert [%{}, %{}, %{}, %{}, %{}, %{}] == HumanEval.candidate(6)\n    assert [%{}, %{}, %{}, %{}, %{}, %{}, %{}] == HumanEval.candidate(7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_569_sort_sublists", "language": "elixir", "prompt": "# Write a function to sort each sublist of strings in a given list of lists.\n\ndefmodule HumanEval do\n  def candidate(list1), do: sort_sublists(list1)\n  def sort_sublists(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_sublists' do\n    assert [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]] == HumanEval.candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n    assert [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]] == HumanEval.candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n    assert [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]] == HumanEval.candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_56_checks", "language": "elixir", "prompt": "# Write a python function to check if a given number is one less than twice its reverse.\n\ndefmodule HumanEval do\n  def candidate(n), do: checks(n)\n  def checks(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'checks' do\n    assert false == HumanEval.candidate(70)\n    assert false == HumanEval.candidate(23)\n    assert true == HumanEval.candidate(73)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_572_two_unique_nums", "language": "elixir", "prompt": "# Write a python function to remove duplicate numbers from a given number of lists.\n\ndefmodule HumanEval do\n  def candidate(nums), do: two_unique_nums(nums)\n  def two_unique_nums(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'two_unique_nums' do\n    assert [1, 4, 5] == HumanEval.candidate([1, 2, 3, 2, 3, 4, 5])\n    assert [1, 3, 4, 5] == HumanEval.candidate([1, 2, 3, 2, 4, 5])\n    assert [1, 2, 3, 4, 5] == HumanEval.candidate([1, 2, 3, 4, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_573_unique_product", "language": "elixir", "prompt": "# Write a python function to calculate the product of the unique numbers in a given list.\n\ndefmodule HumanEval do\n  def candidate(list_data), do: unique_product(list_data)\n  def unique_product(list_data) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'unique_product' do\n    assert 720000000 == HumanEval.candidate([10, 20, 30, 40, 20, 50, 60, 40])\n    assert 6 == HumanEval.candidate([1, 2, 3, 1])\n    assert 0 == HumanEval.candidate([7, 8, 9, 0, 1, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "elixir", "prompt": "# Write a function to find the surface area of a cylinder.\n\ndefmodule HumanEval do\n  def candidate(r, h), do: surfacearea_cylinder(r, h)\n  def surfacearea_cylinder(r, h) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'surfacearea_cylinder' do\n    assert 942.45 == HumanEval.candidate(10, 5)\n    assert 226.18800000000002 == HumanEval.candidate(4, 5)\n    assert 351.848 == HumanEval.candidate(4, 10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_576_is_Sub_Array", "language": "elixir", "prompt": "# Write a python function to check whether a list is sublist of another or not.\n\ndefmodule HumanEval do\n  def candidate(A, B), do: is_Sub_Array(A, B)\n  def is_Sub_Array(A, B) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Sub_Array' do\n    assert false == HumanEval.candidate([1, 4, 3, 5], [1, 2])\n    assert true == HumanEval.candidate([1, 2, 1], [1, 2, 1])\n    assert false == HumanEval.candidate([1, 0, 2, 2], [2, 2, 0])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "elixir", "prompt": "# Write a python function to find the last digit in factorial of a given number.\n\ndefmodule HumanEval do\n  def candidate(n), do: last_Digit_Factorial(n)\n  def last_Digit_Factorial(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'last_Digit_Factorial' do\n    assert 4 == HumanEval.candidate(4)\n    assert 0 == HumanEval.candidate(21)\n    assert 0 == HumanEval.candidate(30)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_578_interleave_lists", "language": "elixir", "prompt": "# Write a function to interleave 3 lists of the same length into a single flat list.\n\ndefmodule HumanEval do\n  def candidate(list1, list2, list3), do: interleave_lists(list1, list2, list3)\n  def interleave_lists(list1, list2, list3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'interleave_lists' do\n    assert [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\n    assert [10, 15, 5, 20, 2, 10] == HumanEval.candidate([10, 20], [15, 2], [5, 10])\n    assert [11, 10, 20, 44, 15, 5] == HumanEval.candidate([11, 44], [10, 15], [20, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_579_find_dissimilar", "language": "elixir", "prompt": "# Write a function to find the dissimilar elements in the given two tuples.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: find_dissimilar(test_tup1, test_tup2)\n  def find_dissimilar(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_dissimilar' do\n    assert {3, 6, 7, 10} == HumanEval.candidate({3, 4, 5, 6}, {5, 7, 4, 10})\n    assert {1, 4, 7, 9} == HumanEval.candidate({1, 2, 3, 4}, {7, 2, 3, 9})\n    assert {34, 36, 11, 25} == HumanEval.candidate({21, 11, 25, 26}, {26, 34, 21, 36})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_57_find_Max_Num", "language": "elixir", "prompt": "# Write a python function to find the largest number that can be formed with the given list of digits.\n\ndefmodule HumanEval do\n  def candidate(arr), do: find_Max_Num(arr)\n  def find_Max_Num(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Max_Num' do\n    assert 321 == HumanEval.candidate([1, 2, 3])\n    assert 6541 == HumanEval.candidate([4, 5, 6, 1])\n    assert 9321 == HumanEval.candidate([1, 2, 3, 9])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_580_extract_even", "language": "elixir", "prompt": "# Write a function to remove uneven elements in the nested mixed tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tuple), do: extract_even(test_tuple)\n  def extract_even(test_tuple) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_even' do\n    assert {4, {6, {2, 4}}, 6, 8} == HumanEval.candidate({4, 5, {7, 6, {2, 4}}, 6, 8})\n    assert {6, {8, {4, 8}}} == HumanEval.candidate({5, 6, {8, 7, {4, 8}}, 7, 9})\n    assert {6, {8, {4, 6}}, 8, 10} == HumanEval.candidate({5, 6, {9, 8, {4, 6}}, 8, 10})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_581_surface_Area", "language": "elixir", "prompt": "# Write a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndefmodule HumanEval do\n  def candidate(b, s), do: surface_Area(b, s)\n  def surface_Area(b, s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'surface_Area' do\n    assert 33 == HumanEval.candidate(3, 4)\n    assert 56 == HumanEval.candidate(4, 5)\n    assert 5 == HumanEval.candidate(1, 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_583_catalan_number", "language": "elixir", "prompt": "# Write a function which returns nth catalan number.\n\ndefmodule HumanEval do\n  def candidate(num), do: catalan_number(num)\n  def catalan_number(num) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'catalan_number' do\n    assert 16796 == HumanEval.candidate(10)\n    assert 4862 == HumanEval.candidate(9)\n    assert 429 == HumanEval.candidate(7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_584_find_adverbs", "language": "elixir", "prompt": "# Write a function to find the first adverb ending with ly and its positions in a given string.\n\ndefmodule HumanEval do\n  def candidate(text), do: find_adverbs(text)\n  def find_adverbs(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_adverbs' do\n    assert \"0-7: Clearly\" == HumanEval.candidate(\"Clearly, he has no excuse for such behavior.\")\n    assert \"28-36: carefuly\" == HumanEval.candidate(\"Please handle the situation carefuly\")\n    assert \"18-25: quickly\" == HumanEval.candidate(\"Complete the task quickly\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_585_expensive_items", "language": "elixir", "prompt": "# Write a function to find the n most expensive items in a given dataset.\n\ndefmodule HumanEval do\n  def candidate(items, n), do: expensive_items(items, n)\n  def expensive_items(items, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'expensive_items' do\n    assert [%{\"name\" => \"Item-2\", \"price\" => 555.22}] == HumanEval.candidate([%{\"name\" => \"Item-1\", \"price\" => 101.1}, %{\"name\" => \"Item-2\", \"price\" => 555.22}], 1)\n    assert [%{\"name\" => \"Item-2\", \"price\" => 555.22}, %{\"name\" => \"Item-1\", \"price\" => 101.1}] == HumanEval.candidate([%{\"name\" => \"Item-1\", \"price\" => 101.1}, %{\"name\" => \"Item-2\", \"price\" => 555.22}, %{\"name\" => \"Item-3\", \"price\" => 45.09}], 2)\n    assert [%{\"name\" => \"Item-2\", \"price\" => 555.22}] == HumanEval.candidate([%{\"name\" => \"Item-1\", \"price\" => 101.1}, %{\"name\" => \"Item-2\", \"price\" => 555.22}, %{\"name\" => \"Item-3\", \"price\" => 45.09}, %{\"name\" => \"Item-4\", \"price\" => 22.75}], 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_586_split_Arr", "language": "elixir", "prompt": "# Write a python function to split a list at the nth eelment and add the first part to the end.\n\ndefmodule HumanEval do\n  def candidate(l, n), do: split_Arr(l, n)\n  def split_Arr(l, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'split_Arr' do\n    assert [5, 6, 52, 36, 12, 10] == HumanEval.candidate([12, 10, 5, 6, 52, 36], 2)\n    assert [2, 3, 4, 1] == HumanEval.candidate([1, 2, 3, 4], 1)\n    assert [3, 4, 5, 6, 7, 0, 1, 2] == HumanEval.candidate([0, 1, 2, 3, 4, 5, 6, 7], 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_587_list_tuple", "language": "elixir", "prompt": "# Write a function to convert a list to a tuple.\n\ndefmodule HumanEval do\n  def candidate(listx), do: list_tuple(listx)\n  def list_tuple(listx) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'list_tuple' do\n    assert {5, 10, 7, 4, 15, 3} == HumanEval.candidate([5, 10, 7, 4, 15, 3])\n    assert {2, 4, 5, 6, 2, 3, 4, 4, 7} == HumanEval.candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])\n    assert {58, 44, 56} == HumanEval.candidate([58, 44, 56])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_588_big_diff", "language": "elixir", "prompt": "# Write a python function to find the difference between largest and smallest value in a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: big_diff(nums)\n  def big_diff(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'big_diff' do\n    assert 3 == HumanEval.candidate([1, 2, 3, 4])\n    assert 8 == HumanEval.candidate([4, 5, 12])\n    assert 7 == HumanEval.candidate([9, 2, 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_589_perfect_squares", "language": "elixir", "prompt": "# Write a function to find perfect squares between two given numbers.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: perfect_squares(a, b)\n  def perfect_squares(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'perfect_squares' do\n    assert [1, 4, 9, 16, 25] == HumanEval.candidate(1, 30)\n    assert [64, 81, 100] == HumanEval.candidate(50, 100)\n    assert [100, 121, 144, 169, 196] == HumanEval.candidate(100, 200)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_58_opposite_Signs", "language": "elixir", "prompt": "# Write a python function to check whether the given two integers have opposite sign or not.\n\ndefmodule HumanEval do\n  def candidate(x, y), do: opposite_Signs(x, y)\n  def opposite_Signs(x, y) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'opposite_Signs' do\n    assert true == HumanEval.candidate(1, -2)\n    assert false == HumanEval.candidate(3, 2)\n    assert false == HumanEval.candidate(-10, -10)\n    assert true == HumanEval.candidate(-2, 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_591_swap_List", "language": "elixir", "prompt": "# Write a python function to interchange the first and last elements in a list.\n\ndefmodule HumanEval do\n  def candidate(newList), do: swap_List(newList)\n  def swap_List(newList) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'swap_List' do\n    assert [24, 35, 9, 56, 12] == HumanEval.candidate([12, 35, 9, 56, 24])\n    assert [3, 2, 1] == HumanEval.candidate([1, 2, 3])\n    assert [6, 5, 4] == HumanEval.candidate([4, 5, 6])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_592_sum_Of_product", "language": "elixir", "prompt": "# Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_Of_product(n)\n  def sum_Of_product(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_Of_product' do\n    assert 15 == HumanEval.candidate(3)\n    assert 56 == HumanEval.candidate(4)\n    assert 1 == HumanEval.candidate(1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_593_removezero_ip", "language": "elixir", "prompt": "# Write a function to remove leading zeroes from an ip address.\n\ndefmodule HumanEval do\n  def candidate(ip), do: removezero_ip(ip)\n  def removezero_ip(ip) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'removezero_ip' do\n    assert \"216.8.94.196\" == HumanEval.candidate(\"216.08.094.196\")\n    assert \"12.1.24\" == HumanEval.candidate(\"12.01.024\")\n    assert \"216.8.94.196\" == HumanEval.candidate(\"216.08.094.0196\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_594_diff_even_odd", "language": "elixir", "prompt": "# Write a function to find the difference of the first even and first odd number of a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: diff_even_odd(list1)\n  def diff_even_odd(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'diff_even_odd' do\n    assert 3 == HumanEval.candidate([1, 3, 5, 7, 4, 1, 6, 8])\n    assert 1 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert 9 == HumanEval.candidate([1, 5, 7, 9, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_595_min_Swaps", "language": "elixir", "prompt": "# Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndefmodule HumanEval do\n  def candidate(str1, str2), do: min_Swaps(str1, str2)\n  def min_Swaps(str1, str2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_Swaps' do\n    assert 1 == HumanEval.candidate(\"1101\", \"1110\")\n    assert \"Not Possible\" == HumanEval.candidate(\"111\", \"000\")\n    assert \"Not Possible\" == HumanEval.candidate(\"111\", \"110\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_597_find_kth", "language": "elixir", "prompt": "# Write a function to find kth element from the given two sorted arrays.\n\ndefmodule HumanEval do\n  def candidate(arr1, arr2, k), do: find_kth(arr1, arr2, k)\n  def find_kth(arr1, arr2, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_kth' do\n    assert 6 == HumanEval.candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n    assert 256 == HumanEval.candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7)\n    assert 8 == HumanEval.candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_598_armstrong_number", "language": "elixir", "prompt": "# Write a function to check whether the given number is armstrong or not.\n\ndefmodule HumanEval do\n  def candidate(number), do: armstrong_number(number)\n  def armstrong_number(number) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'armstrong_number' do\n    assert true == HumanEval.candidate(153)\n    assert false == HumanEval.candidate(259)\n    assert false == HumanEval.candidate(4458)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_599_sum_average", "language": "elixir", "prompt": "# Write a function to find sum and average of first n natural numbers.\n\ndefmodule HumanEval do\n  def candidate(number), do: sum_average(number)\n  def sum_average(number) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_average' do\n    assert {55, 5.5} == HumanEval.candidate(10)\n    assert {120, 8.0} == HumanEval.candidate(15)\n    assert {210, 10.5} == HumanEval.candidate(20)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_59_is_octagonal", "language": "elixir", "prompt": "# Write a function to find the nth octagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_octagonal(n)\n  def is_octagonal(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_octagonal' do\n    assert 65 == HumanEval.candidate(5)\n    assert 280 == HumanEval.candidate(10)\n    assert 645 == HumanEval.candidate(15)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_600_is_Even", "language": "elixir", "prompt": "# Write a python function to check whether the given number is even or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_Even(n)\n  def is_Even(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Even' do\n    assert false == HumanEval.candidate(1)\n    assert true == HumanEval.candidate(2)\n    assert false == HumanEval.candidate(3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_602_first_repeated_char", "language": "elixir", "prompt": "# Write a python function to find the first repeated character in a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: first_repeated_char(str1)\n  def first_repeated_char(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_repeated_char' do\n    assert \"a\" == HumanEval.candidate(\"abcabc\")\n    assert nil == HumanEval.candidate(\"abc\")\n    assert \"1\" == HumanEval.candidate(\"123123\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_603_get_ludic", "language": "elixir", "prompt": "# Write a function to get all lucid numbers smaller than or equal to a given integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: get_ludic(n)\n  def get_ludic(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_ludic' do\n    assert [1, 2, 3, 5, 7] == HumanEval.candidate(10)\n    assert [1, 2, 3, 5, 7, 11, 13, 17, 23, 25] == HumanEval.candidate(25)\n    assert [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43] == HumanEval.candidate(45)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_604_reverse_words", "language": "elixir", "prompt": "# Write a function to reverse words seperated by spaces in a given string.\n\ndefmodule HumanEval do\n  def candidate(s), do: reverse_words(s)\n  def reverse_words(s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_words' do\n    assert \"program python\" == HumanEval.candidate(\"python program\")\n    assert \"language java\" == HumanEval.candidate(\"java language\")\n    assert \"man indian\" == HumanEval.candidate(\"indian man\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_605_prime_num", "language": "elixir", "prompt": "# Write a function to check if the given integer is a prime number.\n\ndefmodule HumanEval do\n  def candidate(num), do: prime_num(num)\n  def prime_num(num) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'prime_num' do\n    assert true == HumanEval.candidate(13)\n    assert true == HumanEval.candidate(7)\n    assert false == HumanEval.candidate(-1010)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_606_radian_degree", "language": "elixir", "prompt": "# Write a function to convert degrees to radians.\n\ndefmodule HumanEval do\n  def candidate(degree), do: radian_degree(degree)\n  def radian_degree(degree) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'radian_degree' do\n    assert 1.5707963267948966 == HumanEval.candidate(90)\n    assert 1.0471975511965976 == HumanEval.candidate(60)\n    assert 2.0943951023931953 == HumanEval.candidate(120)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_607_find_literals", "language": "elixir", "prompt": "# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndefmodule HumanEval do\n  def candidate(text, pattern), do: find_literals(text, pattern)\n  def find_literals(text, pattern) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_literals' do\n    assert {\"fox\", 16, 19} == HumanEval.candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n    assert {\"crazy\", 16, 21} == HumanEval.candidate(\"Its been a very crazy procedure right\", \"crazy\")\n    assert {\"will\", 35, 39} == HumanEval.candidate(\"Hardest choices required strongest will\", \"will\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_608_bell_Number", "language": "elixir", "prompt": "# Write a python function to find nth bell number.\n\ndefmodule HumanEval do\n  def candidate(n), do: bell_Number(n)\n  def bell_Number(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bell_Number' do\n    assert 2 == HumanEval.candidate(2)\n    assert 5 == HumanEval.candidate(3)\n    assert 15 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_610_remove_kth_element", "language": "elixir", "prompt": "# Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndefmodule HumanEval do\n  def candidate(list1, L), do: remove_kth_element(list1, L)\n  def remove_kth_element(list1, L) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_kth_element' do\n    assert [1, 1, 3, 4, 4, 5, 1] == HumanEval.candidate([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    assert [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4] == HumanEval.candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n    assert [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10] == HumanEval.candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_611_max_of_nth", "language": "elixir", "prompt": "# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\ndefmodule HumanEval do\n  def candidate(test_list, N), do: max_of_nth(test_list, N)\n  def max_of_nth(test_list, N) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_of_nth' do\n    assert 19 == HumanEval.candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n    assert 10 == HumanEval.candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n    assert 11 == HumanEval.candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_612_merge", "language": "elixir", "prompt": "# Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndefmodule HumanEval do\n  def candidate(lst), do: merge(lst)\n  def merge(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'merge' do\n    assert [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]] == HumanEval.candidate([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]])\n    assert [[1, 3, 5, 7], [2, 4, 6, 8]] == HumanEval.candidate([[1, 2], [3, 4], [5, 6], [7, 8]])\n    assert [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]] == HumanEval.candidate([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_614_cummulative_sum", "language": "elixir", "prompt": "# Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: cummulative_sum(test_list)\n  def cummulative_sum(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'cummulative_sum' do\n    assert 30 == HumanEval.candidate([[1, 3], [5, 6, 7], [2, 6]])\n    assert 37 == HumanEval.candidate([[2, 4], [6, 7, 8], [3, 7]])\n    assert 44 == HumanEval.candidate([[3, 5], [7, 8, 9], [4, 8]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_615_average_tuple", "language": "elixir", "prompt": "# Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: average_tuple(nums)\n  def average_tuple(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'average_tuple' do\n    assert [30.5, 34.25, 27.0, 23.25] == HumanEval.candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])\n    assert [25.5, -18.0, 3.75] == HumanEval.candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])\n    assert [305.0, 342.5, 270.0, 232.5] == HumanEval.candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_616_tuple_modulo", "language": "elixir", "prompt": "# Write a function which takes two tuples of the same length and performs the element wise modulo.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: tuple_modulo(test_tup1, test_tup2)\n  def tuple_modulo(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_modulo' do\n    assert {0, 4, 5, 1} == HumanEval.candidate({10, 4, 5, 6}, {5, 6, 7, 5})\n    assert {5, 5, 6, 1} == HumanEval.candidate({11, 5, 6, 7}, {6, 7, 8, 6})\n    assert {5, 6, 7, 1} == HumanEval.candidate({12, 6, 7, 8}, {7, 8, 9, 7})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_617_min_Jumps", "language": "elixir", "prompt": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndefmodule HumanEval do\n  def candidate(steps, d), do: min_Jumps(steps, d)\n  def min_Jumps(steps, d) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_Jumps' do\n    assert 3.5 == HumanEval.candidate({3, 4}, 11)\n    assert 0 == HumanEval.candidate({3, 4}, 0)\n    assert 1 == HumanEval.candidate({11, 14}, 11)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_618_div_list", "language": "elixir", "prompt": "# Write a function to divide two lists element wise.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2), do: div_list(nums1, nums2)\n  def div_list(nums1, nums2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'div_list' do\n    assert [4.0, 2.5, 2.0] == HumanEval.candidate([4, 5, 6], [1, 2, 3])\n    assert [3.0, 0.5] == HumanEval.candidate([3, 2], [1, 4])\n    assert [1.8, 1.7142857142857142] == HumanEval.candidate([90, 120], [50, 70])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_619_move_num", "language": "elixir", "prompt": "# Write a function to move all the numbers to the end of the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: move_num(test_str)\n  def move_num(test_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'move_num' do\n    assert \"Iloveyouthreethousand1143553000\" == HumanEval.candidate(\"I1love143you55three3000thousand\")\n    assert \"AvengersAssemble124\" == HumanEval.candidate(\"Avengers124Assemble\")\n    assert \"Itsourpathtoseethingsdothings11121314151617\" == HumanEval.candidate(\"Its11our12path13to14see15things16do17things\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_61_count_Substrings", "language": "elixir", "prompt": "# Write a python function to count the number of substrings with the sum of digits equal to their length.\n\ndefmodule HumanEval do\n  def candidate(s), do: count_Substrings(s)\n  def count_Substrings(s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_Substrings' do\n    assert 6 == HumanEval.candidate(\"112112\")\n    assert 6 == HumanEval.candidate(\"111\")\n    assert 12 == HumanEval.candidate(\"1101112\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_622_get_median", "language": "elixir", "prompt": "# Write a function to find the median of two sorted lists of same size.\n\ndefmodule HumanEval do\n  def candidate(arr1, arr2, n), do: get_median(arr1, arr2, n)\n  def get_median(arr1, arr2, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_median' do\n    assert 16.0 == HumanEval.candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n    assert 8.5 == HumanEval.candidate([2, 4, 8, 9], [7, 13, 19, 28], 4)\n    assert 25.0 == HumanEval.candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_623_nth_nums", "language": "elixir", "prompt": "# Write a function to compute the n-th power of each number in a list.\n\ndefmodule HumanEval do\n  def candidate(nums, n), do: nth_nums(nums, n)\n  def nth_nums(nums, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'nth_nums' do\n    assert [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    assert [1000, 8000, 27000] == HumanEval.candidate([10, 20, 30], 3)\n    assert [248832, 759375] == HumanEval.candidate([12, 15], 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_624_is_upper", "language": "elixir", "prompt": "# Write a python function to convert a given string to uppercase.\n\ndefmodule HumanEval do\n  def candidate(string), do: is_upper(string)\n  def is_upper(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_upper' do\n    assert \"PERSON\" == HumanEval.candidate(\"person\")\n    assert \"FINAL\" == HumanEval.candidate(\"final\")\n    assert \"VALID\" == HumanEval.candidate(\"Valid\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_625_swap_List", "language": "elixir", "prompt": "# Write a python function to interchange the first and last element in a given list.\n\ndefmodule HumanEval do\n  def candidate(newList), do: swap_List(newList)\n  def swap_List(newList) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'swap_List' do\n    assert [3, 2, 1] == HumanEval.candidate([1, 2, 3])\n    assert [4, 2, 3, 4, 1] == HumanEval.candidate([1, 2, 3, 4, 4])\n    assert [6, 5, 4] == HumanEval.candidate([4, 5, 6])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_626_triangle_area", "language": "elixir", "prompt": "# Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndefmodule HumanEval do\n  def candidate(r), do: triangle_area(r)\n  def triangle_area(r) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'triangle_area' do\n    assert nil == HumanEval.candidate(-1)\n    assert 0 == HumanEval.candidate(0)\n    assert 4 == HumanEval.candidate(2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_627_find_First_Missing", "language": "elixir", "prompt": "# Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\ndefmodule HumanEval do\n  def candidate(array), do: find_First_Missing(array)\n  def find_First_Missing(array) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_First_Missing' do\n    assert 4 == HumanEval.candidate([0, 1, 2, 3])\n    assert 3 == HumanEval.candidate([0, 1, 2, 6, 9])\n    assert 0 == HumanEval.candidate([2, 3, 5, 8, 9])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_628_replace_spaces", "language": "elixir", "prompt": "# Write a function to replace all spaces in the given string with '%20'.\n\ndefmodule HumanEval do\n  def candidate(string), do: replace_spaces(string)\n  def replace_spaces(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_spaces' do\n    assert \"My%20Name%20is%20Dawood\" == HumanEval.candidate(\"My Name is Dawood\")\n    assert \"I%20am%20a%20Programmer\" == HumanEval.candidate(\"I am a Programmer\")\n    assert \"I%20love%20Coding\" == HumanEval.candidate(\"I love Coding\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_629_Split", "language": "elixir", "prompt": "# Write a python function to find even numbers from a list of numbers.\n\ndefmodule HumanEval do\n  def candidate(list), do: Split(list)\n  def Split(list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Split' do\n    assert [2, 4] == HumanEval.candidate([1, 2, 3, 4, 5])\n    assert [4, 6, 8, 0] == HumanEval.candidate([4, 5, 6, 7, 8, 0, 1])\n    assert [8, 12] == HumanEval.candidate([8, 12, 15, 19])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_62_smallest_num", "language": "elixir", "prompt": "# Write a python function to find smallest number in a list.\n\ndefmodule HumanEval do\n  def candidate(xs), do: smallest_num(xs)\n  def smallest_num(xs) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'smallest_num' do\n    assert 1 == HumanEval.candidate([10, 20, 1, 45, 99])\n    assert 1 == HumanEval.candidate([1, 2, 3])\n    assert 45 == HumanEval.candidate([45, 46, 50, 60])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_630_get_coordinates", "language": "elixir", "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: get_coordinates(test_tup)\n  def get_coordinates(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_coordinates' do\n    assert [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]] == HumanEval.candidate({3, 4})\n    assert [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]] == HumanEval.candidate({4, 5})\n    assert [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]] == HumanEval.candidate({5, 6})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_631_replace_spaces", "language": "elixir", "prompt": "# Write a function to replace whitespaces with an underscore and vice versa in a given string.\n\ndefmodule HumanEval do\n  def candidate(text), do: replace_spaces(text)\n  def replace_spaces(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_spaces' do\n    assert \"Jumanji_The_Jungle\" == HumanEval.candidate(\"Jumanji The Jungle\")\n    assert \"The Avengers\" == HumanEval.candidate(\"The_Avengers\")\n    assert \"Fast_and_Furious\" == HumanEval.candidate(\"Fast and Furious\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_632_move_zero", "language": "elixir", "prompt": "# Write a python function to move all zeroes to the end of the given list.\n\ndefmodule HumanEval do\n  def candidate(num_list), do: move_zero(num_list)\n  def move_zero(num_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'move_zero' do\n    assert [1, 2, 3, 4, 0, 0] == HumanEval.candidate([1, 0, 2, 0, 3, 4])\n    assert [2, 3, 2, 4, 5, 0, 0, 0, 0] == HumanEval.candidate([2, 3, 2, 0, 0, 4, 0, 5, 0])\n    assert [1, 1, 1, 0, 0] == HumanEval.candidate([0, 1, 0, 1, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "elixir", "prompt": "# Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: pair_xor_Sum(arr, n)\n  def pair_xor_Sum(arr, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pair_xor_Sum' do\n    assert 47 == HumanEval.candidate([5, 9, 7, 6], 4)\n    assert 12 == HumanEval.candidate([7, 3, 5], 3)\n    assert 4 == HumanEval.candidate([7, 3], 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_635_heap_sort", "language": "elixir", "prompt": "# Write a function to sort the given list.\n\ndefmodule HumanEval do\n  def candidate(iterable), do: heap_sort(iterable)\n  def heap_sort(iterable) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'heap_sort' do\n    assert [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == HumanEval.candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    assert [14, 22, 25, 25, 35, 58, 65, 75, 85] == HumanEval.candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    assert [1, 5, 7, 9] == HumanEval.candidate([7, 1, 9, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_637_noprofit_noloss", "language": "elixir", "prompt": "# Write a function to check whether the given amount has no profit and no loss\n\ndefmodule HumanEval do\n  def candidate(actual_cost, sale_amount), do: noprofit_noloss(actual_cost, sale_amount)\n  def noprofit_noloss(actual_cost, sale_amount) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'noprofit_noloss' do\n    assert false == HumanEval.candidate(1500, 1200)\n    assert true == HumanEval.candidate(100, 100)\n    assert false == HumanEval.candidate(2000, 5000)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_638_wind_chill", "language": "elixir", "prompt": "# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndefmodule HumanEval do\n  def candidate(v, t), do: wind_chill(v, t)\n  def wind_chill(v, t) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'wind_chill' do\n    assert 40 == HumanEval.candidate(120, 35)\n    assert 19 == HumanEval.candidate(40, 20)\n    assert 6 == HumanEval.candidate(10, 8)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_639_sample_nam", "language": "elixir", "prompt": "# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndefmodule HumanEval do\n  def candidate(sample_names), do: sample_nam(sample_names)\n  def sample_nam(sample_names) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sample_nam' do\n    assert 16 == HumanEval.candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"])\n    assert 10 == HumanEval.candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n    assert 6 == HumanEval.candidate([\"abcd\", \"Python\", \"abba\", \"aba\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_63_max_difference", "language": "elixir", "prompt": "# Write a function to find the maximum difference between available pairs in the given tuple list.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: max_difference(test_list)\n  def max_difference(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_difference' do\n    assert 7 == HumanEval.candidate([{3, 5}, {1, 7}, {10, 3}, {1, 2}])\n    assert 15 == HumanEval.candidate([{4, 6}, {2, 17}, {9, 13}, {11, 12}])\n    assert 23 == HumanEval.candidate([{12, 35}, {21, 27}, {13, 23}, {41, 22}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_640_remove_parenthesis", "language": "elixir", "prompt": "# Write a function to remove the parenthesis and what is inbetween them from a string.\n\ndefmodule HumanEval do\n  def candidate(items), do: remove_parenthesis(items)\n  def remove_parenthesis(items) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_parenthesis' do\n    assert \"python\" == HumanEval.candidate([\"python (chrome)\"])\n    assert \"string\" == HumanEval.candidate([\"string(.abc)\"])\n    assert \"alpha\" == HumanEval.candidate([\"alpha(num)\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_641_is_nonagonal", "language": "elixir", "prompt": "# Write a function to find the nth nonagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_nonagonal(n)\n  def is_nonagonal(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_nonagonal' do\n    assert 325 == HumanEval.candidate(10)\n    assert 750 == HumanEval.candidate(15)\n    assert 1089 == HumanEval.candidate(18)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "elixir", "prompt": "# Write a function that checks if a strings contains 'z', except at the start and end of the word.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_wordz_middle(text)\n  def text_match_wordz_middle(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_wordz_middle' do\n    assert true == HumanEval.candidate(\"pythonzabc.\")\n    assert false == HumanEval.candidate(\"zxyabc.\")\n    assert false == HumanEval.candidate(\"  lang  .\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "elixir", "prompt": "# Write a python function to reverse an array upto a given position.\n\ndefmodule HumanEval do\n  def candidate(input, k), do: reverse_Array_Upto_K(input, k)\n  def reverse_Array_Upto_K(input, k) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'reverse_Array_Upto_K' do\n    assert [4, 3, 2, 1, 5, 6] == HumanEval.candidate([1, 2, 3, 4, 5, 6], 4)\n    assert [5, 4, 6, 7] == HumanEval.candidate([4, 5, 6, 7], 2)\n    assert [7, 8, 9, 6, 5] == HumanEval.candidate([9, 8, 7, 6, 5], 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_64_subject_marks", "language": "elixir", "prompt": "# Write a function to sort a list of tuples using the second value of each tuple.\n\ndefmodule HumanEval do\n  def candidate(subjectmarks), do: subject_marks(subjectmarks)\n  def subject_marks(subjectmarks) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'subject_marks' do\n    assert [{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}] == HumanEval.candidate([{\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}, {\"Social sciences\", 82}])\n    assert [{\"Social\", 33}, {\"Telugu\", 49}, {\"Hindhi\", 54}] == HumanEval.candidate([{\"Telugu\", 49}, {\"Hindhi\", 54}, {\"Social\", 33}])\n    assert [{\"Biology\", 45}, {\"Physics\", 96}, {\"Chemistry\", 97}] == HumanEval.candidate([{\"Physics\", 96}, {\"Chemistry\", 97}, {\"Biology\", 45}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_65_recursive_list_sum", "language": "elixir", "prompt": "# Write a function to flatten a list and sum all of its elements.\n\ndefmodule HumanEval do\n  def candidate(data_list), do: recursive_list_sum(data_list)\n  def recursive_list_sum(data_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'recursive_list_sum' do\n    assert 21 == HumanEval.candidate([1, 2, [3, 4], [5, 6]])\n    assert 106 == HumanEval.candidate([7, 10, [15, 14], [19, 41]])\n    assert 210 == HumanEval.candidate([10, 20, [30, 40], [50, 60]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_66_pos_count", "language": "elixir", "prompt": "# Write a python function to count the number of positive numbers in a list.\n\ndefmodule HumanEval do\n  def candidate(list), do: pos_count(list)\n  def pos_count(list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pos_count' do\n    assert 2 == HumanEval.candidate([1, -2, 3, -4])\n    assert 3 == HumanEval.candidate([3, 4, 5, -1])\n    assert 4 == HumanEval.candidate([1, 2, 3, 4])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_67_bell_number", "language": "elixir", "prompt": "# Write a function to find the number of ways to partition a set of Bell numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: bell_number(n)\n  def bell_number(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'bell_number' do\n    assert 2 == HumanEval.candidate(2)\n    assert 115975 == HumanEval.candidate(10)\n    assert 6775685320645824322581483068371419745979053216268760300 == HumanEval.candidate(56)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_68_is_Monotonic", "language": "elixir", "prompt": "# Write a python function to check whether the given array is monotonic or not.\n\ndefmodule HumanEval do\n  def candidate(A), do: is_Monotonic(A)\n  def is_Monotonic(A) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Monotonic' do\n    assert true == HumanEval.candidate([6, 5, 4, 4])\n    assert true == HumanEval.candidate([1, 2, 2, 3])\n    assert false == HumanEval.candidate([1, 3, 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_69_is_sublist", "language": "elixir", "prompt": "# Write a function to check whether a list contains the given sublist or not.\n\ndefmodule HumanEval do\n  def candidate(l, s), do: is_sublist(l, s)\n  def is_sublist(l, s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_sublist' do\n    assert false == HumanEval.candidate([2, 4, 3, 5, 7], [3, 7])\n    assert true == HumanEval.candidate([2, 4, 3, 5, 7], [4, 3])\n    assert false == HumanEval.candidate([2, 4, 3, 5, 7], [1, 6])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "elixir", "prompt": "# Write a python function to check whether the two numbers differ at one bit position only or not.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: differ_At_One_Bit_Pos(a, b)\n  def differ_At_One_Bit_Pos(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'differ_At_One_Bit_Pos' do\n    assert true == HumanEval.candidate(13, 9)\n    assert false == HumanEval.candidate(15, 8)\n    assert false == HumanEval.candidate(2, 4)\n    assert true == HumanEval.candidate(2, 3)\n    assert true == HumanEval.candidate(5, 1)\n    assert true == HumanEval.candidate(1, 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_70_get_equal", "language": "elixir", "prompt": "# Write a function to find whether all the given lists have equal length or not.\n\ndefmodule HumanEval do\n  def candidate(Input), do: get_equal(Input)\n  def get_equal(Input) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_equal' do\n    assert true == HumanEval.candidate([[11, 22, 33], [44, 55, 66]])\n    assert false == HumanEval.candidate([[1, 2, 3], [4, 5, 6, 7]])\n    assert true == HumanEval.candidate([[1, 2], [3, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_71_comb_sort", "language": "elixir", "prompt": "# Write a function to sort a list of elements.\n\ndefmodule HumanEval do\n  def candidate(nums), do: comb_sort(nums)\n  def comb_sort(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'comb_sort' do\n    assert [5, 15, 25, 37, 79] == HumanEval.candidate([5, 15, 37, 25, 79])\n    assert [15, 19, 22, 32, 41] == HumanEval.candidate([41, 32, 15, 19, 22])\n    assert [13, 15, 47, 99] == HumanEval.candidate([99, 15, 13, 47])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "elixir", "prompt": "# Write a function to add a dictionary to the tuple. The output should be a tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup, test_dict), do: add_dict_to_tuple(test_tup, test_dict)\n  def add_dict_to_tuple(test_tup, test_dict) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_dict_to_tuple' do\n    assert {4, 5, 6, %{\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}} == HumanEval.candidate({4, 5, 6}, %{\"MSAM\" => 1, \"is\" => 2, \"best\" => 3})\n    assert {1, 2, 3, %{\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}} == HumanEval.candidate({1, 2, 3}, %{\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4})\n    assert {8, 9, 10, %{\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}} == HumanEval.candidate({8, 9, 10}, %{\"POS\" => 3, \"is\" => 4, \"Okay\" => 5})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "elixir", "prompt": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\ndefmodule HumanEval do\n  def candidate(cost), do: maxAverageOfPath(cost)\n  def maxAverageOfPath(cost) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'maxAverageOfPath' do\n    assert 5.2 == HumanEval.candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n    assert 6.2 == HumanEval.candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]])\n    assert 7.2 == HumanEval.candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]])\n    assert 5.8 == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_722_filter_data", "language": "elixir", "prompt": "# The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\ndefmodule HumanEval do\n  def candidate(students, h, w), do: filter_data(students, h, w)\n  def filter_data(students, h, w) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'filter_data' do\n    assert %{\"Cierra Vega\" => {6.2, 70}} == HumanEval.candidate(%{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}}, 6.0, 70)\n    assert %{\"Cierra Vega\" => {6.2, 70}, \"Kierra Gentry\" => {6.0, 68}} == HumanEval.candidate(%{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}}, 5.9, 67)\n    assert %{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}} == HumanEval.candidate(%{\"Cierra Vega\" => {6.2, 70}, \"Alden Cantrell\" => {5.9, 65}, \"Kierra Gentry\" => {6.0, 68}, \"Pierre Cox\" => {5.8, 66}}, 5.7, 64)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_723_count_same_pair", "language": "elixir", "prompt": "# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\ndefmodule HumanEval do\n  def candidate(nums1, nums2), do: count_same_pair(nums1, nums2)\n  def count_same_pair(nums1, nums2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_same_pair' do\n    assert 4 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n    assert 11 == HumanEval.candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    assert 1 == HumanEval.candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    assert 3 == HumanEval.candidate([0, 1, 1, 2], [0, 1, 2, 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_724_power_base_sum", "language": "elixir", "prompt": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\ndefmodule HumanEval do\n  def candidate(base, power), do: power_base_sum(base, power)\n  def power_base_sum(base, power) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'power_base_sum' do\n    assert 115 == HumanEval.candidate(2, 100)\n    assert 37 == HumanEval.candidate(8, 10)\n    assert 62 == HumanEval.candidate(8, 15)\n    assert 9 == HumanEval.candidate(3, 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_725_extract_quotation", "language": "elixir", "prompt": "# Write a function to extract values between quotation marks \" \" of the given string.\n\ndefmodule HumanEval do\n  def candidate(text1), do: extract_quotation(text1)\n  def extract_quotation(text1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_quotation' do\n    assert [\"A53\", \"multi\", \"Processor\"] == HumanEval.candidate(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")\n    assert [\"favorite\", \"apps\"] == HumanEval.candidate(\"Cast your \"favorite\" entertainment \"apps\"\")\n    assert [\"4k Ultra HD\", \"HDR 10\"] == HumanEval.candidate(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")\n    assert [] == HumanEval.candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_726_multiply_elements", "language": "elixir", "prompt": "# Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: multiply_elements(test_tup)\n  def multiply_elements(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'multiply_elements' do\n    assert [5, 35, 56, 80] == HumanEval.candidate([1, 5, 7, 8, 10])\n    assert [8, 20, 30, 42] == HumanEval.candidate([2, 4, 5, 6, 7])\n    assert [156, 182, 126, 135] == HumanEval.candidate([12, 13, 14, 9, 15])\n    assert [] == HumanEval.candidate([12])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_728_sum_list", "language": "elixir", "prompt": "# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndefmodule HumanEval do\n  def candidate(lst1, lst2), do: sum_list(lst1, lst2)\n  def sum_list(lst1, lst2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_list' do\n    assert [25, 45, 65] == HumanEval.candidate([10, 20, 30], [15, 25, 35])\n    assert [6, 8, 10] == HumanEval.candidate([1, 2, 3], [5, 6, 7])\n    assert [30, 65, 105] == HumanEval.candidate([15, 20, 30], [15, 45, 75])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_72_dif_Square", "language": "elixir", "prompt": "# Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: dif_Square(n)\n  def dif_Square(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'dif_Square' do\n    assert true == HumanEval.candidate(5)\n    assert false == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(15)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "elixir", "prompt": "# Write a function to remove consecutive duplicates of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: consecutive_duplicates(nums)\n  def consecutive_duplicates(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'consecutive_duplicates' do\n    assert [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4] == HumanEval.candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    assert [10, 15, 19, 18, 17, 26, 17, 18, 10] == HumanEval.candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    assert [\"a\", \"b\", \"c\", \"d\"] == HumanEval.candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n    assert [\"a\", \"b\", \"c\", \"d\", \"a\"] == HumanEval.candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "elixir", "prompt": "# Write a function to find the lateral surface area of a cone given radius r and the height h.\n\ndefmodule HumanEval do\n  def candidate(r, h), do: lateralsurface_cone(r, h)\n  def lateralsurface_cone(r, h) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lateralsurface_cone' do\n    assert 204.20352248333654 == HumanEval.candidate(5, 12)\n    assert 566.3586699569488 == HumanEval.candidate(10, 15)\n    assert 1521.8090132193388 == HumanEval.candidate(19, 17)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_732_replace_specialchar", "language": "elixir", "prompt": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n\ndefmodule HumanEval do\n  def candidate(text), do: replace_specialchar(text)\n  def replace_specialchar(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'replace_specialchar' do\n    assert \"Python:language::Programming:language:\" == HumanEval.candidate(\"Python language, Programming language.\")\n    assert \"a:b:c:d:e:f\" == HumanEval.candidate(\"a b c,d e f\")\n    assert \"ram:reshma:ram:rahim\" == HumanEval.candidate(\"ram reshma,ram rahim\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_733_find_first_occurrence", "language": "elixir", "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\n\ndefmodule HumanEval do\n  def candidate(A, x), do: find_first_occurrence(A, x)\n  def find_first_occurrence(A, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_first_occurrence' do\n    assert 1 == HumanEval.candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    assert 2 == HumanEval.candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    assert 4 == HumanEval.candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "elixir", "prompt": "# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\ndefmodule HumanEval do\n  def candidate(arr), do: sum_Of_Subarray_Prod(arr)\n  def sum_Of_Subarray_Prod(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_Of_Subarray_Prod' do\n    assert 20 == HumanEval.candidate([1, 2, 3])\n    assert 5 == HumanEval.candidate([1, 2])\n    assert 84 == HumanEval.candidate([1, 2, 3, 4])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "elixir", "prompt": "# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndefmodule HumanEval do\n  def candidate(n), do: toggle_middle_bits(n)\n  def toggle_middle_bits(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'toggle_middle_bits' do\n    assert 15 == HumanEval.candidate(9)\n    assert 12 == HumanEval.candidate(10)\n    assert 13 == HumanEval.candidate(11)\n    assert 127 == HumanEval.candidate(65)\n    assert 115 == HumanEval.candidate(77)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_736_left_insertion", "language": "elixir", "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\ndefmodule HumanEval do\n  def candidate(a, x), do: left_insertion(a, x)\n  def left_insertion(a, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'left_insertion' do\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 6)\n    assert 2 == HumanEval.candidate([1, 2, 4, 5], 3)\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_737_check_str", "language": "elixir", "prompt": "# Write a function to check whether the given string is starting with a vowel or not using regex.\n\ndefmodule HumanEval do\n  def candidate(string), do: check_str(string)\n  def check_str(string) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_str' do\n    assert true == HumanEval.candidate(\"annie\")\n    assert false == HumanEval.candidate(\"dawood\")\n    assert true == HumanEval.candidate(\"Else\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_738_geometric_sum", "language": "elixir", "prompt": "# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndefmodule HumanEval do\n  def candidate(n), do: geometric_sum(n)\n  def geometric_sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'geometric_sum' do\n    assert 1.9921875 == HumanEval.candidate(7)\n    assert 1.9375 == HumanEval.candidate(4)\n    assert 1.99609375 == HumanEval.candidate(8)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_739_find_Index", "language": "elixir", "prompt": "# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndefmodule HumanEval do\n  def candidate(n), do: find_Index(n)\n  def find_Index(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Index' do\n    assert 4 == HumanEval.candidate(2)\n    assert 14 == HumanEval.candidate(3)\n    assert 45 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_740_tuple_to_dict", "language": "elixir", "prompt": "# Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: tuple_to_dict(test_tup)\n  def tuple_to_dict(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_to_dict' do\n    assert %{1 => 5, 7 => 10, 13 => 5} == HumanEval.candidate({1, 5, 7, 10, 13, 5})\n    assert %{1 => 2, 3 => 4, 5 => 6} == HumanEval.candidate({1, 2, 3, 4, 5, 6})\n    assert %{7 => 8, 9 => 10, 11 => 12} == HumanEval.candidate({7, 8, 9, 10, 11, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_741_all_Characters_Same", "language": "elixir", "prompt": "# Write a python function to check whether all the characters are same or not.\n\ndefmodule HumanEval do\n  def candidate(s), do: all_Characters_Same(s)\n  def all_Characters_Same(s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'all_Characters_Same' do\n    assert false == HumanEval.candidate(\"python\")\n    assert true == HumanEval.candidate(\"aaa\")\n    assert false == HumanEval.candidate(\"data\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_742_area_tetrahedron", "language": "elixir", "prompt": "# Write a function to caluclate the area of a tetrahedron.\n\ndefmodule HumanEval do\n  def candidate(side), do: area_tetrahedron(side)\n  def area_tetrahedron(side) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'area_tetrahedron' do\n    assert 15.588457268119894 == HumanEval.candidate(3)\n    assert 692.8203230275509 == HumanEval.candidate(20)\n    assert 173.20508075688772 == HumanEval.candidate(10)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_743_rotate_right", "language": "elixir", "prompt": "# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndefmodule HumanEval do\n  def candidate(list, m), do: rotate_right(list, m)\n  def rotate_right(list, m) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rotate_right' do\n    assert [8, 9, 10, 1, 2, 3, 4, 5, 6, 7] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    assert [9, 10, 1, 2, 3, 4, 5, 6, 7, 8] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    assert [6, 7, 8, 9, 10, 1, 2, 3, 4, 5] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_744_check_none", "language": "elixir", "prompt": "# Write a function to check if the given tuple has any none value or not.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: check_none(test_tup)\n  def check_none(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_none' do\n    assert true == HumanEval.candidate({10, 4, 5, 6, nil})\n    assert false == HumanEval.candidate({7, 8, 9, 11, 14})\n    assert true == HumanEval.candidate({1, 2, 3, 4, nil})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_745_divisible_by_digits", "language": "elixir", "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndefmodule HumanEval do\n  def candidate(startnum, endnum), do: divisible_by_digits(startnum, endnum)\n  def divisible_by_digits(startnum, endnum) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'divisible_by_digits' do\n    assert [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] == HumanEval.candidate(1, 22)\n    assert [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15] == HumanEval.candidate(1, 15)\n    assert [22, 24] == HumanEval.candidate(20, 25)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_746_sector_area", "language": "elixir", "prompt": "# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndefmodule HumanEval do\n  def candidate(r, a), do: sector_area(r, a)\n  def sector_area(r, a) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sector_area' do\n    assert 6.283185307179586 == HumanEval.candidate(4, 45)\n    assert 31.808625617596654 == HumanEval.candidate(9, 45)\n    assert nil == HumanEval.candidate(9, 361)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_747_lcs_of_three", "language": "elixir", "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndefmodule HumanEval do\n  def candidate(X, Y, Z), do: lcs_of_three(X, Y, Z)\n  def lcs_of_three(X, Y, Z) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'lcs_of_three' do\n    assert 2 == HumanEval.candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\")\n    assert 5 == HumanEval.candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\")\n    assert 3 == HumanEval.candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_748_capital_words_spaces", "language": "elixir", "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\n\ndefmodule HumanEval do\n  def candidate(str1), do: capital_words_spaces(str1)\n  def capital_words_spaces(str1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'capital_words_spaces' do\n    assert \"Python\" == HumanEval.candidate(\"Python\")\n    assert \"Python Programming Examples\" == HumanEval.candidate(\"PythonProgrammingExamples\")\n    assert \"Get Ready To Be Coding Freak\" == HumanEval.candidate(\"GetReadyToBeCodingFreak\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "elixir", "prompt": "# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\ndefmodule HumanEval do\n  def candidate(nums_str), do: sort_numeric_strings(nums_str)\n  def sort_numeric_strings(nums_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sort_numeric_strings' do\n    assert [-500, -12, 0, 4, 7, 12, 45, 100, 200] == HumanEval.candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"])\n    assert [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9] == HumanEval.candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"])\n    assert [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17] == HumanEval.candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_74_is_samepatterns", "language": "elixir", "prompt": "# Write a function to check whether it follows the sequence given in the patterns array.\n\ndefmodule HumanEval do\n  def candidate(colors, patterns), do: is_samepatterns(colors, patterns)\n  def is_samepatterns(colors, patterns) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_samepatterns' do\n    assert true == HumanEval.candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n    assert false == HumanEval.candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n    assert false == HumanEval.candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_750_add_tuple", "language": "elixir", "prompt": "# Write a function to add the given tuple to the given list.\n\ndefmodule HumanEval do\n  def candidate(test_list, test_tup), do: add_tuple(test_list, test_tup)\n  def add_tuple(test_list, test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'add_tuple' do\n    assert [5, 6, 7, 9, 10] == HumanEval.candidate([5, 6, 7], {9, 10})\n    assert [6, 7, 8, 10, 11] == HumanEval.candidate([6, 7, 8], {10, 11})\n    assert [7, 8, 9, 11, 12] == HumanEval.candidate([7, 8, 9], {11, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_751_check_min_heap", "language": "elixir", "prompt": "# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\ndefmodule HumanEval do\n  def candidate(arr), do: check_min_heap(arr)\n  def check_min_heap(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_min_heap' do\n    assert true == HumanEval.candidate([1, 2, 3, 4, 5, 6])\n    assert true == HumanEval.candidate([2, 3, 4, 5, 10, 15])\n    assert false == HumanEval.candidate([2, 10, 4, 5, 3, 15])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_752_jacobsthal_num", "language": "elixir", "prompt": "# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\ndefmodule HumanEval do\n  def candidate(n), do: jacobsthal_num(n)\n  def jacobsthal_num(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'jacobsthal_num' do\n    assert 11 == HumanEval.candidate(5)\n    assert 1 == HumanEval.candidate(2)\n    assert 5 == HumanEval.candidate(4)\n    assert 2731 == HumanEval.candidate(13)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_753_min_k", "language": "elixir", "prompt": "# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndefmodule HumanEval do\n  def candidate(test_list, K), do: min_k(test_list, K)\n  def min_k(test_list, K) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'min_k' do\n    assert [{\"Akash\", 2}, {\"Akshat\", 4}] == HumanEval.candidate([{\"Manjeet\", 10}, {\"Akshat\", 4}, {\"Akash\", 2}, {\"Nikhil\", 8}], 2)\n    assert [{\"Akash\", 3}, {\"Angat\", 5}, {\"Nepin\", 9}] == HumanEval.candidate([{\"Sanjeev\", 11}, {\"Angat\", 5}, {\"Akash\", 3}, {\"Nepin\", 9}], 3)\n    assert [{\"Ayesha\", 9}] == HumanEval.candidate([{\"tanmay\", 14}, {\"Amer\", 11}, {\"Ayesha\", 9}, {\"SKD\", 16}], 1)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_754_extract_index_list", "language": "elixir", "prompt": "# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\ndefmodule HumanEval do\n  def candidate(l1, l2, l3), do: extract_index_list(l1, l2, l3)\n  def extract_index_list(l1, l2, l3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'extract_index_list' do\n    assert [1, 7] == HumanEval.candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n    assert [1, 6] == HumanEval.candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n    assert [1, 5] == HumanEval.candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n    assert [] == HumanEval.candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_755_second_smallest", "language": "elixir", "prompt": "# Write a function to find the second smallest number in a list.\n\ndefmodule HumanEval do\n  def candidate(numbers), do: second_smallest(numbers)\n  def second_smallest(numbers) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'second_smallest' do\n    assert -2 == HumanEval.candidate([1, 2, -8, -2, 0, -2])\n    assert -0.5 == HumanEval.candidate([1, 1, -0.5, 0, 2, -2, -2])\n    assert nil == HumanEval.candidate([2, 2])\n    assert nil == HumanEval.candidate([2, 2, 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_756_text_match_zero_one", "language": "elixir", "prompt": "# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_zero_one(text)\n  def text_match_zero_one(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_zero_one' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abbbba\")\n    assert true == HumanEval.candidate(\"dsabbbba\")\n    assert false == HumanEval.candidate(\"asbbbba\")\n    assert true == HumanEval.candidate(\"abaaa\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "elixir", "prompt": "# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\ndefmodule HumanEval do\n  def candidate(test_list), do: count_reverse_pairs(test_list)\n  def count_reverse_pairs(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_reverse_pairs' do\n    assert 2 == HumanEval.candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n    assert 1 == HumanEval.candidate([\"geeks\", \"best\", \"for\", \"skeeg\"])\n    assert 2 == HumanEval.candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_759_is_decimal", "language": "elixir", "prompt": "# Write a function to check whether a given string is a decimal number with a precision of 2.\n\ndefmodule HumanEval do\n  def candidate(num), do: is_decimal(num)\n  def is_decimal(num) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_decimal' do\n    assert true == HumanEval.candidate(\"123.11\")\n    assert false == HumanEval.candidate(\"e666.86\")\n    assert false == HumanEval.candidate(\"3.124587\")\n    assert true == HumanEval.candidate(\"1.11\")\n    assert false == HumanEval.candidate(\"1.1.11\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_75_find_tuples", "language": "elixir", "prompt": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndefmodule HumanEval do\n  def candidate(test_list, K), do: find_tuples(test_list, K)\n  def find_tuples(test_list, K) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_tuples' do\n    assert [{6, 24, 12}] == HumanEval.candidate([{6, 24, 12}, {7, 9, 6}, {12, 18, 21}], 6)\n    assert [{5, 25, 30}] == HumanEval.candidate([{5, 25, 30}, {4, 2, 3}, {7, 8, 9}], 5)\n    assert [{8, 16, 4}] == HumanEval.candidate([{7, 9, 16}, {8, 16, 4}, {19, 17, 18}], 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_760_unique_Element", "language": "elixir", "prompt": "# Write a python function to check whether a list of numbers contains only one distinct element or not.\n\ndefmodule HumanEval do\n  def candidate(arr), do: unique_Element(arr)\n  def unique_Element(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'unique_Element' do\n    assert true == HumanEval.candidate([1, 1, 1])\n    assert false == HumanEval.candidate([1, 2, 1, 2])\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "elixir", "prompt": "# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\ndefmodule HumanEval do\n  def candidate(monthnum3), do: check_monthnumber_number(monthnum3)\n  def check_monthnumber_number(monthnum3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_monthnumber_number' do\n    assert true == HumanEval.candidate(6)\n    assert false == HumanEval.candidate(2)\n    assert false == HumanEval.candidate(12)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_763_find_min_diff", "language": "elixir", "prompt": "# Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\ndefmodule HumanEval do\n  def candidate(arr, n), do: find_min_diff(arr, n)\n  def find_min_diff(arr, n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_min_diff' do\n    assert 1 == HumanEval.candidate([1, 5, 3, 19, 18, 25], 6)\n    assert 1 == HumanEval.candidate([4, 3, 2, 6], 4)\n    assert 4 == HumanEval.candidate([30, 5, 20, 9], 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_764_number_ctr", "language": "elixir", "prompt": "# Write a python function to count number of digits in a given string.\n\ndefmodule HumanEval do\n  def candidate(str), do: number_ctr(str)\n  def number_ctr(str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'number_ctr' do\n    assert 1 == HumanEval.candidate(\"program2bedone\")\n    assert 1 == HumanEval.candidate(\"3wonders\")\n    assert 3 == HumanEval.candidate(\"123\")\n    assert 3 == HumanEval.candidate(\"3wond-1ers2\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_765_is_polite", "language": "elixir", "prompt": "# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndefmodule HumanEval do\n  def candidate(n), do: is_polite(n)\n  def is_polite(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_polite' do\n    assert 11 == HumanEval.candidate(7)\n    assert 7 == HumanEval.candidate(4)\n    assert 13 == HumanEval.candidate(9)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_766_pair_wise", "language": "elixir", "prompt": "# Write a function to return a list of all pairs of consecutive items in a given list.\n\ndefmodule HumanEval do\n  def candidate(l1), do: pair_wise(l1)\n  def pair_wise(l1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pair_wise' do\n    assert [{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}] == HumanEval.candidate([1, 1, 2, 3, 3, 4, 4, 5])\n    assert [{1, 5}, {5, 7}, {7, 9}, {9, 10}] == HumanEval.candidate([1, 5, 7, 9, 10])\n    assert [{5, 1}, {1, 9}, {9, 7}, {7, 10}] == HumanEval.candidate([5, 1, 9, 7, 10])\n    assert [{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_767_get_pairs_count", "language": "elixir", "prompt": "# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\ndefmodule HumanEval do\n  def candidate(arr, sum), do: get_pairs_count(arr, sum)\n  def get_pairs_count(arr, sum) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_pairs_count' do\n    assert 6 == HumanEval.candidate([1, 1, 1, 1], 2)\n    assert 3 == HumanEval.candidate([1, 5, 7, -1, 5], 6)\n    assert 1 == HumanEval.candidate([1, -2, 3], 1)\n    assert 1 == HumanEval.candidate([-1, -2, 3], -3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_769_Diff", "language": "elixir", "prompt": "# Write a python function to get the difference between two lists.\n\ndefmodule HumanEval do\n  def candidate(li1, li2), do: Diff(li1, li2)\n  def Diff(li1, li2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Diff' do\n    assert [10, 20, 30, 15] == HumanEval.candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    assert [2, 3, 4, 5, 6, 7] == HumanEval.candidate([1, 2, 3, 4, 5], [6, 7, 1])\n    assert [2, 3, 6, 7] == HumanEval.candidate([1, 2, 3], [6, 7, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_770_odd_num_sum", "language": "elixir", "prompt": "# Write a python function to find the sum of fourth power of first n odd natural numbers.\n\ndefmodule HumanEval do\n  def candidate(n), do: odd_num_sum(n)\n  def odd_num_sum(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_num_sum' do\n    assert 82 == HumanEval.candidate(2)\n    assert 707 == HumanEval.candidate(3)\n    assert 3108 == HumanEval.candidate(4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_771_check_expression", "language": "elixir", "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\ndefmodule HumanEval do\n  def candidate(exp), do: check_expression(exp)\n  def check_expression(exp) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_expression' do\n    assert true == HumanEval.candidate(\"{()}[{}]\")\n    assert false == HumanEval.candidate(\"{()}[{]\")\n    assert true == HumanEval.candidate(\"{()}[{}][]({})\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_772_remove_length", "language": "elixir", "prompt": "# Write a function to remove all the words with k length in the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str, K), do: remove_length(test_str, K)\n  def remove_length(test_str, K) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_length' do\n    assert \"person is most value\" == HumanEval.candidate(\"The person is most value tet\", 3)\n    assert \"If you me about ok\" == HumanEval.candidate(\"If you told me about this ok\", 4)\n    assert \"Forces of darkeness is the\" == HumanEval.candidate(\"Forces of darkeness is come into the play\", 4)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_773_occurance_substring", "language": "elixir", "prompt": "# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\ndefmodule HumanEval do\n  def candidate(text, pattern), do: occurance_substring(text, pattern)\n  def occurance_substring(text, pattern) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'occurance_substring' do\n    assert {\"python\", 0, 6} == HumanEval.candidate(\"python programming, python language\", \"python\")\n    assert {\"programming\", 7, 18} == HumanEval.candidate(\"python programming,programming language\", \"programming\")\n    assert {\"language\", 31, 39} == HumanEval.candidate(\"python programming,programming language\", \"language\")\n    assert nil == HumanEval.candidate(\"c++ programming, c++ language\", \"python\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_775_odd_position", "language": "elixir", "prompt": "# Write a python function to check whether every odd index contains odd numbers of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: odd_position(nums)\n  def odd_position(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_position' do\n    assert true == HumanEval.candidate([2, 1, 4, 3, 6, 7, 6, 3])\n    assert true == HumanEval.candidate([4, 1, 2])\n    assert false == HumanEval.candidate([1, 2, 3])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_776_count_vowels", "language": "elixir", "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: count_vowels(test_str)\n  def count_vowels(test_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_vowels' do\n    assert 7 == HumanEval.candidate(\"bestinstareels\")\n    assert 12 == HumanEval.candidate(\"partofthejourneyistheend\")\n    assert 5 == HumanEval.candidate(\"amazonprime\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_777_find_sum", "language": "elixir", "prompt": "# Write a python function to find the sum of non-repeated elements in a given list.\n\ndefmodule HumanEval do\n  def candidate(arr), do: find_sum(arr)\n  def find_sum(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_sum' do\n    assert 21 == HumanEval.candidate([1, 2, 3, 1, 1, 4, 5, 6])\n    assert 71 == HumanEval.candidate([1, 10, 9, 4, 2, 10, 10, 45, 4])\n    assert 78 == HumanEval.candidate([12, 10, 9, 45, 2, 10, 10, 45, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "elixir", "prompt": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\n\ndefmodule HumanEval do\n  def candidate(list1), do: pack_consecutive_duplicates(list1)\n  def pack_consecutive_duplicates(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'pack_consecutive_duplicates' do\n    assert [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]] == HumanEval.candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    assert [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]] == HumanEval.candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    assert [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]] == HumanEval.candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_77_is_Diff", "language": "elixir", "prompt": "# Write a python function to find whether a number is divisible by 11.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_Diff(n)\n  def is_Diff(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_Diff' do\n    assert false == HumanEval.candidate(12345)\n    assert true == HumanEval.candidate(1212112)\n    assert false == HumanEval.candidate(1212)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_780_find_combinations", "language": "elixir", "prompt": "# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\ndefmodule HumanEval do\n  def candidate(test_list), do: find_combinations(test_list)\n  def find_combinations(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_combinations' do\n    assert [{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}] == HumanEval.candidate([{2, 4}, {6, 7}, {5, 1}, {6, 10}])\n    assert [{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}] == HumanEval.candidate([{3, 5}, {7, 8}, {6, 2}, {7, 11}])\n    assert [{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}] == HumanEval.candidate([{4, 6}, {8, 9}, {7, 3}, {8, 12}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_781_count_divisors", "language": "elixir", "prompt": "# Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\ndefmodule HumanEval do\n  def candidate(n), do: count_divisors(n)\n  def count_divisors(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_divisors' do\n    assert true == HumanEval.candidate(10)\n    assert false == HumanEval.candidate(100)\n    assert true == HumanEval.candidate(125)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_782_odd_length_sum", "language": "elixir", "prompt": "# Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\ndefmodule HumanEval do\n  def candidate(arr), do: odd_length_sum(arr)\n  def odd_length_sum(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'odd_length_sum' do\n    assert 14 == HumanEval.candidate([1, 2, 4])\n    assert 15 == HumanEval.candidate([1, 2, 1, 2])\n    assert 8 == HumanEval.candidate([1, 7])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "elixir", "prompt": "# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\ndefmodule HumanEval do\n  def candidate(r, g, b), do: rgb_to_hsv(r, g, b)\n  def rgb_to_hsv(r, g, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'rgb_to_hsv' do\n    assert [0.0, 0.0, 100.0] == HumanEval.candidate(255, 255, 255)\n    assert [120.0, 100.0, 84.31372549019608] == HumanEval.candidate(0, 215, 0)\n    assert [149.26829268292684, 95.34883720930233, 84.31372549019608] == HumanEval.candidate(10, 215, 110)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_784_mul_even_odd", "language": "elixir", "prompt": "# Write a function to find the product of first even and odd number of a given list.\n\ndefmodule HumanEval do\n  def candidate(list1), do: mul_even_odd(list1)\n  def mul_even_odd(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'mul_even_odd' do\n    assert 4 == HumanEval.candidate([1, 3, 5, 7, 4, 1, 6, 8])\n    assert 2 == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert 10 == HumanEval.candidate([1, 5, 7, 9, 10])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_785_tuple_str_int", "language": "elixir", "prompt": "# Write a function to convert tuple string to integer tuple.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: tuple_str_int(test_str)\n  def tuple_str_int(test_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tuple_str_int' do\n    assert {7, 8, 9} == HumanEval.candidate(\"(7, 8, 9)\")\n    assert {1, 2, 3} == HumanEval.candidate(\"(1, 2, 3)\")\n    assert {4, 5, 6} == HumanEval.candidate(\"(4, 5, 6)\")\n    assert {7, 81, 19} == HumanEval.candidate(\"(7, 81, 19)\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_786_right_insertion", "language": "elixir", "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\n\ndefmodule HumanEval do\n  def candidate(a, x), do: right_insertion(a, x)\n  def right_insertion(a, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'right_insertion' do\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 6)\n    assert 2 == HumanEval.candidate([1, 2, 4, 5], 3)\n    assert 4 == HumanEval.candidate([1, 2, 4, 5], 7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_787_text_match_three", "language": "elixir", "prompt": "# Write a function that matches a string that has an a followed by three 'b'.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_match_three(text)\n  def text_match_three(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_match_three' do\n    assert false == HumanEval.candidate(\"ac\")\n    assert false == HumanEval.candidate(\"dc\")\n    assert true == HumanEval.candidate(\"abbbba\")\n    assert true == HumanEval.candidate(\"caacabbbba\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_788_new_tuple", "language": "elixir", "prompt": "# Write a function to create a new tuple from the given string and list.\n\ndefmodule HumanEval do\n  def candidate(test_list, test_str), do: new_tuple(test_list, test_str)\n  def new_tuple(test_list, test_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'new_tuple' do\n    assert {\"WEB\", \"is\", \"best\"} == HumanEval.candidate([\"WEB\", \"is\"], \"best\")\n    assert {\"We\", \"are\", \"Developers\"} == HumanEval.candidate([\"We\", \"are\"], \"Developers\")\n    assert {\"Part\", \"is\", \"Wrong\"} == HumanEval.candidate([\"Part\", \"is\"], \"Wrong\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_790_even_position", "language": "elixir", "prompt": "# Write a python function to check whether every even index contains even numbers of a given list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: even_position(nums)\n  def even_position(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'even_position' do\n    assert false == HumanEval.candidate([3, 2, 1])\n    assert false == HumanEval.candidate([1, 2, 3])\n    assert true == HumanEval.candidate([2, 1, 4])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_791_remove_nested", "language": "elixir", "prompt": "# Write a function to remove tuples from the given tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup), do: remove_nested(test_tup)\n  def remove_nested(test_tup) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_nested' do\n    assert {1, 5, 7, 10} == HumanEval.candidate({1, 5, 7, {4, 6}, 10})\n    assert {2, 6, 8, 11} == HumanEval.candidate({2, 6, 8, {5, 7}, 11})\n    assert {3, 7, 9, 12} == HumanEval.candidate({3, 7, 9, {6, 8}, 12})\n    assert {3, 7, 9, 12} == HumanEval.candidate({3, 7, 9, {6, 8}, {5, 12}, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_792_count_list", "language": "elixir", "prompt": "# Write a python function to count the number of lists in a given number of lists.\n\ndefmodule HumanEval do\n  def candidate(input_list), do: count_list(input_list)\n  def count_list(input_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_list' do\n    assert 4 == HumanEval.candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    assert 3 == HumanEval.candidate([[1, 2], [2, 3], [4, 5]])\n    assert 2 == HumanEval.candidate([[1, 0], [2, 0]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_793_last", "language": "elixir", "prompt": "# Write a python function to find the last position of an element in a sorted array.\n\ndefmodule HumanEval do\n  def candidate(arr, x), do: last(arr, x)\n  def last(arr, x) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'last' do\n    assert 0 == HumanEval.candidate([1, 2, 3], 1)\n    assert 2 == HumanEval.candidate([1, 1, 1, 2, 3, 4], 1)\n    assert 3 == HumanEval.candidate([2, 3, 2, 3, 6, 8, 9], 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_794_text_starta_endb", "language": "elixir", "prompt": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\ndefmodule HumanEval do\n  def candidate(text), do: text_starta_endb(text)\n  def text_starta_endb(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'text_starta_endb' do\n    assert true == HumanEval.candidate(\"aabbbb\")\n    assert false == HumanEval.candidate(\"aabAbbbc\")\n    assert false == HumanEval.candidate(\"accddbbjjj\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_796_return_sum", "language": "elixir", "prompt": "# Write function to find the sum of all items in the given dictionary.\n\ndefmodule HumanEval do\n  def candidate(dict), do: return_sum(dict)\n  def return_sum(dict) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'return_sum' do\n    assert 600 == HumanEval.candidate(%{\"a\" => 100, \"b\" => 200, \"c\" => 300})\n    assert 88 == HumanEval.candidate(%{\"a\" => 25, \"b\" => 18, \"c\" => 45})\n    assert 124 == HumanEval.candidate(%{\"a\" => 36, \"b\" => 39, \"c\" => 49})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_797_sum_in_range", "language": "elixir", "prompt": "# Write a python function to find the sum of all odd natural numbers within the range l and r.\n\ndefmodule HumanEval do\n  def candidate(l, r), do: sum_in_range(l, r)\n  def sum_in_range(l, r) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sum_in_range' do\n    assert 8 == HumanEval.candidate(2, 5)\n    assert 12 == HumanEval.candidate(5, 7)\n    assert 40 == HumanEval.candidate(7, 13)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_798__sum", "language": "elixir", "prompt": "# Write a python function to find the sum of an array.\n\ndefmodule HumanEval do\n  def candidate(arr), do: _sum(arr)\n  def _sum(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test '_sum' do\n    assert 6 == HumanEval.candidate([1, 2, 3])\n    assert 50 == HumanEval.candidate([15, 12, 13, 10])\n    assert 3 == HumanEval.candidate([0, 1, 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_799_left_rotate", "language": "elixir", "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\ndefmodule HumanEval do\n  def candidate(n, d), do: left_rotate(n, d)\n  def left_rotate(n, d) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'left_rotate' do\n    assert 64 == HumanEval.candidate(16, 2)\n    assert 40 == HumanEval.candidate(10, 2)\n    assert 792 == HumanEval.candidate(99, 3)\n    assert 792 == HumanEval.candidate(99, 3)\n    assert 8 == HumanEval.candidate(1, 3)\n    assert 40 == HumanEval.candidate(5, 3)\n    assert 232 == HumanEval.candidate(29, 3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_79_word_len", "language": "elixir", "prompt": "# Write a python function to check whether the length of the word is odd or not.\n\ndefmodule HumanEval do\n  def candidate(s), do: word_len(s)\n  def word_len(s) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'word_len' do\n    assert false == HumanEval.candidate(\"Hadoop\")\n    assert true == HumanEval.candidate(\"great\")\n    assert true == HumanEval.candidate(\"structure\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_800_remove_all_spaces", "language": "elixir", "prompt": "# Write a function to remove all whitespaces from a string.\n\ndefmodule HumanEval do\n  def candidate(text), do: remove_all_spaces(text)\n  def remove_all_spaces(text) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'remove_all_spaces' do\n    assert \"pythonprogram\" == HumanEval.candidate(\"python  program\")\n    assert \"pythonprogramminglanguage\" == HumanEval.candidate(\"python   programming    language\")\n    assert \"pythonprogram\" == HumanEval.candidate(\"python                     program\")\n    assert \"pythonprogram\" == HumanEval.candidate(\"   python                     program\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_801_test_three_equal", "language": "elixir", "prompt": "# Write a python function to count the number of equal numbers from three given integers.\n\ndefmodule HumanEval do\n  def candidate(x, y, z), do: test_three_equal(x, y, z)\n  def test_three_equal(x, y, z) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'test_three_equal' do\n    assert 3 == HumanEval.candidate(1, 1, 1)\n    assert 0 == HumanEval.candidate(-1, -2, -3)\n    assert 2 == HumanEval.candidate(1, 2, 2)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_802_count_rotation", "language": "elixir", "prompt": "# Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\ndefmodule HumanEval do\n  def candidate(arr), do: count_rotation(arr)\n  def count_rotation(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'count_rotation' do\n    assert 1 == HumanEval.candidate([3, 2, 1])\n    assert 2 == HumanEval.candidate([4, 5, 1, 2, 3])\n    assert 3 == HumanEval.candidate([7, 8, 9, 1, 2, 3])\n    assert 0 == HumanEval.candidate([1, 2, 3])\n    assert 2 == HumanEval.candidate([1, 3, 2])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_803_is_perfect_square", "language": "elixir", "prompt": "# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\ndefmodule HumanEval do\n  def candidate(n), do: is_perfect_square(n)\n  def is_perfect_square(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_perfect_square' do\n    assert false == HumanEval.candidate(10)\n    assert true == HumanEval.candidate(36)\n    assert false == HumanEval.candidate(14)\n    assert true == HumanEval.candidate(196)\n    assert false == HumanEval.candidate(125)\n    assert true == HumanEval.candidate(15625)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_804_is_product_even", "language": "elixir", "prompt": "# Write a function to check whether the product of numbers in a list is even or not.\n\ndefmodule HumanEval do\n  def candidate(arr), do: is_product_even(arr)\n  def is_product_even(arr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_product_even' do\n    assert true == HumanEval.candidate([1, 2, 3])\n    assert true == HumanEval.candidate([1, 2, 1, 4])\n    assert false == HumanEval.candidate([1, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_805_max_sum_list", "language": "elixir", "prompt": "# Write a function that returns the list in a list of lists whose sum of elements is the highest.\n\ndefmodule HumanEval do\n  def candidate(lists), do: max_sum_list(lists)\n  def max_sum_list(lists) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_sum_list' do\n    assert [10, 11, 12] == HumanEval.candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    assert [12, 11, 10] == HumanEval.candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]])\n    assert [2, 3, 1] == HumanEval.candidate([[2, 3, 1]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_806_max_run_uppercase", "language": "elixir", "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\n\ndefmodule HumanEval do\n  def candidate(test_str), do: max_run_uppercase(test_str)\n  def max_run_uppercase(test_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'max_run_uppercase' do\n    assert 5 == HumanEval.candidate(\"GeMKSForGERksISBESt\")\n    assert 6 == HumanEval.candidate(\"PrECIOusMOVemENTSYT\")\n    assert 4 == HumanEval.candidate(\"GooGLEFluTTER\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_807_first_odd", "language": "elixir", "prompt": "# Write a python function to find the first odd number in a given list of numbers.\n\ndefmodule HumanEval do\n  def candidate(nums), do: first_odd(nums)\n  def first_odd(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'first_odd' do\n    assert 1 == HumanEval.candidate([1, 3, 5])\n    assert 1 == HumanEval.candidate([2, 4, 1, 3])\n    assert 9 == HumanEval.candidate([8, 9, 1])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_808_check_K", "language": "elixir", "prompt": "# Write a function to check if the given tuples contain the k or not.\n\ndefmodule HumanEval do\n  def candidate(test_tup, K), do: check_K(test_tup, K)\n  def check_K(test_tup, K) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_K' do\n    assert true == HumanEval.candidate([10, 4, 5, 6, 8], 6)\n    assert false == HumanEval.candidate([1, 2, 3, 4, 5, 6], 7)\n    assert true == HumanEval.candidate([7, 8, 9, 44, 11, 12], 11)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_809_check_smaller", "language": "elixir", "prompt": "# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\ndefmodule HumanEval do\n  def candidate(test_tup1, test_tup2), do: check_smaller(test_tup1, test_tup2)\n  def check_smaller(test_tup1, test_tup2) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'check_smaller' do\n    assert false == HumanEval.candidate({1, 2, 3}, {2, 3, 4})\n    assert true == HumanEval.candidate({4, 5, 6}, {3, 4, 5})\n    assert true == HumanEval.candidate({11, 12, 13}, {10, 11, 12})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_80_tetrahedral_number", "language": "elixir", "prompt": "# Write a function to find the nth tetrahedral number.\n\ndefmodule HumanEval do\n  def candidate(n), do: tetrahedral_number(n)\n  def tetrahedral_number(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'tetrahedral_number' do\n    assert 35 == HumanEval.candidate(5)\n    assert 56 == HumanEval.candidate(6)\n    assert 84 == HumanEval.candidate(7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_83_get_Char", "language": "elixir", "prompt": "# Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndefmodule HumanEval do\n  def candidate(strr), do: get_Char(strr)\n  def get_Char(strr) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'get_Char' do\n    assert \"f\" == HumanEval.candidate(\"abc\")\n    assert \"t\" == HumanEval.candidate(\"gfg\")\n    assert \"c\" == HumanEval.candidate(\"ab\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_84_sequence", "language": "elixir", "prompt": "# Write a function to find the nth number in the newman conway sequence.\n\ndefmodule HumanEval do\n  def candidate(n), do: sequence(n)\n  def sequence(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'sequence' do\n    assert 6 == HumanEval.candidate(10)\n    assert 1 == HumanEval.candidate(2)\n    assert 2 == HumanEval.candidate(3)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "elixir", "prompt": "# Write a function to find nth centered hexagonal number.\n\ndefmodule HumanEval do\n  def candidate(n), do: centered_hexagonal_number(n)\n  def centered_hexagonal_number(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'centered_hexagonal_number' do\n    assert 271 == HumanEval.candidate(10)\n    assert 7 == HumanEval.candidate(2)\n    assert 217 == HumanEval.candidate(9)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "elixir", "prompt": "# Write a function to merge three dictionaries into a single dictionary.\n\ndefmodule HumanEval do\n  def candidate(dict1, dict2, dict3), do: merge_dictionaries_three(dict1, dict2, dict3)\n  def merge_dictionaries_three(dict1, dict2, dict3) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'merge_dictionaries_three' do\n    assert %{\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"} == HumanEval.candidate(%{\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, %{\"G\" => \"Green\", \"W\" => \"White\"}, %{\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"})\n    assert %{\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"} == HumanEval.candidate(%{\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, %{\"G\" => \"Green\", \"W\" => \"White\"}, %{\"L\" => \"lavender\", \"B\" => \"Blue\"})\n    assert %{\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"} == HumanEval.candidate(%{\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, %{\"L\" => \"lavender\", \"B\" => \"Blue\"}, %{\"G\" => \"Green\", \"W\" => \"White\"})\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_88_freq_count", "language": "elixir", "prompt": "# Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndefmodule HumanEval do\n  def candidate(list1), do: freq_count(list1)\n  def freq_count(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'freq_count' do\n    assert %{10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1} == HumanEval.candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n    assert %{1 => 3, 2 => 2, 3 => 3, 4 => 3} == HumanEval.candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n    assert %{10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2} == HumanEval.candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_89_closest_num", "language": "elixir", "prompt": "# Write a function to find the closest smaller number than n.\n\ndefmodule HumanEval do\n  def candidate(N), do: closest_num(N)\n  def closest_num(N) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'closest_num' do\n    assert 10 == HumanEval.candidate(11)\n    assert 6 == HumanEval.candidate(7)\n    assert 11 == HumanEval.candidate(12)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_8_square_nums", "language": "elixir", "prompt": "# Write a function to find squares of individual elements in a list.\n\ndefmodule HumanEval do\n  def candidate(nums), do: square_nums(nums)\n  def square_nums(nums) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'square_nums' do\n    assert [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] == HumanEval.candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert [100, 400, 900] == HumanEval.candidate([10, 20, 30])\n    assert [144, 225] == HumanEval.candidate([12, 15])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_90_len_log", "language": "elixir", "prompt": "# Write a python function to find the length of the longest word.\n\ndefmodule HumanEval do\n  def candidate(list1), do: len_log(list1)\n  def len_log(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'len_log' do\n    assert 7 == HumanEval.candidate([\"python\", \"PHP\", \"bigdata\"])\n    assert 3 == HumanEval.candidate([\"a\", \"ab\", \"abc\"])\n    assert 5 == HumanEval.candidate([\"small\", \"big\", \"tall\"])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_91_find_substring", "language": "elixir", "prompt": "# Write a function to check if a string is present as a substring in a given list of string values.\n\ndefmodule HumanEval do\n  def candidate(str1, sub_str), do: find_substring(str1, sub_str)\n  def find_substring(str1, sub_str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_substring' do\n    assert true == HumanEval.candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n    assert false == HumanEval.candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n    assert true == HumanEval.candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_92_is_undulating", "language": "elixir", "prompt": "# Write a function to check whether the given number is undulating or not.\n\ndefmodule HumanEval do\n  def candidate(n), do: is_undulating(n)\n  def is_undulating(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'is_undulating' do\n    assert true == HumanEval.candidate(1212121)\n    assert false == HumanEval.candidate(1991)\n    assert true == HumanEval.candidate(121)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_93_power", "language": "elixir", "prompt": "# Write a function to calculate the value of 'a' to the power 'b'.\n\ndefmodule HumanEval do\n  def candidate(a, b), do: power(a, b)\n  def power(a, b) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'power' do\n    assert 81 == HumanEval.candidate(3, 4)\n    assert 8 == HumanEval.candidate(2, 3)\n    assert 3125 == HumanEval.candidate(5, 5)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_94_index_minimum", "language": "elixir", "prompt": "# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\ndefmodule HumanEval do\n  def candidate(test_list), do: index_minimum(test_list)\n  def index_minimum(test_list) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'index_minimum' do\n    assert \"Varsha\" == HumanEval.candidate([{\"Rash\", 143}, {\"Manjeet\", 200}, {\"Varsha\", 100}])\n    assert \"Dawood\" == HumanEval.candidate([{\"Yash\", 185}, {\"Dawood\", 125}, {\"Sanya\", 175}])\n    assert \"Ayesha\" == HumanEval.candidate([{\"Sai\", 345}, {\"Salman\", 145}, {\"Ayesha\", 96}])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_95_Find_Min_Length", "language": "elixir", "prompt": "# Write a python function to find the length of the smallest list in a list of lists.\n\ndefmodule HumanEval do\n  def candidate(lst), do: Find_Min_Length(lst)\n  def Find_Min_Length(lst) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'Find_Min_Length' do\n    assert 1 == HumanEval.candidate([[1], [1, 2]])\n    assert 2 == HumanEval.candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n    assert 3 == HumanEval.candidate([[3, 3, 3], [4, 4, 4, 4]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_96_divisor", "language": "elixir", "prompt": "# Write a python function to find the number of divisors of a given integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: divisor(n)\n  def divisor(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'divisor' do\n    assert 4 == HumanEval.candidate(15)\n    assert 6 == HumanEval.candidate(12)\n    assert 3 == HumanEval.candidate(9)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_97_frequency_lists", "language": "elixir", "prompt": "# Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndefmodule HumanEval do\n  def candidate(list1), do: frequency_lists(list1)\n  def frequency_lists(list1) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'frequency_lists' do\n    assert %{1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1} == HumanEval.candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    assert %{1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1} == HumanEval.candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    assert %{20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1} == HumanEval.candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_99_decimal_to_binary", "language": "elixir", "prompt": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndefmodule HumanEval do\n  def candidate(n), do: decimal_to_binary(n)\n  def decimal_to_binary(n) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'decimal_to_binary' do\n    assert \"1000\" == HumanEval.candidate(8)\n    assert \"10010\" == HumanEval.candidate(18)\n    assert \"111\" == HumanEval.candidate(7)\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
{"name": "mbpp_9_find_Rotations", "language": "elixir", "prompt": "# Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndefmodule HumanEval do\n  def candidate(str), do: find_Rotations(str)\n  def find_Rotations(str) do\n    ", "doctests": "keep", "original": "/home/sjw/ljb/lr_rag/multipl_e/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "ExUnit.start()\ndefmodule HumanEvalTest do\n  use ExUnit.Case, async: true\n  test 'find_Rotations' do\n    assert 1 == HumanEval.candidate(\"aaaa\")\n    assert 2 == HumanEval.candidate(\"ab\")\n    assert 3 == HumanEval.candidate(\"abc\")\n  end\nend\n", "stop_tokens": ["\ndefmodule", "\ndefp", "\ndef ", "\n#", "\n\n"]}
